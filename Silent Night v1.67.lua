--Developer: Silent--

--Required Game Version--

	require_game_build(2944) -- GTA Online v1.67
	
	SilentNight = menu.add_submenu("ツ Silent Night")
	
--Required Stats--
		
			MPX = PI 
			PI = stats.get_int("MPPLY_LAST_MP_CHAR") 
		if PI == 0 then MPX = "MP0_" else MPX = "MP1_" end
			ASS = script("appsecuroserv")
			GCS = script("gb_contraband_sell")
			GCB = script("gb_contraband_buy")
			AMW = script("am_mp_warehouse")
			GB = script("gb_gunrunning")
			FMC = script("fm_mission_controller")
			FMC20 = script("fm_mission_controller_2020")
			HIP = script("heist_island_planning")
			FMG = 262145 -- basic global
		
--Required Keyboard Keys--

			keyboard = {W = 87, S = 83, A = 65, D = 68, E = 69}	
		
--Required Functions--

		FormatMoney = function (n) n = tostring(n) return n:reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", "") end
		
		local function TP(x, y, z, yaw, roll, pitch) 
		if localplayer ~= nil then localplayer:set_position(x, y, z) 
								   localplayer:set_rotation(yaw, roll, pitch) end end	
		
---Heist Tool---

	HeistTool = SilentNight:add_submenu("♠ Heist Tool")

--Agency--

	Agency = HeistTool:add_submenu("Agency (Safe)") 
	
			a1 = 1
			AgencyContracts = {"The Nightclub", "The Marina", "Nightlife Leak", "The Country Club", "Guest List", "High Society Leak", "Davis", "The Ballas", "The South Central Leak", "Studio Time", "Don't Fuck With Dre"}
	Agency:add_array_item("VIP Contract", AgencyContracts, function() return a1 end, 
		function(SelCon) if SelCon == 1 then stats.set_int(MPX .. "FIXER_STORY_BS", 3)
		elseif SelCon == 2 then stats.set_int(MPX .. "FIXER_STORY_BS", 4)
		elseif SelCon == 3 then stats.set_int(MPX .. "FIXER_STORY_BS", 12)
		elseif SelCon == 4 then stats.set_int(MPX .. "FIXER_STORY_BS", 28)
		elseif SelCon == 5 then stats.set_int(MPX .. "FIXER_STORY_BS", 60)
		elseif SelCon == 6 then stats.set_int(MPX .. "FIXER_STORY_BS", 124)
		elseif SelCon == 7 then stats.set_int(MPX .. "FIXER_STORY_BS", 252)
		elseif SelCon == 8 then stats.set_int(MPX .. "FIXER_STORY_BS", 508)
		elseif SelCon == 9 then stats.set_int(MPX .. "FIXER_STORY_BS", 2044)
		elseif SelCon == 10 then stats.set_int(MPX .. "FIXER_STORY_BS", 4095)
		elseif SelCon == 11 then stats.set_int(MPX .. "FIXER_STORY_BS", -1) stats.set_int(MPX .. "FIXER_STORY_STRAND", -1) end 
		a1 = SelCon end)	
	
	Agency:add_action("Complete Preps", function() stats.set_int(MPX .. "FIXER_GENERAL_BS", -1) 
												   stats.set_int(MPX .. "FIXER_COMPLETED_BS", -1) 
												   stats.set_int(MPX .. "FIXER_STORY_COOLDOWN", -1) end)

			a2 = false
		local function AgencyMaxPayout(Enabled) 
		if Enabled then globals.set_int(FMG + 32351, 2400000) else globals.set_int(FMG + 32351, 1000000) end end
	Agency:add_toggle("Max Payout (after start)", function() return a2 end, function() a2 = not a2 AgencyMaxPayout(a2) end)
	
	Agency:add_action("Instant Finish (solo only) [Outdated]", function() FMC20:set_int(38397, 51338752) 
																		  FMC20:set_int(39772, 50) end)
	
	Agency:add_action("Cooldown Killer", function() globals.set_int(FMG + 32385, 0) end)
													   
	Agency:add_action("", function() end)
	
	AgencyNote = Agency:add_submenu("Read Me")
	
	AgencyNote:add_action("                 After all choices and", function() end)
	AgencyNote:add_action("            pressing «Complete Preps»", function() end)
	AgencyNote:add_action("                  just wait some time", function() end)

--Auto Shop--

	AutoShop = HeistTool:add_submenu("Auto Shop (Safe)")
	
			a3 = 1
	AutoShop:add_array_item("Auto Shop Mission", {"Union Depository", "Superdollar Deal", "Bank Contract", "ECU Job", "Prison Contract", "Agency Deal", "Lost Contract", "Data Contract"}, function() return a3 end, 
		function(AutShoMis) if AutShoMis == 1 then stats.set_int(MPX .. "TUNER_CURRENT", 0)
		elseif AutShoMis == 2 then stats.set_int(MPX .. "TUNER_CURRENT", 1)
		elseif AutShoMis == 3 then stats.set_int(MPX .. "TUNER_CURRENT", 2)
		elseif AutShoMis == 4 then stats.set_int(MPX .. "TUNER_CURRENT", 3)
		elseif AutShoMis == 5 then stats.set_int(MPX .. "TUNER_CURRENT", 4)
		elseif AutShoMis == 6 then stats.set_int(MPX .. "TUNER_CURRENT", 5)
		elseif AutShoMis == 7 then stats.set_int(MPX .. "TUNER_CURRENT", 6)
		elseif AutShoMis == 8 then stats.set_int(MPX .. "TUNER_CURRENT", 7) end
		a3 = AutShoMis end)
	
	AutoShop:add_action("Complete Preps", function() if stats.get_int(MPX .. "TUNER_CURRENT") == 1 then stats.set_int(MPX .. "TUNER_GEN_BS", 4351) else stats.set_int(MPX .. "TUNER_GEN_BS", 12543) end end) 
		
			a4 = 0
	AutoShop:add_int_range("Set Payout (after start)", 250000, 0, 1000000, function() return a4 end, 
		function(SetPay) for i = FMG + 31602, FMG + 31610 do globals.set_int(i, SetPay) end
		globals.set_float(FMG + 31599, 0) 
		a4 = SetPay end)
	
	AutoShop:add_action("Instant Finish (solo only)", function() FMC20:set_int(45450 + 1, 51338977)
																 FMC20:set_int(45450 + 1378 + 1, 101) end)
		
	AutoShop:add_action("Cooldown Killer", function() for i = 0, 7 do stats.set_int(MPX .. "TUNER_CONTRACT" .. i .. "_POSIX") end end)
	
	AutoShop:add_action("", function() end)
		
	AutoShopNote = AutoShop:add_submenu("Read Me")
	
	AutoShopNote:add_action("                 After all choices and", function() end)
	AutoShopNote:add_action("            pressing «Complete Preps»", function() end)
	AutoShopNote:add_action("       leave autoshop and come back in", function() end)

--Apartment--
	
	Apartment = HeistTool:add_submenu("Apartment (Safe)") 
	
	Apartment:add_action("Complete Preps (any heist)", function() stats.set_int(MPX .. "HEIST_PLANNING_STAGE", -1) end) 
																 
	AC = Apartment:add_submenu("Cuts") 
	
			a5 = 1
	AC:add_array_item("Presets", {"85 All", "100 All"}, function() return a5 end, 
		function(Pre) if Pre == 1 then for i = 1938365 + 3008 + 1, 1938365 + 3008 + 4 do globals.set_int(i, 85) end
		elseif Pre == 2 then for i = 1938365 + 3008 + 1, 1938365 + 3008 + 4 do globals.set_int(i, 100) end end
		a5 = Pre end)
	
	AC:add_int_range("Player 1", 1, 0, 999, function() return globals.get_int(1938365 + 3008 + 1) end, function(Cut) globals.set_int(1938365 + 3008 + 1, Cut) end) 
	AC:add_int_range("Player 2", 1, 0, 999, function() return globals.get_int(1938365 + 3008 + 2) end, function(Cut) globals.set_int(1938365 + 3008 + 2, Cut) end) 
	AC:add_int_range("Player 3", 1, 0, 999, function() return globals.get_int(1938365 + 3008 + 3) end, function(Cut) globals.set_int(1938365 + 3008 + 3, Cut) end) 
	AC:add_int_range("Player 4", 1, 0, 999, function() return globals.get_int(1938365 + 3008 + 4) end, function(Cut) globals.set_int(1938365 + 3008 + 4, Cut) end)
	
	AE = Apartment:add_submenu("Extra")
	
	AE:add_action("Bypass Fleeca Hack", function() FMC:set_int(11760 + 24, 7) end) 
	
	AE:add_action("Bypass Fleeca Drill", function() FMC:set_float(10061 + 11, 100) end)
	
	Apartment:add_action("Instant Finish", function() FMC:set_int(19710, 12) 
													  FMC:set_int(28331 + 1, 99999) 
													  FMC:set_int(31587 + 69, 1) end) 
	
	Apartment:add_action("", function() end)
	
	ApartmentNote = Apartment:add_submenu("Read Me")
	
	ApartmentNote:add_action("                    Complete Preps:", function() end) 
	ApartmentNote:add_action("    Pay for the preparation, start the first", function() end) 
	ApartmentNote:add_action("        mission before using the option", function() end) 
	
--Cayo Perico--

	CayoPerico = HeistTool:add_submenu("Cayo Perico (Safe)")
	
	CPP = CayoPerico:add_submenu("Preps")

			a6 = 1
	CPP:add_array_item("Primary Target", {"Tequila (900k)", "Necklace (1m)", "Bonds (1,1m)", "Diamond (1,3m)", "Statue (1,9m)"}, function() return a6 end, 
		function(PriTar) if PriTar == 1 then stats.set_int(MPX .. "H4CNF_TARGET", 0) 
		elseif PriTar == 2 then stats.set_int(MPX .. "H4CNF_TARGET", 1) 
		elseif PriTar == 3 then stats.set_int(MPX .. "H4CNF_TARGET", 2) 
		elseif PriTar == 4 then stats.set_int(MPX .. "H4CNF_TARGET", 3) 
		elseif PriTar == 5 then stats.set_int(MPX .. "H4CNF_TARGET", 5) end 
		a6 = PriTar end)
		
			a7 = 1
	CPP:add_array_item("Fill Compound Storages", {"None", "Gold", "Paintings", "Cocaine", "Weed", "Cash", "All"}, function() return a7 end, 
		function(FilComSto) if FilComSto == 1 then stats.set_int(MPX .. "H4LOOT_CASH_C", 0) 
												   stats.set_int(MPX .. "H4LOOT_CASH_C_SCOPED", 0) 
												   stats.set_int(MPX .. "H4LOOT_WEED_C", 0) 
												   stats.set_int(MPX .. "H4LOOT_WEED_C_SCOPED", 0) 
												   stats.set_int(MPX .. "H4LOOT_PAINT", 0) 
												   stats.set_int(MPX .. "H4LOOT_PAINT_SCOPED", 0) 
												   stats.set_int(MPX .. "H4LOOT_COKE_C", 0) 
												   stats.set_int(MPX .. "H4LOOT_COKE_C_SCOPED", 0) 
												   stats.set_int(MPX .. "H4LOOT_GOLD_C", 0) 
												   stats.set_int(MPX .. "H4LOOT_GOLD_C_SCOPED", 0)
		elseif FilComSto == 2 then stats.set_int(MPX .. "H4LOOT_GOLD_C", 255) stats.set_int(MPX .. "H4LOOT_GOLD_C_SCOPED", 255)
		elseif FilComSto == 3 then stats.set_int(MPX .. "H4LOOT_PAINT", 255) stats.set_int(MPX .. "H4LOOT_PAINT_SCOPED", 255)
		elseif FilComSto == 4 then stats.set_int(MPX .. "H4LOOT_COKE_C", 255) stats.set_int(MPX .. "H4LOOT_COKE_C_SCOPED", 255) 
		elseif FilComSto == 5 then stats.set_int(MPX .. "H4LOOT_WEED_C", 255) stats.set_int(MPX .. "H4LOOT_WEED_C_SCOPED", 255) 
		elseif FilComSto == 6 then stats.set_int(MPX .. "H4LOOT_CASH_C", 255) stats.set_int(MPX .. "H4LOOT_CASH_C_SCOPED", 255) 
		elseif FilComSto == 7 then stats.set_int(MPX .. "H4LOOT_CASH_C", 255) 
								   stats.set_int(MPX .. "H4LOOT_CASH_C_SCOPED", 255) 
								   stats.set_int(MPX .. "H4LOOT_WEED_C", 255) 
								   stats.set_int(MPX .. "H4LOOT_WEED_C_SCOPED", 255) 
								   stats.set_int(MPX .. "H4LOOT_PAINT", 255) 
								   stats.set_int(MPX .. "H4LOOT_PAINT_SCOPED", 255) 
								   stats.set_int(MPX .. "H4LOOT_COKE_C", 255) 
								   stats.set_int(MPX .. "H4LOOT_COKE_C_SCOPED", 255) 
								   stats.set_int(MPX .. "H4LOOT_GOLD_C", 255) 
								   stats.set_int(MPX .. "H4LOOT_GOLD_C_SCOPED", 255) end 
		a7 = FilIslSto end)
	
			a8 = 1
	CPP:add_array_item("Fill Island Storages", {"None", "Cocaine", "Weed", "Cash", "All"}, function() return a8 end, 
		function(FilIslSto) if FilIslSto == 1 then stats.set_int(MPX .. "H4LOOT_CASH_I", 0) 
												   stats.set_int(MPX .. "H4LOOT_CASH_I_SCOPED", 0) 
												   stats.set_int(MPX .. "H4LOOT_WEED_I", 0) 
												   stats.set_int(MPX .. "H4LOOT_WEED_I_SCOPED", 0) 
												   stats.set_int(MPX .. "H4LOOT_COKE_I", 0) 
												   stats.set_int(MPX .. "H4LOOT_COKE_I_SCOPED", 0) 
												   stats.set_int(MPX .. "H4LOOT_GOLD_I", 0) 
												   stats.set_int(MPX .. "H4LOOT_GOLD_I_SCOPED", 0)
		elseif FilIslSto == 2 then stats.set_int(MPX .. "H4LOOT_GOLD_I", 255) stats.set_int(MPX .. "H4LOOT_GOLD_I_SCOPED", 255) 
		elseif FilIslSto == 3 then stats.set_int(MPX .. "H4LOOT_COKE_I", 167772) stats.set_int(MPX .. "H4LOOT_COKE_I_SCOPED", 167772) 
		elseif FilIslSto == 4 then stats.set_int(MPX .. "H4LOOT_WEED_I", 17215) stats.set_int(MPX .. "H4LOOT_WEED_I_SCOPED", 17215) 
		elseif FilIslSto == 5 then stats.set_int(MPX .. "H4LOOT_CASH_I", 215) stats.set_int(MPX .. "H4LOOT_CASH_I_SCOPED", 215) 
		elseif FilIslSto == 6 then stats.set_int(MPX .. "H4LOOT_CASH_I", 215) 
								   stats.set_int(MPX .. "H4LOOT_CASH_I_SCOPED", 215) 
								   stats.set_int(MPX .. "H4LOOT_WEED_I", 17215) 
								   stats.set_int(MPX .. "H4LOOT_WEED_I_SCOPED", 17215) 
								   stats.set_int(MPX .. "H4LOOT_COKE_I", 167772) 
								   stats.set_int(MPX .. "H4LOOT_COKE_I_SCOPED", 167772) 
								   stats.set_int(MPX .. "H4LOOT_GOLD_I", 255) 
								   stats.set_int(MPX .. "H4LOOT_GOLD_I_SCOPED", 255) end 
		a8 = FilIslSto end)
	
			a9 = 1
	CPP:add_array_item("Difficulty", {"Normal", "Hard"}, function() return a9 end, 
		function(Dif) if Dif == 1 then stats.set_int(MPX .. "H4_PROGRESS", 126823) 
		elseif Dif == 2 then stats.set_int(MPX .. "H4_PROGRESS", 131055) end 
		a9 = Dif end)
		
			a10 = 1
	CPP:add_array_item("Approach", {"Kosatka", "Alkonost", "Velum", "Stealth Annihilator", "Patrol Boat", "Longfin", "All Ways"}, function() return a10 end, 
		function(Air) if Air == 1 then stats.set_int(MPX .. "H4_MISSIONS", 65283) 
		elseif Air == 2 then stats.set_int(MPX .. "H4_MISSIONS", 65413) 
		elseif Air == 3 then stats.set_int(MPX .. "H4_MISSIONS", 65289) 
		elseif Air == 4 then stats.set_int(MPX .. "H4_MISSIONS", 65425) 
		elseif Air == 5 then stats.set_int(MPX .. "H4_MISSIONS", 65313) 
		elseif Air == 6 then stats.set_int(MPX .. "H4_MISSIONS", 65345)
		elseif Air == 7 then stats.set_int(MPX .. "H4_MISSIONS", 65535) end 
		a10 = Air end)	
		
			a11 = 1
	CPP:add_array_item("Weapons", {"Aggressor", "Conspirator", "Crackshot", "Saboteur", "Marksman"}, function() return a11 end, 
		function(Wea) if Wea == 1 then stats.set_int(MPX .. "H4CNF_WEAPONS", 1) 
		elseif Wea == 2 then stats.set_int(MPX .. "H4CNF_WEAPONS", 2) 
		elseif Wea == 3 then stats.set_int(MPX .. "H4CNF_WEAPONS", 3) 
		elseif Wea == 4 then stats.set_int(MPX .. "H4CNF_WEAPONS", 4) 
		elseif Wea == 5 then stats.set_int(MPX .. "H4CNF_WEAPONS", 5) end 
		a11 = Wea end)
		
	CPP:add_action("Complete Preps", function() stats.set_int(MPX .. "H4CNF_UNIFORM", -1) 
												stats.set_int(MPX .. "H4CNF_GRAPPEL", -1) 
												stats.set_int(MPX .. "H4CNF_TROJAN", 5) 
												stats.set_int(MPX .. "H4CNF_WEP_DISRP", 3) 
												stats.set_int(MPX .. "H4CNF_ARM_DISRP", 3) 
												stats.set_int(MPX .. "H4CNF_HEL_DISRP", 3) end)
	
	CPP:add_action("Reset Preps", function() if HIP:is_active() then HIP:set_int(1526, 2) end end) 
	
	CPC = CayoPerico:add_submenu("Cuts") 
	
			a12 = 1
	CPC:add_array_item("Presets", {"85 All", "100 All"}, function() return a12 end, 
		function(Pre) if Pre == 1 then for i = 1978495 + 825 + 56 + 1, 1978495 + 825 + 56 + 4 do globals.set_int(i, 85) end 
		elseif Pre == 2 then for i = 1978495 + 825 + 56 + 1, 1978495 + 825 + 56 + 4 do globals.set_int(i, 100) end end 
		a12 = Pre end)
		
	CPC:add_int_range("Player 1", 1, 0, 999, function() return globals.get_int(1978495 + 825 + 56 + 1) end, function(Cut) globals.set_int(1978495 + 825 + 56 + 1, Cut) end) 
	CPC:add_int_range("Player 2", 1, 0, 999, function() return globals.get_int(1978495 + 825 + 56 + 2) end, function(Cut) globals.set_int(1978495 + 825 + 56 + 2, Cut) end) 
	CPC:add_int_range("Player 3", 1, 0, 999, function() return globals.get_int(1978495 + 825 + 56 + 3) end, function(Cut) globals.set_int(1978495 + 825 + 56 + 3, Cut) end) 
	CPC:add_int_range("Player 4", 1, 0, 999, function() return globals.get_int(1978495 + 825 + 56 + 4) end, function(Cut) globals.set_int(1978495 + 825 + 56 + 4, Cut) end) 					   
	
	CPE = CayoPerico:add_submenu("Extra")
	
	CPCL = CPE:add_submenu("Cooldown Killer")
	
	CPCL:add_action("Kill Cooldown (for solo)", function() stats.set_int(MPX .. "H4_TARGET_POSIX", 1659643454)
														   stats.set_int(MPX .. "H4_COOLDOWN", 0)
														   stats.set_int(MPX .. "H4_COOLDOWN_HARD", 0) end)	
																
	CPCL:add_action("Kill Cooldown (with friends)", function() stats.set_int(MPX .. "H4_TARGET_POSIX", 1659429119)
															   stats.set_int(MPX .. "H4_COOLDOWN", 0)
															   stats.set_int(MPX .. "H4_COOLDOWN_HARD", 0) end)	
							
			a13 = 1
	CPCL:add_array_item("Session", {"Go Offline", "Go Online"}, function() return a13 end, 
		function(Ses) if Ses == 1 then menu.disconnect_session() sleep(0.01) menu.send_key_press(13)
		elseif Ses == 2 then globals.set_int(1575020, 8) globals.set_int(1574589, 1) sleep(0.2) globals.set_int(1574589, 0) end 
		a13 = Ses end)
		
	CPCL:add_action("", function() end)		
		
	CPCLNote = CPCL:add_submenu("Read Me")
	
	CPCLNote:add_action("         Choose a cooldown, go offline", function() end)
	CPCLNote:add_action("                and come back online", function() end)		
		
			a14 = false
		local function WomBag(Enabled) 
		if Enabled then globals.set_int(FMG + 29939, 99999) else globals.set_int(FMG + 29939, 1800) end end
	CPE:add_toggle("Woman's Bag", function() return a14 end, function() a14 = not a14 WomBag(a14) end)	
		
	CPE:add_action("Bypass Fingerprint Hack", function() if FMC20:is_active() then if FMC20:get_int(23669) == 4 then FMC20:set_int(23669, 5) end end end)
		
	CPE:add_action("Bypass Plasma Cutter Cut", function() if FMC20:is_active() then FMC20:set_float(29685 + 3, 100) end end)
	
	CPE:add_action("Bypass Sewer Tunnel Cut", function() if FMC20:is_active() then if FMC20:get_int(28446) >= 3 or FMC20:get_int(28446) <= 6 then FMC20:set_int(28446, 6) end end end)
		   
	CPE:add_action("Unlock All POI", function() stats.set_int(MPX .. "H4CNF_BS_GEN", -1) 
												stats.set_int(MPX .. "H4CNF_BS_ENTR", 63) 
												stats.set_int(MPX .. "H4CNF_APPROACH", -1) end)
												
	CPE:add_action("", function() end)
	
	CPENote = CPE:add_submenu("Read Me")
	
	CPENote:add_action("                      Women's Bag:", function() end)
	CPENote:add_action("       Changes your bag size to infinity", function() end)
	CPENote:add_action("", function() end)
	CPENote:add_action("                For the first robbery:", function() end)
	CPENote:add_action("           Use «Unlock All POI» option", function() end)
													
	CPTP = CayoPerico:add_submenu("Teleports")
	
	CPCom = CPTP:add_submenu("Compound")
	
	CPCom:add_action("Office", function() TP(5005.557617, -5754.321289, 27.545269, -0.000000, 0.000000, 2.586560) end) 
	
	CPCom:add_action("Primary Target", function() TP(5007.763184, -5756.029785, 14.184443, -0.000000, 0.000000, 2.467127) end) 
	
			a15 = 1
	CPCom:add_array_item("Storage", {"Basement", "North", "West", "South"}, function() return a15 end, 
		function(Sto) if Sto == 1 then TP(4999.613281, -5749.913086, 13.540487, -0.000000, 0.000000, 2.613005) 
		elseif Sto == 2 then TP(5080.862305, -5756.300781, 14.529651, -0.000000, 0.000000, -0.575850)
		elseif Sto == 3 then TP(5030.722168, -5736.470703,  16.565588, -0.000000, 0.000000, 2.439484)
		elseif Sto == 4 then TP(5007.434570, -5787.255859, 16.531698, -0.000000, 0.000000, 0.680315) end
		a15 = Sto end)
		
	CPCom:add_action("Main Exit", function() TP(4990.194824, -5716.448730, 18.580215, -0.000000, 0.000000, 0.946360) end)
	
	CPCom:add_action("Water Escape", function() TP(4639.124023, -6010.004883, -7.475036, 1.930023, -0.000000, -0.000000)	end)
	
	CPIsl = CPTP:add_submenu("Island")
	
			a16 = 1
	CPIsl:add_array_item("Airport", {"Loot #1","Loot #2"}, function() return a16 end, 
		function(Air) if Air == 1 then TP(4441.150391, -4459.684082,3.028352, -0.000000, 0.000000, 0.308871) 
		elseif Air == 2 then TP(4503.571777, -4552.908203, 2.871924, 0.000000, 0.000000, 0.100107) end
		a16 = Air end)
		
			a17 = 1
	CPIsl:add_array_item("Main Dock", {"Loot #1", "Loot #2", "Loot #3", "Loot #4"}, function() return a17 end, 
		function(MaiDoc) if MaiDoc == 1 then TP(4923.965820, -5244.269531, 1.223746,-0.000004, 0.000002, -2.954921)
		elseif MaiDoc == 2 then TP(4998.924316, -5165.349121, 1.464225, 0.000000,0.000000, 2.033015)
		elseif MaiDoc == 3 then TP(4962.446777, -5107.580078, 1.682065, 0.000000, 0.000000, 2.606050)
		elseif MaiDoc == 4 then TP(5194.393066, -5134.665039, 2.047954, 0.000000, 0.000000, -1.815477) end
		a17 = MaiDoc end)
		
			a18 = 1
	CPIsl:add_array_item("North Dock", {"Loot #1", "Loot #2", "Loot #3"}, function() return a18 end, 
		function(NorDoc) if NorDoc == 1 then TP(5134.185547, -4611.440430, 1.196429, 0.000000, -0.000000, 0.292134)
		elseif NorDoc == 2 then TP(5065.229492, -4591.959473, 1.555425, -0.000000, -0.000000, -0.303813)
		elseif NorDoc == 3 then TP(5091.613281, -4682.282715, 1.107359, 0.000000, -0.003459, -1.838643) end
		a18 = NorDoc end)
		
	CPIsl:add_action("Cord Field Loot", function() TP(5330.717285, -5270.096191, 31.886055, -0.000000, 0.000000, 1.976751) end)
	
	CPSO = CPTP:add_submenu("Scope Out")
	
	CPSO:add_action("Power Station", function() TP(4478.291992, -4580.129883, 4.258523, -2.885009, -0.000000, 0.000000) end) 
	
			a19 = 1
	CPSO:add_array_item("Towers", {"Communications Tower", "Control Tower", "Water Tower #1", "Water Tower #2"}, function() return a19 end,
		function(Tow) if Tow == 1 then TP(5266.797363, -5427.772461, 139.746445, -0.943473, 0.000000, -0.000000)
		elseif Tow == 2 then TP(4350.219238, -4577.410645, 2.899095, -1.119934, -0.000000, 0.000000)
		elseif Tow == 3 then TP(5108.437012, -4580.132812, 28.417776, 1.720010, -0.000000, 0.000000)
		elseif Tow == 4 then TP(4903.939453, -5337.220703, 34.306366, 0.821753, -0.000000, 0.000000) end
		a19 = Tow end)
		
			a20 = 1
	CPSO:add_array_item("Bolt Cutters", {"#1", "#2", "#3", "#4", "#5", "#6", "#7", "#8", "#9", "#10", "#11", "#12", "#13", "#14", "#15"}, function() return a20 end,
		function(BolCut) if BolCut == 1 then TP(5097.452637, -4620.177734, 1.193875, -2.592525, -0.000000, 0.000000)
		elseif BolCut == 2 then TP(4880.295898, -5112.941406, 1.053022, 1.313561, -0.000346, 0.000020)
		elseif BolCut == 3 then TP(4537.624512, -4542.424805, 3.546365, 1.941974, 0.000004, -0.000007)
		elseif BolCut == 4 then TP(5466.320801, -5230.169922, 25.993027, 2.763307, -0.000000, 0.000000)
		elseif BolCut == 5 then TP(4075.548828, -4663.984863, 2.994547, -2.552265, -0.000000, 0.000000)
		elseif BolCut == 6 then TP(4522.588867, -4509.868652, 3.188455, -2.631163, -0.000000, 0.000000)
		elseif BolCut == 7 then TP(4506.013672, -4656.211914, 10.579565, -0.049160, -0.000000, 0.000000)
		elseif BolCut == 8 then TP(4803.885742, -4317.895020, 6.201560, -0.422076, -0.000000, 0.000000)
		elseif BolCut == 9 then TP(5071.072266, -4639.869629, 2.112077, 0.523910, 0.000000, -0.000000)
		elseif BolCut == 10 then TP(5179.191895, -4669.967285, 5.832691, -2.465155, -0.000000, 0.000000)
		elseif BolCut == 11 then TP(5214.377441, -5126.496582, 4.925748, -1.519287, -0.000000, 0.000000)
		elseif BolCut == 12 then TP(4954.719727, -5180.171875, 2.966018, -2.558609, -0.000000, 0.000000)
		elseif BolCut == 13 then TP(4903.507812, -5345.524414, 8.850177, 2.197429, -0.000000, 0.000000)
		elseif BolCut == 14 then TP(4756.349609, -5539.995605, 17.625168, 2.077786, -0.000000, 0.000000)
		elseif BolCut == 15 then TP(5365.069336, -5438.819824, 47.831707, 0.996262, -0.000000, 0.000000) end
		a20 = BolCut end)
		
			a21 = 1
	CPSO:add_array_item("Cutting Powders", {"#1", "#2", "#3"}, function() return a21 end,
		function(CutPow) if CutPow == 1 then TP(5404.111328, -5171.486328, 30.132875, -0.749873, -0.000000, 0.000000)
		elseif CutPow == 2 then TP(5214.664551, -5131.837402, 4.938407, -1.654735, -0.000000, 0.000000)
		elseif CutPow == 3 then TP(4924.137695, -5271.690918, 4.351841, -2.826915, -0.000000, 0.000000) end
		a21 = CutPow end)
		
			a22 = 1
	CPSO:add_array_item("Grappling Hooks", {"#1", "#2", "#3", "#4", "#5", "#6", "#7", "#8", "#9", "#10"}, function() return a22 end,
		function(GraHoo) if GraHoo == 1 then TP(4901.115723, -5332.090820, 27.841076, -0.469437, -0.000000, 0.000000)
		elseif GraHoo == 2 then TP(4882.464355, -4487.831543, 8.713233, 1.552495, -0.000000, 0.000000)
		elseif GraHoo == 3 then TP(5609.771484, -5653.084473, 8.651618, -2.502223, -0.000000, 0.000000)
		elseif GraHoo == 4 then TP(5125.838379, -5095.626953, 0.893209, 2.800476, -0.000000, 0.000000)
		elseif GraHoo == 5 then TP(4529.709961, -4700.855957, 3.120182, 2.906318, -0.000000, 0.000000)
		elseif GraHoo == 6 then TP(3901.137451, -4690.617676, 2.826484, 2.661214, -0.000000, 0.000000)
		elseif GraHoo == 7 then TP(5404.485840, -5170.345215, 30.130934, -1.991591, -0.000000, 0.000000)
		elseif GraHoo == 8 then TP(5333.016602, -5264.369629, 31.446018, 1.854885, -0.000000, 0.000000)
		elseif GraHoo == 9 then TP(5110.171387, -4579.133301, 28.417776, 0.901852, -0.000000, 0.000000)
		elseif GraHoo == 10 then TP(5267.243164, -5429.493164, 139.747177, 2.378908, -0.000000, 0.000000) end
		a22 = GraHoo end)
		
			a23 = 1
	CPSO:add_array_item("Guard Clothes", {"#1", "#2", "#3", "#4", "#5", "#6", "#7"}, function() return a23 end,
		function(GuaClo) if GuaClo == 1 then TP(5059.213867, -4592.870605, 1.595251, -0.291761, -0.000000, 0.000000)
		elseif GuaClo == 2 then TP(4949.736328, -5320.138672, 6.776219, 3.108989, -0.000000, 0.000000)
		elseif GuaClo == 3 then TP(4884.802734, -5452.898926, 29.437197, -2.087807, -0.000000, 0.000000)
		elseif GuaClo == 4 then TP(4764.295898, -4781.471680, 2.501517, -0.586741, -0.000000, 0.000000)
		elseif GuaClo == 5 then TP(5170.228516, -4677.545898, 1.122545, -0.371411, -0.000000, 0.000000)
		elseif GuaClo == 6 then TP(5161.595215, -4993.595215, 11.394773, -2.397844, -0.000000, 0.000000)
		elseif GuaClo == 7 then TP(5128.021484, -5530.752930, 52.743076, 1.605217, -0.000000, 0.000000) end
		a23 = GuaClo end)
		
			a24 = 1
	CPSO:add_array_item("Signal Boxes", {"#1", "#2", "#3"}, function() return a24 end,
		function(SigBox) if SigBox == 1 then TP(5262.136719, -5432.140625, 64.297203, 2.467814, -0.000000, 0.000000)
		elseif SigBox == 2 then TP(5265.863281, -5421.060059, 64.297638, 0.805274, -0.000000, 0.000000)
		elseif SigBox == 3 then TP(5266.750977, -5426.982910, 139.746857, -0.631726, -0.000000, 0.000000) end
		a24 = SigBox end)
		
			a25 = 1
	CPSO:add_array_item("Supply Trucks", {"#1", "#2", "#3", "#4"}, function() return a25 end,
		function(SupTru) if SupTru == 1 then TP(4517.433105, -4531.979492, 2.820656, -1.275829, -0.000000, 0.000000)
		elseif SupTru == 2 then TP(5148.460938, -4620.099121, 1.108461, -1.422905, -0.000000, 0.000000)
		elseif SupTru == 3 then TP(4901.324219, -5216.216797, 2.768269, -2.631163, -0.000000, 0.000000)
		elseif SupTru == 4 then TP(5152.886719, -5143.897949, 0.997772, -0.205993, -0.000000, 0.000000)
		end a25 = SupTru end)
		
	CayoPerico:add_action("Instant Finish (solo only)", function() FMC20:set_int(45450, 9) FMC20:set_int(46829, 50) end)
	
	CayoPerico:add_action("", function() end)
	
	CayoPericoNote = CayoPerico:add_submenu("Read Me")
	
	CayoPericoNote:add_action("                 After all choices and", function() end)
	CayoPericoNote:add_action("            pressing «Complete Preps»", function() end)
	CayoPericoNote:add_action("      leave submarine and come back in", function() end)
	
--Diamond Сasino--
	
	DiamondCasino = HeistTool:add_submenu("Diamond Casino (Safe)")
	
	DCP = DiamondCasino:add_submenu("Preps")
	
			a26 = 1
	DCP:add_array_item("Target", {"Cash", "Arts", "Gold", "Diamonds"}, function() return a26 end, 
		function(Tar) if Tar == 1 then stats.set_int(MPX .. "H3OPT_TARGET", 0) 
		elseif Tar == 2 then stats.set_int(MPX .. "H3OPT_TARGET", 2) 
		elseif Tar == 3 then stats.set_int(MPX .. "H3OPT_TARGET", 1) 
		elseif Tar == 4 then stats.set_int(MPX .. "H3OPT_TARGET", 3) end 
		a26 = Tar end)
	
			a27 = 1
	DCP:add_array_item("Approach", {"Silent n Sneaky (Normal)", "Big Con (Normal)", "Aggressive (Normal)", "Silent n Sneaky (Hard)", "Big Con (Hard)", "Aggressive (Hard)"}, function() return a27 end, 
		function(App) if App == 1 then stats.set_int(MPX .. "H3_LAST_APPROACH", 3) stats.set_int(MPX .. "H3_HARD_APPROACH", 2) stats.set_int(MPX .. "H3_APPROACH", 1) stats.set_int(MPX .. "H3OPT_APPROACH", 1)
		elseif App == 2 then stats.set_int(MPX .. "H3_LAST_APPROACH", 3) stats.set_int(MPX .. "H3_HARD_APPROACH", 1) stats.set_int(MPX .. "H3_APPROACH", 2) stats.set_int(MPX .. "H3OPT_APPROACH", 2)
		elseif App == 3 then stats.set_int(MPX .. "H3_LAST_APPROACH", 1) stats.set_int(MPX .. "H3_HARD_APPROACH", 2) stats.set_int(MPX .. "H3_APPROACH", 3) stats.set_int(MPX .. "H3OPT_APPROACH", 3)
		elseif App == 4 then stats.set_int(MPX .. "H3_LAST_APPROACH", 2) stats.set_int(MPX .. "H3_HARD_APPROACH", 1) stats.set_int(MPX .. "H3_APPROACH", 3) stats.set_int(MPX .. "H3OPT_APPROACH", 1)
		elseif App == 5 then stats.set_int(MPX .. "H3_LAST_APPROACH", 1) stats.set_int(MPX .. "H3_HARD_APPROACH", 2) stats.set_int(MPX .. "H3_APPROACH", 3) stats.set_int(MPX .. "H3OPT_APPROACH", 2)
		elseif App == 6 then stats.set_int(MPX .. "H3_LAST_APPROACH", 2) stats.set_int(MPX .. "H3_HARD_APPROACH", 3) stats.set_int(MPX .. "H3_APPROACH", 1) stats.set_int(MPX .. "H3OPT_APPROACH", 3) end 
		a27 = App end)
		
			a28 = 1
	DCP:add_array_item("Gunman", {"Karl Abolaji (5%)", "Gustavo Mota (9%)", "Charlie Reed (7%)", "Chester McCoy (10%)", "Patrick McReary (8%)"}, function() return a28 end, 
		function(Gun) if Gun == 1 then stats.set_int(MPX .. "H3OPT_CREWWEAP", 1) 
		elseif Gun == 2 then stats.set_int(MPX .. "H3OPT_CREWWEAP", 2) 
		elseif Gun == 3 then stats.set_int(MPX .. "H3OPT_CREWWEAP", 3) 
		elseif Gun == 4 then stats.set_int(MPX .. "H3OPT_CREWWEAP", 4) 
		elseif Gun == 5 then stats.set_int(MPX .. "H3OPT_CREWWEAP", 5) end 
		a28 = Gun end)
		
			a29 = 1
	DCP:add_array_item("Driver", {"Karim Deniz (5%)", "Taliana Martinez (7%)", "Eddie Toh (9%)", "Zach Nelson (6%)", "Chester McCoy (10%)"}, function() return a29 end, 
		function(Dri) if Dri == 1 then stats.set_int(MPX .. "H3OPT_CREWDRIVER", 1) 
		elseif Dri == 2 then stats.set_int(MPX .. "H3OPT_CREWDRIVER", 2) 
		elseif Dri == 3 then stats.set_int(MPX .. "H3OPT_CREWDRIVER", 3) 
		elseif Dri == 4 then stats.set_int(MPX .. "H3OPT_CREWDRIVER", 4) 
		elseif Dri == 5 then stats.set_int(MPX .. "H3OPT_CREWDRIVER", 5) end 
		a29 = Dri end)
	
			a30 = 1
	DCP:add_array_item("Hacker", {"Rickie Lukens (3%)", "Christian Feltz (7%)", "Yohan Blair (5%)", "Avi Schwartzman (10%)", "Page Harris (9%)"}, function() return a30 end, 
		function(Hac) if Hac == 1 then stats.set_int(MPX .. "H3OPT_CREWHACKER", 1) 
		elseif Hac == 2 then stats.set_int(MPX .. "H3OPT_CREWHACKER", 2) 
		elseif Hac == 3 then stats.set_int(MPX .. "H3OPT_CREWHACKER", 3) 
		elseif Hac == 4 then stats.set_int(MPX .. "H3OPT_CREWHACKER", 5) 
		elseif Hac == 5 then stats.set_int(MPX .. "H3OPT_CREWHACKER", 4) end 
		a30 = Hac end)
	
			a31 = 1
	DCP:add_array_item("Masks", {"Geometic Set", "Hunter Set", "Oni Half Mask Set", "Emoji Set", "Ornate Skull Set", "Lucky Fruit Set", "Guerilla Set", "Clown Set", "Animal Set", "Riot Set", "Oni Full Mask Set", "Hockey Set" }, function() return a31 end, 
		function(Mas) if Mas == 1 then stats.set_int(MPX .. "H3OPT_MASKS", 1) 
		elseif Mas == 2 then stats.set_int(MPX .. "H3OPT_MASKS", 2) 
		elseif Mas == 3 then stats.set_int(MPX .. "H3OPT_MASKS", 3) 
		elseif Mas == 4 then stats.set_int(MPX .. "H3OPT_MASKS", 4) 
		elseif Mas == 5 then stats.set_int(MPX .. "H3OPT_MASKS", 5) 
		elseif Mas == 6 then stats.set_int(MPX .. "H3OPT_MASKS", 6) 
		elseif Mas == 7 then stats.set_int(MPX .. "H3OPT_MASKS", 7) 
		elseif Mas == 8 then stats.set_int(MPX .. "H3OPT_MASKS", 8) 
		elseif Mas == 9 then stats.set_int(MPX .. "H3OPT_MASKS", 9) 
		elseif Mas == 10 then stats.set_int(MPX .. "H3OPT_MASKS", 10)
		elseif Mas == 11 then stats.set_int(MPX .. "H3OPT_MASKS", 11) 
		elseif Mas == 12 then stats.set_int(MPX .. "H3OPT_MASKS", 12) end
		a31 = Mas end)	
	
	DCP:add_action("Complete Preps", function() stats.set_int(MPX .. "H3OPT_DISRUPTSHIP", 3) 
												stats.set_int(MPX .. "H3OPT_KEYLEVELS", 2) 
												stats.set_int(MPX .. "H3OPT_VEHS", 3) 
												stats.set_int(MPX .. "H3OPT_WEAPS", 0) 
												stats.set_int(MPX .. "H3OPT_BITSET0", -1) 
												stats.set_int(MPX .. "H3OPT_BITSET1", -1) 
												stats.set_int(MPX .. "H3OPT_COMPLETEDPOSIX", -1) end)
	
	DCP:add_action("Reset Preps", function() stats.set_int(MPX .. "H3OPT_BITSET1", 0) 
											 stats.set_int(MPX .. "H3OPT_BITSET0", 0) end)
	
	DCC = DiamondCasino:add_submenu("Cuts") 
	
			a32 = 1
	DCC:add_array_item("Presets", {"85 All", "100 All"}, function() return a32 end, 
		function(Pre) if Pre == 1 then for i = 1971696 + 2325 + 1, 1971696 + 2325 + 4 do globals.set_int(i, 85) end 
		elseif Pre == 2 then for i = 1971696 + 2325 + 1, 1971696 + 2325 + 4 do globals.set_int(i, 100) end
		a32 = Pre end end)
		
	DCC:add_int_range("Player 1", 1, 0, 999, function() return globals.get_int(1971696 + 2325 + 1) end, function(DCv7) globals.set_int(1971696 + 2325 + 1, DCv7) end) 
	DCC:add_int_range("Player 2", 1, 0, 999, function() return globals.get_int(1971696 + 2325 + 2) end, function(DCv7) globals.set_int(1971696 + 2325 + 2, DCv7) end) 
	DCC:add_int_range("Player 3", 1, 0, 999, function() return globals.get_int(1971696 + 2325 + 3) end, function(DCv7) globals.set_int(1971696 + 2325 + 3, DCv7) end) 
	DCC:add_int_range("Player 4", 1, 0, 999, function() return globals.get_int(1971696 + 2325 + 4) end, function(DCv7) globals.set_int(1971696 + 2325 + 4, DCv7) end) 
	
	DCE = DiamondCasino:add_submenu("Extra")
	
	DCCL = DCE:add_submenu("Cooldown Killer")
	
	DCCL:add_action("Kill Cooldown", function() stats.set_int(MPX .. "H3_COMPLETEDPOSIX", -1) 
											    stats.set_int("MPPLY_H3_COOLDOWN", -1) end)		

		a33 = 1
	DCCL:add_array_item("Session", {"Go Offline", "Go Online"}, function() return a33 end, 
		function(Ses) if Ses == 1 then menu.disconnect_session() sleep(0.01) menu.send_key_press(13)
		elseif Ses == 2 then globals.set_int(1575020, 8) globals.set_int(1574589, 1) sleep(0.2) globals.set_int(1574589, 0) end 
		a33 = Ses end)
	
	DCCL:add_action("", function() end)
	
	DCCLNote = DCCL:add_submenu("Read Me")
	
	DCCLNote:add_action("         Choose a cooldown, go offline", function() end)
	DCCLNote:add_action("                and come back online", function() end)
	
	
			local function Pad() 
		FMC:set_int(52964, 5)
		FMC:set_int(54026, 5) end
			a37 = false
		local function Hecker(Enabled) 
		if not localplayer then return end 
		if Enabled then hecker_hotkey = menu.register_hotkey(72, Pad) 
		else menu.remove_hotkey(hecker_hotkey) end end
	DCE:add_toggle("Hecker", function() return a37 end, function() a37 = not a37 Hecker(a37) end)
	
	DCE:add_action("Bypass Fingerprint Hack", function() FMC:set_int(52964, 5) end)
		
	DCE:add_action("Bypass Keypad Hack", function() FMC:set_int(54026, 5) end)
		
	DCE:add_action("Bypass Drill Vault Door", function() FMC:set_int(10101 + 7, 4) sleep(0.2) FMC:set_int(10101 + 7, 6) end)
	
	DCE:add_action("Unlock All POI", function() stats.set_int(MPX .. "H3OPT_POI", -1) 
												stats.set_int(MPX .. "H3OPT_ACCESSPOINTS", -1) end)
	
	DCE:add_action("Unlock Cancellation", function() stats.set_int(MPX .. "CAS_HEIST_NOTS", -1) 
													 stats.set_int(MPX .. "CAS_HEIST_FLOW", -1) end)
												   
	DCE:add_action("", function() end)
	
	DCENote = DCE:add_submenu("Read Me")
	
	DCENote:add_action("                           Hecker:", function() end)
	DCENote:add_action(" Pressing «H» will trigger bypass any hack", function() end)
												   
	DCTP = DiamondCasino:add_submenu("Teleports")		
	
			a34 = 1
	DCTP:add_array_item("Staff Room", {"Outside", "Inside"}, function() return a34 end, 
		function(StaRoo) if StaRoo == 1 then TP(960.168335, -14.924523, 78.754761, 0.000000, 0.000000, 0.000000) 
		elseif StaRoo == 2 then TP(2549.139893, -267.529999, -60.022987, 0.000000, 0.000000, 0.000000) end
		a34 = StaRoo end)
		
			a35 = 1
	DCTP:add_array_item("Vaults", {"Outside Main", "Inside Main", "Daily"}, function() return a35 end, 
		function(Vau) if Vau == 3 then TP(2521.761719, -287.359192, -60.022976, 0.000000, 0.000000, 0.000000)
		elseif Vau == 1 then TP(2500.535889, -239.953308, -72.037086, 0.000000, 0.000000, 0.000000)
		elseif Vau == 2 then TP(2515.317139, -238.673294, -72.037102, 0.000000, 0.000000, 0.000000) end 
		a35 = Vau end) 
		
			a36 = 1
	DCTP:add_array_item("Mini-Vaults", {"#1", "#2", "#3", "#4", "#5", "#6"}, function() return a36 end, 
		function(MinVau) if MinVau == 1 then TP(2510.261475, -224.366699, -72.037163, 0.000000, 0.000000, 0.000000) 
		elseif MinVau == 2 then TP(2533.521729, -225.209366, -72.037163, 0.000000, 0.000000, 0.000000)
		elseif MinVau == 3 then TP(2537.823486, -237.452118, -72.037163, 0.000000, 0.000000, 0.000000)
		elseif MinVau == 4 then TP(2534.049561, -248.194931, -72.037163, 0.000000, 0.000000, 0.000000)
		elseif MinVau == 5 then TP(2520.342773, -255.425705, -72.037178, 0.000000, 0.000000, 0.000000)
		elseif MinVau == 6 then TP(2509.844238, -250.968552, -72.037170, 0.000000, 0.000000, 0.000000) end
		a36 = MinVau end)
	
	DiamondCasino:add_action("", function() end)
	
	DiamondCasinoNote = DiamondCasino:add_submenu("Read Me")
	
	DiamondCasinoNote:add_action("                 After all choices and", function() end)
	DiamondCasinoNote:add_action("            pressing «Complete Preps»", function() end)
	DiamondCasinoNote:add_action("                  just wait some time", function() end)
	
--Doomsday--
	
	Doomsday = HeistTool:add_submenu("Doomsday (Safe)") 
	
	DP = Doomsday:add_submenu("Preps")
	
			a38 = 1
	DP:add_array_item("Doomsday Act", {"None", "Data Breaches", "Bogdan Problem", "Doomsday Scenario"}, function() return a38 end, 
		function(DooAct) if DooAct == 1 then a38 = 1
		elseif DooAct == 2 then stats.set_int(MPX .. "GANGOPS_FLOW_MISSION_PROG", 503) stats.set_int(MPX .. "GANGOPS_HEIST_STATUS", 229383) stats.set_int(MPX .. "GANGOPS_FLOW_NOTIFICATIONS", 1557) 
		elseif DooAct == 3 then stats.set_int(MPX .. "GANGOPS_FLOW_MISSION_PROG", 240) stats.set_int(MPX .. "GANGOPS_HEIST_STATUS", 229378) stats.set_int(MPX .. "GANGOPS_FLOW_NOTIFICATIONS", 1557) 
		elseif DooAct == 4 then stats.set_int(MPX .. "GANGOPS_FLOW_MISSION_PROG", 16368) stats.set_int(MPX .. "GANGOPS_HEIST_STATUS", 229380) stats.set_int(MPX .. "GANGOPS_FLOW_NOTIFICATIONS", 1557) end
		a38 = DooAct end)
			
	DP:add_action("Complete Preps", function() stats.set_int(MPX .. "GANGOPS_FM_MISSION_PROG", -1) end) 
	
	DP:add_action("Reset Preps", function() stats.set_int(MPX .. "GANGOPS_FLOW_MISSION_PROG", 240) 
											stats.set_int(MPX .. "GANGOPS_HEIST_STATUS", 0) 
											stats.set_int(MPX .. "GANGOPS_FLOW_NOTIFICATIONS", 1557) end) 
													 
	DC = Doomsday:add_submenu("Cuts") 
	
			a39 = 1
	DC:add_array_item("Presets", {"85 All", "100 All"}, function() return a39 end,
		function(Pre) if Pre == 1 then for i = 1967630 + 812 + 50 + 1, 1967630 + 812 + 50 + 4 do globals.set_int(i, 85) end
		elseif Pre == 2 then for i = 1967630 + 812 + 50 + 1, 1967630 + 812 + 50 + 4 do globals.set_int(i, 100) end end
		a39 = Pre end)
		
    DC:add_int_range("Player 1", 1, 0, 999, function() return globals.get_int(1967630 + 812 + 50 + 1) end, function(Cut) globals.set_int(1967630 + 812 + 50 + 1, Cut) end) 
	DC:add_int_range("Player 2", 1, 0, 999, function() return globals.get_int(1967630 + 812 + 50 + 2) end, function(Cut) globals.set_int(1967630 + 812 + 50 + 2, Cut) end) 
	DC:add_int_range("Player 3", 1, 0, 999, function() return globals.get_int(1967630 + 812 + 50 + 3) end, function(Cut) globals.set_int(1967630 + 812 + 50 + 3, Cut) end) 
	DC:add_int_range("Player 4", 1, 0, 999, function() return globals.get_int(1967630 + 812 + 50 + 4) end, function(Cut) globals.set_int(1967630 + 812 + 50 + 4, Cut) end)
	
	DE = Doomsday:add_submenu("Extra")
	
	DE:add_action("Bypass Data Breaches Hack [Outdated]", function() FMC:set_int(1537, 2) end)
	
	DE:add_action("Bypass Doomsday Scenario Hack", function() FMC:set_int(1266 + 135, 3) end)
	
	Doomsday:add_action("", function() end) 
	
	DoomsdayNote = Doomsday:add_submenu("Read Me")
	
	DoomsdayNote:add_action("                 After all choices and", function() end)
	DoomsdayNote:add_action("            pressing «Complete Preps»", function() end)
	DoomsdayNote:add_action("      leave your base and come back in", function() end)

---Money Tool---

	MoneyTool = SilentNight:add_submenu("♣ Money Tool")
	
--Bunker Crash--

	BunkerCrash = MoneyTool:add_submenu("Bunker Crash (Semi-Detected)")
			
	BunkerCrash:add_action("Start Solo Session", function() globals.set_int(1575020, 8) globals.set_int(1574589, 1) sleep(1) globals.set_int(1574589, 0) end)
	
			a40 = false
		local function RedResDelAndCos(Enabled)
		if Enabled then globals.set_int(FMG + 19842, 10) 
						globals.set_int(FMG + 21735, 1000) 
						globals.set_int(FMG + 21736, 1000) 
		else globals.set_int(FMG + 19842, 600) 
			 globals.set_int(FMG + 21735, 15000) 
			 globals.set_int(FMG + 21736, 15000) end end
	BunkerCrash:add_toggle("Reduce Resupply Delay n Cost", function() return a40 end, function() a40 = not a40 RedResDelAndCos(a40) end)
	

	BunkerCrash:add_action("Teleport to Laptop (use inside bunker)", function() TP(907.060000, -3207.460000, -98.490000, -1.500000, -0.000000, 0.000000) 
																				  sleep(1)
																				  menu.send_key_press(69)
																				  sleep(7.5)
																				  menu.send_key_press(13) end)
									   
	BunkerCrash:add_action("Trigger Production", function() menu.trigger_bunker_production() end)
			
			BunkerPresets = {"Default", "2.5mil (Safe)"}
			a41 = 1
	BunkerCrash:add_array_item("Instant Sell [Outdated]", BunkerPresets, function() return a41 end, 
		function(InsSel) if BunkerPresets[InsSel] == "Default" then globals.set_int(283726, 5000)
		elseif BunkerPresets[InsSel] == "2.5mil (Safe)" then globals.set_int(283726, 2500000) end
			a41 = InsSel 
			sleep(1)
			GB:set_int(1977, 0) end)
	
	BunkerCrash:add_action("Legal Stats", function() stats.set_int(MPX .. "LIFETIME_BKR_SELL_EARNINGS5", 19995000)
													 stats.set_int(MPX .. "LIFETIME_BKR_SEL_COMPLETBC5", 1000)
													 stats.set_int(MPX .. "LIFETIME_BKR_SEL_UNDERTABC5", 1000)
													 sleep(2) 
													 globals.set_int(1575020, 8) 
													 globals.set_int(1574589, 1) 
													 sleep(1) 
													 globals.set_int(1574589, 0) end)
												
	BunkerCrash:add_action("", function() end)
	
	BunkerCrashNote = BunkerCrash:add_submenu("Read Me")

	BunkerCrashNote:add_action("       Sell all goods for «Default» price", function() end)
	BunkerCrashNote:add_action("          before selecting higher preset;", function() end)
	BunkerCrashNote:add_action("   always choose to sell in Blaine County;", function() end)
	BunkerCrashNote:add_action("", function() end)
	BunkerCrashNote:add_action("                      Empty Session:", function() end)
	BunkerCrashNote:add_action("       Use if you aren't alone in session", function() end)
	BunkerCrashNote:add_action("", function() end)
	BunkerCrashNote:add_action("         Reduce Resupply Delay n Cost:", function() end)
	BunkerCrashNote:add_action("   Use to reduce resupply delay and cost", function() end)
	BunkerCrashNote:add_action("    to 10 secs and few thousands dollars", function() end) 
	BunkerCrashNote:add_action("", function() end)
	BunkerCrashNote:add_action("                  Teleport to Laptop:", function() end)
	BunkerCrashNote:add_action("   Use to tp to laptop inside your bunker;", function() end)
	BunkerCrashNote:add_action("              it also automatically sits", function() end)
	BunkerCrashNote:add_action("            down and opens the menu", function() end)
	BunkerCrashNote:add_action("", function() end)
	BunkerCrashNote:add_action("                 Trigger Production:", function() end)
	BunkerCrashNote:add_action("         Use once you got some stock,", function() end)
	BunkerCrashNote:add_action("     so you can get a bit goods for sale", function() end)
	BunkerCrashNote:add_action("", function() end)
	BunkerCrashNote:add_action("                        Instant Sell:", function() end)
	BunkerCrashNote:add_action("         Start the sale mission and then", function() end)
	BunkerCrashNote:add_action("         choose the preset and activate", function() end)
	BunkerCrashNote:add_action("", function() end)
	BunkerCrashNote:add_action("                        Legal Stats:", function() end)
	BunkerCrashNote:add_action("   Changes your sales and earnings stats;", function() end)
	BunkerCrashNote:add_action("   to save the legal statistics, you need to", function() end)
	BunkerCrashNote:add_action("   make one more sale for «Default» price", function() end)
	
--Easy Loop--

	EasyLoop = MoneyTool:add_submenu("Easy Loop (Safe) [Outdated]")
		
			a42 = false
		local function EzLoop()
		while a42 == true do globals.set_int(1966104, 1)
							 sleep(1.5) end end
	EasyLoop:add_toggle("$5k/1s (AFK)", function() return a42 end, function() a42 = not a42 EzLoop(a42) end)
	
	EasyLoop:add_action("", function() end)
	
	EasyLoopNote = EasyLoop:add_submenu("Read Me")
	
	EasyLoopNote:add_action("      The current suggested max amount", function() end)
	EasyLoopNote:add_action("      to use this option is: 50m per week", function() end)

--Money Editor--

	MoneyEditor = MoneyTool:add_submenu("Money Editor (Safe)")
	
--Cash Remover--

	CashRemover = MoneyEditor:add_submenu("Cash Remover (Real) [Outdated]")
		
	NumberList = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}
	
			a43 = false
		local function CasRemCooldownKiller()
		if a43 == true then globals.set_int(FMG + 1283, 0)
		else globals.set_int(FMG + 12837, 600000) end end
	CashRemover:add_toggle("Cooldown Killer", function() return a43 end, function() a43 = not a43 CasRemCooldownKiller(a43) end)
		
	CashRemover:add_bare_item("", function() return "Current Price: $" .. FormatMoney(globals.get_int(FMG + 12850)) end, function() end, function() end, function() end)
	
			DefNum1 = NumberList[1]
			DefNum1Cur = 1
	CashRemover:add_array_item("Char #1", NumberList, function() return DefNum1Cur end, function(NewNum1)
		DefNum1 = NumberList[NewNum1]
		DefNum1Cur = NewNum1 end)
	
			DefNum2 = NumberList[1]
			DefNum2Cur = 1
	CashRemover:add_array_item("Char #2", NumberList, function() return DefNum2Cur end, function(NewNum2)
		DefNum2 = NumberList[NewNum2]
		DefNum2Cur = NewNum2 end)

			DefNum3 = NumberList[1]
			DefNum3Cur = 1
	CashRemover:add_array_item("Char #3", NumberList, function() return DefNum3Cur end, function(NewNum3)
		DefNum3 = NumberList[NewNum3]
		DefNum3Cur = NewNum3 end)
	
			DefNum4 = NumberList[1]
			DefNum4Cur = 1
	CashRemover:add_array_item("Char #4", NumberList, function() return DefNum4Cur end, function(NewNum4)
		DefNum4 = NumberList[NewNum4]
		DefNum4Cur = NewNum4 end)
	
			DefNum5 = NumberList[1]
			DefNum5Cur = 1
	CashRemover:add_array_item("Char #5", NumberList, function() return DefNum5Cur end, function(NewNum5)
		DefNum5 = NumberList[NewNum5]
		DefNum5Cur = NewNum5 end)
	
			DefNum6 = NumberList[1]
			DefNum6Cur = 1
	CashRemover:add_array_item("Char #6", NumberList, function() return DefNum6Cur end, function(NewNum6)
		DefNum6 = NumberList[NewNum6]
		DefNum6Cur = NewNum6 end)
	
			DefNum7 = NumberList[1]
			DefNum7Cur = 1
	CashRemover:add_array_item("Char #7", NumberList, function() return DefNum7Cur end, function(NewNum7)
		DefNum7 = NumberList[NewNum7]
		DefNum7Cur = NewNum7 end)
	
			DefNum8 = NumberList[1]
			DefNum8Cur = 1
	CashRemover:add_array_item("Char #8", NumberList, function() return DefNum8Cur end, function(NewNum8)
		DefNum8 = NumberList[NewNum8]
		DefNum8Cur = NewNum8 end)
		
			DefNum9 = NumberList[1]
			DefNum9Cur = 1
	CashRemover:add_array_item("Char #9", NumberList, function() return DefNum9Cur end, function(NewNum9)
		DefNum9 = NumberList[NewNum9]
		DefNum9Cur = NewNum9 end)

			DefNum10 = NumberList[1]
			DefNum10Cur = 1
	CashRemover:add_array_item("Char #10", NumberList, function() return DefNum10Cur end, function(NewNum10)
		DefNum10 = NumberList[NewNum10]
		DefNum10Cur = NewNum10 end)
		
	CashRemover:add_bare_item("", function() return "Change Price: $" .. FormatMoney(DefNum1 .. DefNum2 .. DefNum3 .. DefNum4 .. DefNum5 .. DefNum6 .. DefNum7 .. DefNum8 .. DefNum9 .. DefNum10) end, function() globals.set_int(FMG + 12850, DefNum1 .. DefNum2 .. DefNum3 .. DefNum4 .. DefNum5 .. DefNum6 .. DefNum7 .. DefNum8 .. DefNum9 .. DefNum10) end, function() globals.set_int(38979, 0) end, function() end)
	
	CashRemover:add_action("", function() end)
	
	CashRemoverNote = CashRemover:add_submenu("Read Me")
	
	CashRemoverNote:add_action("        To remove your money, activate", function() end) 
	CashRemoverNote:add_action("  ghost organization via interaction menu", function() end)
	
--Total Earned--
	
	TotalEarned = MoneyEditor:add_submenu("Total Earned n Spent (Stats)")
	
	TotalEarned:add_bare_item("", function() return "Current Total Earned: $" .. FormatMoney(stats.get_int("MPPLY_TOTAL_EVC")) end, function() end, function() end, function() end)
	
	TotalEarned:add_bare_item("", function() return "Current Total Spent: $" .. FormatMoney(stats.get_int("MPPLY_TOTAL_SVC")) end, function() end, function() end, function() end)
	
			DefNum11 = NumberList[1]
			DefNum11Cur = 1
	TotalEarned:add_array_item("Char #1", NumberList, function() return DefNum11 end, function(NewNum11)
		DefNum11 = NumberList[NewNum11]
		DefNum11Cur = NewNum11 end)
	
			DefNum12 = NumberList[1]
			DefNum12Cur = 1
	TotalEarned:add_array_item("Char #2", NumberList, function() return DefNum12 end, function(NewNum12)
		DefNum12 = NumberList[NewNum12]
		DefNum12Cur = NewNum12 end)

			DefNum13 = NumberList[1]
			DefNum13Cur = 1
	TotalEarned:add_array_item("Char #3", NumberList, function() return DefNum13 end, function(NewNum13)
		DefNum13 = NumberList[NewNum13]
		DefNum13Cur = NewNum13 end)
	
			DefNum14 = NumberList[1]
			DefNum14Cur = 1
	TotalEarned:add_array_item("Char #4", NumberList, function() return DefNum14 end, function(NewNum14)
		DefNum14 = NumberList[NewNum14]
		DefNum14Cur = NewNum14 end)
	
			DefNum15 = NumberList[1]
			DefNum15Cur = 1
	TotalEarned:add_array_item("Char #5", NumberList, function() return DefNum15 end, function(NewNum15)
		DefNum15 = NumberList[NewNum15]
		DefNum15Cur = NewNum15 end)
	
			DefNum16 = NumberList[1]
			DefNum16Cur = 1
	TotalEarned:add_array_item("Char #6", NumberList, function() return DefNum16 end, function(NewNum16)
		DefNum16 = NumberList[NewNum16]
		DefNum16Cur = NewNum16 end)
	
			DefNum17 = NumberList[1]
			DefNum17Cur = 1
	TotalEarned:add_array_item("Char #7", NumberList, function() return DefNum17 end, function(NewNum17)
		DefNum17 = NumberList[NewNum17]
		DefNum17Cur = NewNum17 end)
	
			DefNum18 = NumberList[1]
			DefNum18Cur = 1
	TotalEarned:add_array_item("Char #8", NumberList, function() return DefNum18 end, function(NewNum18)
		DefNum18 = NumberList[NewNum18]
		DefNum18Cur = NewNum18 end)
		
			DefNum19 = NumberList[1]
			DefNum19Cur = 1
	TotalEarned:add_array_item("Char #9", NumberList, function() return DefNum19 end, function(NewNum19)
		DefNum19 = NumberList[NewNum19]
		DefNum19Cur = NewNum19 end)

			DefNum20 = NumberList[1]
			DefNum20Cur = 1
	TotalEarned:add_array_item("Char #10", NumberList, function() return DefNum20 end, function(NewNum20)
		DefNum20 = NumberList[NewNum20]
		DefNum20Cur = NewNum20 end)
		
	TotalEarned:add_bare_item("", function() return "Changed Value: $" .. FormatMoney(DefNum11 .. DefNum12 .. DefNum13 .. DefNum14 .. DefNum15 .. DefNum16 .. DefNum17 .. DefNum18 .. DefNum19 .. DefNum20) end, function() end, function() end, function() end)
	
	TotalEarned:add_action("Change Total Earned", function() stats.set_int("MPPLY_TOTAL_EVC", DefNum11 .. DefNum12 .. DefNum13 .. DefNum14 .. DefNum15 .. DefNum16 .. DefNum17 .. DefNum18 .. DefNum19 .. DefNum20) end)
	
	TotalEarned:add_action("Change Total Spent", function() stats.set_int("MPPLY_TOTAL_SVC", DefNum11 .. DefNum12 .. DefNum13 .. DefNum14 .. DefNum15 .. DefNum16 .. DefNum17 .. DefNum18 .. DefNum19 .. DefNum20) end)
	
	TotalEarned:add_action("Make Earned n Spent The Same", function() stats.set_int("MPPLY_TOTAL_EVC", stats.get_int("MPPLY_TOTAL_SVC")) end)
	
	TotalEarned:add_action("Make Spent n Earned The Same", function() stats.set_int("MPPLY_TOTAL_SVC", stats.get_int("MPPLY_TOTAL_EVC")) end)
	
	TotalEarned:add_action("", function() end)
	
	TotalEarnedNote = TotalEarned:add_submenu("Read Me")
	
	TotalEarnedNote:add_action("   To save the new statistics, you need to", function() end)
	TotalEarnedNote:add_action("    earn or spend somehow some money", function() end)
	
--Nightclub Safe Abuse--

	NightclubSafeAbuse = MoneyTool:add_submenu("Nightclub Safe Abuse (Safe)")

			a44 = false
		local function SafeLoop()
		while a44 do stats.set_int(MPX .. "CLUB_POPULARITY", 1000)
					 stats.set_int(MPX .. "CLUB_PAY_TIME_LEFT", -1)
					 sleep(1.5)
					 stats.set_int(MPX .. "CLUB_POPULARITY", 1000)
					 stats.set_int(MPX .. "CLUB_PAY_TIME_LEFT", -1)
					 sleep(1.5)
					 stats.set_int(MPX .. "CLUB_POPULARITY", 1000)
					 stats.set_int(MPX .. "CLUB_PAY_TIME_LEFT", -1)
					 sleep(1.5)
					 stats.set_int(MPX .. "CLUB_POPULARITY", 1000)
					 stats.set_int(MPX .. "CLUB_PAY_TIME_LEFT", -1)
					 sleep(1.5)
					 stats.set_int(MPX .. "CLUB_POPULARITY", 1000)
					 stats.set_int(MPX .. "CLUB_PAY_TIME_LEFT", -1)
					 sleep(4) end end
	NightclubSafeAbuse:add_toggle("$250k/10s (AFK)", function() return a44 end, function() a44 = not a44 SafeLoop() end)
	
	NightclubSafeAbuse:add_action("", function() end)
	
	NightclubSafeAbuseNote = NightclubSafeAbuse:add_submenu("Read Me")
	
	NightclubSafeAbuseNote:add_action("    Open the nightclub safe and activate", function() end)
	
--Orbital Refund--

	OrbitalRefund = MoneyTool:add_submenu("Orbital Refund (Detected)")
	
			a45 = false 
		local function OrbitalLoop(Enabled) 
		while a45 do globals.set_int(1969112, 2) 
					 sleep(3) 
					 globals.set_int(1969112, 0) 
					 sleep(30) end end
	OrbitalRefund:add_toggle("$500k/30s (AFK)", function() return a45 end, function() a45 = not a45 OrbitalLoop() end)
	
	OrbitalRefund:add_action("", function() end)
	
	OrbitalRefundNote = OrbitalRefund:add_submenu("Read Me")
	
	OrbitalRefundNote:add_action("      The current suggested max amount", function() end)
	OrbitalRefundNote:add_action("      to use this option is: 10m per week", function() end)

--Special Cargo VIP--

	SpecialCargoVIP = MoneyTool:add_submenu("Special Cargo VIP (Semi-Detected)")
	
--AFK Mode--

	AFKMode = SpecialCargoVIP:add_submenu("AFK Mode")

			a46 = 1 
			DefDelay1 = 0.5
	AFKMode:add_array_item("Delays", {"Default", "Fast", "Medium", "Slow"}, function() return a46 end, 
		function(DelayType1) if DelayType1 == 1 then DefDelay1 = 0.5 
		elseif DelayType1 == 2 then DefDelay1 = 1 
		elseif DelayType1 == 3 then DefDelay1 = 2 
		elseif DelayType1 == 4 then DefDelay1 = 3 end
		a46 = DelayType1 end)
	
			a47 = 1
			DefWarehouse = 1 
	AFKMode:add_array_item("Warehouse Type", {"None", "Small (16)", "Medium (42)", "Large (111)"}, function() return a47 end,
		function(WarehouseType) if WarehouseType == 1 then DefWarehouse = 0 
		elseif WarehouseType == 2 then DefWarehouse = 1 
		elseif WarehouseType == 3 then DefWarehouse = 2 
		elseif WarehouseType == 4 then DefWarehouse = 3 end
		a47 = WarehouseType end)
		
			--a48 = 1
			DefCash = 6000000	
	--AFKMode:add_array_item("Required Cash", {"Default", "48mil", "96mil", "246mil", "498mil", "996mil"}, function() return a48 end,
		--function(RequiredCash) if RequiredCash == 1 then DefCash = 10000 
		--elseif RequiredCash == 2 then DefCash = 48000000 
		--elseif RequiredCash == 3 then DefCash = 98000000 
		--elseif RequiredCash == 4 then DefCash = 246000000 
		--elseif RequiredCash == 5 then DefCash = 498000000 
		--elseif RequiredCash == 6 then DefCash = 996000000 end 
		--LoopStop = 0
		--a48 = RequiredCash end)
		
			a49 = 0
	AFKMode:add_int_range("Required Cash", 6000000, 0, 996000000, function() return a49 end,
		function(ReqCash) DefCash = ReqCash
						  a49 = ReqCash end)
		
			InfMode = true
	AFKMode:add_toggle("Infinity $$$", function() return InfMode end, function() InfMode = not InfMode end)
			
			a50 = false
			LoopStop = 0
		local function AfkMode()
		GetTotalCash = stats.get_int("MPPLY_TOTAL_EVC")
		SaveTotalCash = GetTotalCash 
		ReqTotalCash = SaveTotalCash + DefCash
		if a50 == false then LoopStop = 1 return end
			if DefWarehouse == 1 then while LoopStop == 0 do 
				if AMW:is_active() then globals.set_int(FMG + 15963, 6000000)
										globals.set_int(FMG + 15728, 0)
										globals.set_int(FMG + 15729, 0)
										globals.set_int(4536677, 0)
										globals.set_int(4536678, 0)
										globals.set_int(4536679, 0)
				if AMW:is_active() then menu.send_key_down(keyboard.D) 
										sleep(1.8) 
										menu.send_key_up(keyboard.D) 
										menu.send_key_press(keyboard.E) 
				if ASS:is_active() then ASS:set_int(737, 1) 
										sleep(0.2) 
										ASS:set_int(738, 1) 
										sleep(0.2) 
										ASS:set_int(556, 3012) end
				if GCS:is_active() then 
					if NoRP == false then globals.set_float(FMG + 1, 1)
					else globals.set_float(FMG + 1, 0) end
					GCS:set_int(1136, 1)
					GCS:set_int(596, 0)
					GCS:set_int(1125, 0)
					GCS:set_int(548, 7)
					sleep(DefDelay1)
					GCS:set_int(542, 99999)
				if NoCrateBack == false then for i = 12, 16 do stats.set_bool_masked(MPX .. "FIXERPSTAT_BOOL1", true, i, MPX) end end
				sleep(2)
				if not AMW:is_active() then GCS:set_int(542, 99999)
										menu.send_key_down(keyboard.S)
										sleep(1.5)
										menu.send_key_up(keyboard.S)
				if InfMode == false then 
				if stats.get_int("MPPLY_TOTAL_EVC") >= ReqTotalCash then LoopStop = 1 a9 = false 
				else LoopStop = 0 end end end end end end end 
				LoopStop = 0 end
			if DefWarehouse == 2 then while LoopStop == 0 do 
				if AMW:is_active() then globals.set_int(FMG + 15963, 6000000)
										globals.set_int(FMG + 15728, 0)
										globals.set_int(FMG + 15729, 0)
										globals.set_int(4536677, 0)
										globals.set_int(4536678, 0)
										globals.set_int(4536679, 0)
				if AMW:is_active() then menu.send_key_down(keyboard.D)
										sleep(1.6)
										menu.send_key_down(keyboard.W)
										sleep(0.8)
										menu.send_key_up(keyboard.D)
										menu.send_key_up(keyboard.W)
										menu.send_key_press(keyboard.E)
				if ASS:is_active() then ASS:set_int(737, 1)
										sleep(0.2)
										ASS:set_int(738, 1)
										sleep(0.2)
										ASS:set_int(556, 3012) end
				if GCS:is_active() then 
					if NoRP == false then globals.set_float(FMG + 1, 1)
					else globals.set_float(FMG + 1, 0) end
					GCS:set_int(1136, 1)
					GCS:set_int(596, 0)
					GCS:set_int(1125, 0)
					GCS:set_int(548, 7)
					sleep(DefDelay1)
					GCS:set_int(542, 99999)
				if NoCrateBack == false then for i = 12, 16 do stats.set_bool_masked(MPX .. "FIXERPSTAT_BOOL1", true, i, MPX) end end
				sleep(2)
				if not AMW:is_active() then GCS:set_int(542, 99999)
											menu.send_key_down(keyboard.S)
											sleep(1.5)
											menu.send_key_up(keyboard.S)
				if InfMode == false then if stats.get_int("MPPLY_TOTAL_EVC") >= ReqTotalCash then LoopStop = 1 a9 = false 
				else LoopStop = 0 end end end end end end end 
				LoopStop = 0 end
			if DefWarehouse == 3 then while LoopStop == 0 do 
				if AMW:is_active() then globals.set_int(FMG + 15963, 6000000)
										globals.set_int(FMG + 15728, 0)
										globals.set_int(FMG + 15729, 0)
										globals.set_int(4536677, 0)
										globals.set_int(4536678, 0)
										globals.set_int(4536679, 0)
				if AMW:is_active() then menu.send_key_down(keyboard.W)
										menu.send_key_down(keyboard.A)
										sleep(0.8)
										menu.send_key_up(keyboard.W)
										menu.send_key_up(keyboard.A)
										menu.send_key_press(keyboard.E)
				if ASS:is_active() then ASS:set_int(737, 1)
										sleep(0.2)
										ASS:set_int(738, 1)
										sleep(0.2)
										ASS:set_int(556, 3012) end 
				if GCS:is_active() then 
					if NoRP == false then globals.set_float(FMG + 1, 1)
					else globals.set_float(FMG + 1, 0) end
					GCS:set_int(1136, 1)
					GCS:set_int(596, 0)
					GCS:set_int(1125, 0)
					GCS:set_int(548, 7)
					sleep(DefDelay1)
					GCS:set_int(542, 99999)
				if NoCrateBack == false then for i = 12, 16 do stats.set_bool_masked(MPX .. "FIXERPSTAT_BOOL1", true, i, MPX) end end
				sleep(2)
				if not AMW:is_active() then GCS:set_int(542, 99999)
											menu.send_key_down(keyboard.S)
											sleep(1.5)
											menu.send_key_up(keyboard.S)
				if InfMode == false then if stats.get_int("MPPLY_TOTAL_EVC") >= ReqTotalCash then LoopStop = 1 a50 = false 
				else LoopStop = 0 end end end end end end end end
				LoopStop = 0 end 
	AFKMode:add_toggle("Toggle AFK Mode", function() return a50 end, function() a50 = not a50 AfkMode(a50) end)
					
			CurrentCash = stats.get_int("MPPLY_TOTAL_EVC")
			SaveCash = CurrentCash
	AFKMode:add_bare_item("", function() return "Money Made: $" .. FormatMoney(stats.get_int("MPPLY_TOTAL_EVC") - SaveCash) end, function() end, function() end, function() end)
	
	AFKMode:add_action("", function() end)
	
	AFKModeNote = AFKMode:add_submenu("Read Me")
	
	AFKModeNote:add_action("                           Delays:", function() end)
	AFKModeNote:add_action("  Change this if you aren't getting money", function() end)
	AFKModeNote:add_action("", function() end)
	AFKModeNote:add_action("                   Warehouse Type:", function() end)
	AFKModeNote:add_action("           Select your warehouse type", function() end)
	AFKModeNote:add_action("", function() end)
	AFKModeNote:add_action("                     Required Cash:", function() end)
	AFKModeNote:add_action("     Сhoose amount of money you want", function() end)
	AFKModeNote:add_action("               to get with AFK mode", function() end)
	AFKModeNote:add_action("", function() end)
	AFKModeNote:add_action("                        Infinity $$$:", function() end)
	AFKModeNote:add_action("           Activates infinite AFK mode;", function() end)
	AFKModeNote:add_action("  ignores the setting of the option above", function() end)
	AFKModeNote:add_action("", function() end)
	AFKModeNote:add_action("                  Toggle AFK Mode:", function()end)
	AFKModeNote:add_action("     Activate when your character enters", function() end)
	AFKModeNote:add_action("  and completely stops in the warehouse;", function() end)
	AFKModeNote:add_action("          don't move the camera before", function() end)
	AFKModeNote:add_action("               and during activation", function() end)
	AFKModeNote:add_action("", function() end)
	AFKModeNote:add_action("                       Money Made:", function() end)
	AFKModeNote:add_action("     Reselect the option to see the result", function() end)
	AFKModeNote:add_action("", function() end)

	EasterEgg = AFKModeNote:add_submenu("Easter Egg")
	EasterEgg:add_action(" Woah, you found me! Take this prize then:", function() end)
	EasterEgg:add_action("                   Receive The Prize", function() menu.suicide_player() end)

--General Settings--

	GeneralSettings = SpecialCargoVIP:add_submenu("General Settings")
	
	GeneralSettings:add_action("Start Solo Session", function() globals.set_int(1575020, 8) globals.set_int(1574589, 1) sleep(1) globals.set_int(1574589, 0) end)

			NoRP = true
	GeneralSettings:add_toggle("Disable RP Gain", function() return NoRP end, function() NoRP = not NoRP end)

			NoCrateBack = false 
	GeneralSettings:add_toggle("Disable CrateBack", function() return NoCrateBack end, function() NoCrateBack = not NoCrateBack end)

	GetCrates = GeneralSettings:add_submenu("Get Crates")
	
	GetCrates:add_action("1-3 per Press", function() for i = 12, 16 do stats.set_bool_masked(MPX .. "FIXERPSTAT_BOOL1", true, i, MPX) end end)

			a51 = false 
		local function CratesLoop() 
		while a51 == true do for i = 12, 16 do stats.set_bool_masked(MPX .. "FIXERPSTAT_BOOL1", true, i, MPX) end end end
	GetCrates:add_toggle("Crates Loop", function() return a51 end, function() a51 = not a51 CratesLoop(a51) end)

			a52 = 1
	GetCrates:add_int_range("Instant Buy", 1, 1, 111, function() return a52 end, 
		function(NumOfCra) if GCB:is_active() then GCB:set_int(604, 1)
							  GCB:set_int(600, NumOfCra)
							  GCB:set_int(790, 6)
							  GCB:set_int(791, 4)
							  a52 = NumOfCra end end)
	
	GetCrates:add_action("", function() end)

	GetCratesNote = GetCrates:add_submenu("Read Me")
	
	GetCratesNote:add_action("                       Crates Loop:", function() end)
	GetCratesNote:add_action("                	 To turn off the loop,", function() end)
	GetCratesNote:add_action("     close the menu via «Menu Settings»", function() end)
	GetCratesNote:add_action("", function() end)
	GetCratesNote:add_action("                       Instant Buy:", function() end)
	GetCratesNote:add_action("       Start the buy mission first, select", function() end)
	GetCratesNote:add_action("      the number of crates and activate", function() end)
	
	GeneralSettings:add_action("Legal Stats", function() stats.set_int(MPX .. "LIFETIME_BUY_COMPLETE", 999)
														 stats.set_int(MPX .. "LIFETIME_BUY_UNDERTAKEN", 999)
														 stats.set_int(MPX .. "LIFETIME_SELL_COMPLETE", 999)
														 stats.set_int(MPX .. "LIFETIME_SELL_UNDERTAKEN", 999)
														 stats.set_int(MPX .. "LIFETIME_CONTRA_EARNINGS", 19990000)
														 sleep(2)
														 globals.set_int(1575020, 8)
														 globals.set_int(1574589, 1)
														 sleep(1)
														 globals.set_int(1574589, 0) end)
	
	GeneralSettings:add_action("Clean Office", function() stats.set_int(MPX .. "LIFETIME_BUY_COMPLETE", 1)
														  stats.set_int(MPX .. "LIFETIME_BUY_UNDERTAKEN", 1)
														  stats.set_int(MPX .. "LIFETIME_SELL_COMPLETE", 1)
														  stats.set_int(MPX .. "LIFETIME_SELL_UNDERTAKEN", 1)
														  stats.set_int(MPX .. "LIFETIME_CONTRA_EARNINGS", 1)
														  sleep(2)
														  globals.set_int(1575020, 8) 
														  globals.set_int(1574589, 1)
														  sleep(1)
														  globals.set_int(1574589, 0) end)
	
	GeneralSettings:add_action("", function() end)

	GeneralSettingsNote = GeneralSettings:add_submenu("Read Me")

	GeneralSettingsNote:add_action("                   Start Solo Session:", function() end)
	GeneralSettingsNote:add_action("       Use if you aren't alone in session", function() end)
	GeneralSettingsNote:add_action("", function() end)
	GeneralSettingsNote:add_action("                    Disable RP Gain:", function() end)
	GeneralSettingsNote:add_action("           Disables earning experience", function() end)
	GeneralSettingsNote:add_action("", function() end)
	GeneralSettingsNote:add_action("                   Disable CrateBack:", function() end)
	GeneralSettingsNote:add_action(" Disables the return of crates after its sale", function() end)
	GeneralSettingsNote:add_action("", function() end)
	GeneralSettingsNote:add_action("                        Legal Stats:", function() end)
	GeneralSettingsNote:add_action("   Changes your sales and earnings stats;", function() end)
	GeneralSettingsNote:add_action("         to save the legal statistics, you", function() end)
	GeneralSettingsNote:add_action("  need to make one more sale for $10,000", function() end)
	GeneralSettingsNote:add_action("", function() end)
	GeneralSettingsNote:add_action("                       Clean Office:", function() end)
	GeneralSettingsNote:add_action("       Removes money from your office;", function() end)
	GeneralSettingsNote:add_action("   to save the result, make one more sale", function() end)

--Manual Mode--

	ManualMode = SpecialCargoVIP:add_submenu("Manual Mode")
		
			a53 = 1 
			DefDelay2 = 0.5
	ManualMode:add_array_item("Delays", {"Default", "Fast", "Medium", "Slow"}, function() return a53 end,
		function(DelayType) if DelayType == 1 then DefDelay2 = 0.5
		elseif DelayType == 2 then DefDelay2 = 1 
		elseif DelayType == 3 then DefDelay2 = 2
		elseif DelayType == 4 then DefDelay2 = 3 end
		a53 = DelayType end)
	
			a54 = false
		local function CargoCooldownKiller()
		if not localplayer then return end
		if a54 == true then globals.set_int(FMG + 15728, 0) globals.set_int(FMG + 15729, 0)
		else globals.set_int(FMG + 15728, 300000)
			 globals.set_int(FMG + 15729, 1800000) end end
	ManualMode:add_toggle("Cooldown Killer", function() return a54 end, function() a54 = not a54 CargoCooldownKiller(a54) end)

			CargoPrices = {"Min", "Half", "Max", "Max Legal"}
			CargoValues = {10000, 3000000, 6000000, 3330000}
			a55 = 1 
	ManualMode:add_array_item("Set Price", CargoPrices, function() return a55 end,
		function(SetPri) if CargoPrices[SetPri] == "Min" then for i = 0, 4 do 
				if stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) > 0 then stats.set_int(MPX .. "SPCONTOTALFORWHOUSE" .. i, stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) - 1) do globals.set_int(FMG + 15963, 10000) end end end 
			elseif CargoPrices[SetPri] == "Half" then for i = 0, 4 do 
				if stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) > 0 then stats.set_int(MPX .. "SPCONTOTALFORWHOUSE" .. i, stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) - 1) do globals.set_int(FMG + 15963, 3000000) end end end 
			elseif CargoPrices[SetPri] == "Max" then for i = 0, 4 do 
				if stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) > 0 then stats.set_int(MPX .. "SPCONTOTALFORWHOUSE" .. i, stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) - 1) do globals.set_int(FMG + 15963, 6000000) end end end 
			elseif CargoPrices[SetPri] == "Max Legal" then for i = 0, 4 do 
				if stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) > 0 then stats.set_int(MPX .. "SPCONTOTALFORWHOUSE" .. i, stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) - 1) do globals.set_int(FMG + 15963, 3330000) end end end end
			a55 = SetPri end)
			
	--ManualMode:add_array_item("Set Price", CargoPrices, function() return d9 end,
		--function(SetPri) if CargoPrices[SetPri] == "Min" and stats.get_int(MPX .. "LIFETIME_SELL_COMPLETE") == 0 then for i = 0, 4 do 
				--if stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) > 0 then stats.set_int(MPX .. "SPCONTOTALFORWHOUSE" .. i, stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) - 1) do globals.set_int(FMG + 15963, 5000) end end end 
			--elseif CargoPrices[SetPri] == "Min" and stats.get_int(MPX .. "LIFETIME_SELL_COMPLETE") >= 1 then for i = 0, 4 do 
				--if stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) > 0 then stats.set_int(MPX .. "SPCONTOTALFORWHOUSE" .. i, stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) - 1) do globals.set_int(FMG + 15963, 10000) end end end 
			--elseif CargoPrices[SetPri] == "Half" and stats.get_int(MPX .. "LIFETIME_SELL_COMPLETE") == 0 then for i = 0, 4 do 
				--if stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) > 0 then stats.set_int(MPX .. "SPCONTOTALFORWHOUSE" .. i, stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) - 1) do globals.set_int(FMG + 15963, 1500000) end end end 
			--elseif CargoPrices[SetPri] == "Half" and stats.get_int(MPX .. "LIFETIME_SELL_COMPLETE") >= 1 then for i = 0, 4 do 
				--if stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) > 0 then stats.set_int(MPX .. "SPCONTOTALFORWHOUSE" .. i, stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) - 1) do globals.set_int(FMG + 15963, 3000000) end end end 
			--elseif CargoPrices[SetPri] == "Max" and stats.get_int(MPX .. "LIFETIME_SELL_COMPLETE") == 0 then for i = 0, 4 do 
				--if stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) > 0 then stats.set_int(MPX .. "SPCONTOTALFORWHOUSE" .. i, stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) - 1) do globals.set_int(FMG + 15963, 3000000) end end end 
			--elseif CargoPrices[SetPri] == "Max" and stats.get_int(MPX .. "LIFETIME_SELL_COMPLETE") >= 1 then for i = 0, 4 do 
				--if stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) > 0 then stats.set_int(MPX .. "SPCONTOTALFORWHOUSE" .. i, stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) - 1) do globals.set_int(FMG + 15963, 6000000) end end end 
			--elseif CargoPrices[SetPri] == "Max Legal" and stats.get_int(MPX .. "LIFETIME_SELL_COMPLETE") == 0 then for i = 0, 4 do 
				--if stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) > 0 then stats.set_int(MPX .. "SPCONTOTALFORWHOUSE" .. i, stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) - 1) do globals.set_int(FMG + 15963, 1665000) end end end 
			--elseif CargoPrices[SetPri] == "Max Legal" and stats.get_int(MPX .. "LIFETIME_SELL_COMPLETE") >= 1 then for i = 0, 4 do 
				--if stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) > 0 then stats.set_int(MPX .. "SPCONTOTALFORWHOUSE" .. i, stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) - 1) do globals.set_int(FMG + 15963, 3330000) end end end end 
			--a55 = SetPri end)

	ManualMode:add_bare_item("", function() return "Price per Crate: $" .. FormatMoney(CargoValues[a55]) end, function() return "Price per Crate: $" .. FormatMoney(CargoValues[a55]) end, function() end, function() end)

	ManualMode:add_action("Instant Sell", function() if NoRP == false then globals.set_float(FMG + 1, 1) else globals.set_float(FMG + 1, 0) end 
		if NoCrateBack == false then if GCS:is_active() then for i = 12, 16 do stats.set_bool_masked(MPX .. "FIXERPSTAT_BOOL1", true, i, MPX) end
	    GCS:set_int(548, 7)
	    sleep(DefDelay2)
	    GCS:set_int(542, 99999) end 
		else if GCS:is_active() then GCS:set_int(548, 7)
									 sleep(DefDelay2)
									 GCS:set_int(542, 99999) end end end)

	ManualMode:add_action("Bypass Entrance Delay", function() for i = 0, 4 do 
		if stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) > 0 then stats.set_int(MPX .. "SPCONTOTALFORWHOUSE" .. i, stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) - 1)
																   GCS:set_int(542, 99999) end end end)

		local function InsSel()
		if NoRP == false then globals.set_float(FMG + 1, 1)
		else globals.set_float(FMG + 1, 0) end
		if NoCrateBack == false then 
			if GCS:is_active() then for i = 12, 16 do stats.set_bool_masked(MPX .. "FIXERPSTAT_BOOL1", true, i, MPX) end
			GCS:set_int(548, 7)
			sleep(DefDelay2)
			GCS:set_int(542, 99999) end 
		else if GCS:is_active() then GCS:set_int(548, 7)
									 sleep(DefDelay2)
									 GCS:set_int(542, 99999) end end end
		
		local function BypEntDel()
		for i = 0, 4 do if stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) > 0 then stats.set_int(MPX .. "SPCONTOTALFORWHOUSE" .. i, stats.get_int(MPX .. "CONTOTALFORWHOUSE" .. i) - 1)
																				   sleep(DefDelay2)
																				   GCS:set_int(542, 99999) end end end
		
			a56 = false
		local function xnxxSell(Enabled)
		if not localplayer then return end
		if Enabled then instant_sell_hotkey = menu.register_hotkey(88, InsSel)
					    bypass_entrance_delay_hotkey = menu.register_hotkey(78, BypEntDel)
		else menu.remove_hotkey(instant_sell_hotkey)
			 menu.remove_hotkey(bypass_entrance_delay_hotkey) end end
			
	ManualMode:add_toggle("xnxxSell", function() return a56 end, function() a56 = not a56 xnxxSell(a56) end)

	ManualMode:add_action("", function() end)

	ManualModeNote = ManualMode:add_submenu("Read Me")
	
	ManualModeNote:add_action("                           Delays:", function() end)
	ManualModeNote:add_action("  Change this if you aren't getting money", function() end)
	ManualModeNote:add_action("", function() end)
	ManualModeNote:add_action("                        Instant Sell:", function() end)
	ManualModeNote:add_action("        Always choose to sell one crate;", function() end)
	ManualModeNote:add_action("      Start the sale mission first, activate", function() end)
	ManualModeNote:add_action("            after leaving the warehouse", function() end) 
	ManualModeNote:add_action("", function() end)
	ManualModeNote:add_action("               Bypass Entrance Delay:", function() end)
	ManualModeNote:add_action("            Skips the delay on entering", function() end)
	ManualModeNote:add_action("              the warehouse after sale", function() end)
	ManualModeNote:add_action("", function() end)
	ManualModeNote:add_action("                          xnxxSell:", function() end)
	ManualModeNote:add_action("   Pressing «X» will trigger «Instant Sell»;", function() end)
	ManualModeNote:add_action("  pressing «N» - «Bypass Entrance Delay»", function() end)

---Unlock Tool---

	UnlockTool = SilentNight:add_submenu("♦ Unlock Tool")
				   
--Character's Stats--

	CharactersStats = UnlockTool:add_submenu("Character's Stats (Safe)")
	
	Achievements = CharactersStats:add_submenu("Achievements")
			
			a57 = false
			AchievementController = 4542602 + 1
		local function AchievementUnlocker()
		while a57 do for i = 1, 78 do globals.set_int(AchievementController, i) end end end
	Achievements:add_toggle("Unlock All", function() return a57 end, function() a57 = not a57 AchievementUnlocker() end)
											 
	Achievements1b1 = Achievements:add_submenu("Unlock One By One")
	
	Achievements1b1:add_action("Welcome to Los Santos", function() globals.set_int(AchievementController, 1) end)
	Achievements1b1:add_action("A Friendship Resurrected", function() globals.set_int(AchievementController, 2) end)
	Achievements1b1:add_action("A Fair Day's Pay", function() globals.set_int(AchievementController, 3) end)
	Achievements1b1:add_action("The Moment of Truth", function() globals.set_int(AchievementController, 4) end)
	Achievements1b1:add_action("To Live or Die in Los Santos", function() globals.set_int(AchievementController, 5) end)
	Achievements1b1:add_action("Diamond Hard", function() globals.set_int(AchievementController, 6) end)
	Achievements1b1:add_action("Subversive", function() globals.set_int(AchievementController, 7) end)
	Achievements1b1:add_action("Blitzed", function() globals.set_int(AchievementController, 8) end)
	Achievements1b1:add_action("Small Town, Big Job", function() globals.set_int(AchievementController, 9) end)
	Achievements1b1:add_action("The Government Gimps", function() globals.set_int(AchievementController, 10) end)
	Achievements1b1:add_action("The Big One!", function() globals.set_int(AchievementController, 11) end)
	Achievements1b1:add_action("Solid Gold, Baby!", function() globals.set_int(AchievementController, 12) end)
	Achievements1b1:add_action("Career Criminal", function() globals.set_int(AchievementController, 13) end)
	Achievements1b1:add_action("San Andreas Sightseer", function() globals.set_int(AchievementController, 14) end)
	Achievements1b1:add_action("All's Fare in Love and War", function() globals.set_int(AchievementController, 15) end)
	Achievements1b1:add_action("TP Industries Arms Race", function() globals.set_int(AchievementController, 16) end)
	Achievements1b1:add_action("Multi-Disciplined", function() globals.set_int(AchievementController, 17) end)
	Achievements1b1:add_action("From Beyond the Stars", function() globals.set_int(AchievementController, 18) end)
	Achievements1b1:add_action("A Mystery, Solved", function() globals.set_int(AchievementController, 19) end)
	Achievements1b1:add_action("Waste Management", function() globals.set_int(AchievementController, 20) end)
	Achievements1b1:add_action("Red Mist", function() globals.set_int(AchievementController, 21) end)
	Achievements1b1:add_action("Show Off", function() globals.set_int(AchievementController, 22) end)
	Achievements1b1:add_action("Kifflom!", function() globals.set_int(AchievementController, 23) end)
	Achievements1b1:add_action("Three Man Army", function() globals.set_int(AchievementController, 24) end)
	Achievements1b1:add_action("Out of Your Depth", function() globals.set_int(AchievementController, 25) end)
	Achievements1b1:add_action("Altruist Acolyte", function() globals.set_int(AchievementController, 26) end)
	Achievements1b1:add_action("A Lot of Cheddar", function() globals.set_int(AchievementController, 27) end)
	Achievements1b1:add_action("Trading Pure Alpha", function() globals.set_int(AchievementController, 28) end)
	Achievements1b1:add_action("Pimp My Sidearm", function() globals.set_int(AchievementController, 29) end)
	Achievements1b1:add_action("Wanted: Alive Or Alive", function() globals.set_int(AchievementController, 30) end)
	Achievements1b1:add_action("Los Santos Customs", function() globals.set_int(AchievementController, 31) end)
	Achievements1b1:add_action("Close Shave", function() globals.set_int(AchievementController, 32) end)
	Achievements1b1:add_action("Off the Plane", function() globals.set_int(AchievementController, 33) end)
	Achievements1b1:add_action("Three-Bit Gangster", function() globals.set_int(AchievementController, 34) end)
	Achievements1b1:add_action("Making Moves", function() globals.set_int(AchievementController, 35) end)
	Achievements1b1:add_action("Above the Law", function() globals.set_int(AchievementController, 36) end)
	Achievements1b1:add_action("Numero Uno", function() globals.set_int(AchievementController, 37) end)
	Achievements1b1:add_action("The Midnight Club", function() globals.set_int(AchievementController, 38) end)
	Achievements1b1:add_action("Unnatural Selection", function() globals.set_int(AchievementController, 39) end)
	Achievements1b1:add_action("Backseat Driver", function() globals.set_int(AchievementController, 40) end)
	Achievements1b1:add_action("Run Like The Wind", function() globals.set_int(AchievementController, 41) end)
	Achievements1b1:add_action("Clean Sweep", function() globals.set_int(AchievementController, 42) end)
	Achievements1b1:add_action("Decorated", function() globals.set_int(AchievementController, 43) end)
	Achievements1b1:add_action("Stick Up Kid", function() globals.set_int(AchievementController, 44) end)
	Achievements1b1:add_action("Enjoy Your Stay", function() globals.set_int(AchievementController, 45) end)
	Achievements1b1:add_action("Crew Cut", function() globals.set_int(AchievementController, 46) end)
	Achievements1b1:add_action("Full Refund", function() globals.set_int(AchievementController, 47) end)
	Achievements1b1:add_action("Dialling Digits", function() globals.set_int(AchievementController, 48) end)
	Achievements1b1:add_action("American Dream", function() globals.set_int(AchievementController, 49) end)
	Achievements1b1:add_action("A New Perspective", function() globals.set_int(AchievementController, 50) end)
	Achievements1b1:add_action("Be Prepared", function() globals.set_int(AchievementController, 51) end)
	Achievements1b1:add_action("In the Name of Science", function() globals.set_int(AchievementController, 52) end)
	Achievements1b1:add_action("Dead Presidents", function() globals.set_int(AchievementController, 53) end)
	Achievements1b1:add_action("Parole Day", function() globals.set_int(AchievementController, 54) end)
	Achievements1b1:add_action("Shot Caller", function() globals.set_int(AchievementController, 55) end)
	Achievements1b1:add_action("Four Way", function() globals.set_int(AchievementController, 56) end)
	Achievements1b1:add_action("Live a Little", function() globals.set_int(AchievementController, 57) end)
	Achievements1b1:add_action("Can't Touch This", function() globals.set_int(AchievementController, 58) end)
	Achievements1b1:add_action("Mastermind", function() globals.set_int(AchievementController, 59) end)
	Achievements1b1:add_action("Vinewood Visionary", function() globals.set_int(AchievementController, 60) end)
	Achievements1b1:add_action("Majestic", function() globals.set_int(AchievementController, 61) end)
	Achievements1b1:add_action("Humans of Los Santos", function() globals.set_int(AchievementController, 62) end)
	Achievements1b1:add_action("First Time Director", function() globals.set_int(AchievementController, 63) end)
	Achievements1b1:add_action("Animal Lover", function() globals.set_int(AchievementController, 64) end)
	Achievements1b1:add_action("Ensemble Piece", function() globals.set_int(AchievementController, 65) end)
	Achievements1b1:add_action("Cult Movie", function() globals.set_int(AchievementController, 66) end)
	Achievements1b1:add_action("Location Scout", function() globals.set_int(AchievementController, 67) end)
	Achievements1b1:add_action("Method Actor", function() globals.set_int(AchievementController, 68) end)
	Achievements1b1:add_action("Cryptozoologist", function() globals.set_int(AchievementController, 69) end)
	Achievements1b1:add_action("Getting Started", function() globals.set_int(AchievementController, 70) end)
	Achievements1b1:add_action("The Data Breaches", function() globals.set_int(AchievementController, 71) end)
	Achievements1b1:add_action("The Bogdan Problem", function() globals.set_int(AchievementController, 72) end)
	Achievements1b1:add_action("The Doomsday Scenario", function() globals.set_int(AchievementController, 73) end)
	Achievements1b1:add_action("A World Worth Saving", function() globals.set_int(AchievementController, 74) end)
	Achievements1b1:add_action("Orbital Obliteration", function() globals.set_int(AchievementController, 75) end)
	Achievements1b1:add_action("Elitist", function() globals.set_int(AchievementController, 76) end)
	Achievements1b1:add_action("Masterminds", function() globals.set_int(AchievementController, 77) end)
	
	Achievements:add_action("", function() end)
	
	AchievementsNote = Achievements:add_submenu("Read Me")
	
	AchievementsNote:add_action("                         Unlock All:", function() end)
	AchievementsNote:add_action(" Unlocks all achievements auto; ≈10 mins;", function() end)
	AchievementsNote:add_action("               to turn off the option,", function() end)
	AchievementsNote:add_action("     close the menu via «Menu Settings»", function() end)
	
	Awards = CharactersStats:add_submenu("Awards")
	
	Awards:add_action("Unlock All", function()
			stats.set_int(MPX .. "AWD_FM_DM_WINS", 50)
			stats.set_int(MPX .. "AWD_FM_TDM_WINS", 50)
			stats.set_int(MPX .. "AWD_FM_TDM_MVP", 50)
			stats.set_int(MPX .. "AWD_RACES_WON", 50)
			stats.set_int(MPX .. "AWD_FMWINAIRRACE", 25)
			stats.set_int(MPX .. "AWD_FMWINSEARACE", 25)
			stats.set_int(MPX .. "AWD_FM_GTA_RACES_WON", 50)
			stats.set_bool(MPX .. "AWD_FMKILL3ANDWINGTARACE", true)
			stats.set_int(MPX .. "AWD_FMRALLYWONDRIVE", 25)
			stats.set_int(MPX .. "AWD_FMRALLYWONNAV", 25)
			stats.set_bool(MPX .. "AWD_FMWINCUSTOMRACE", true)
			stats.set_int(MPX .. "AWD_FMWINRACETOPOINTS", 25)
			stats.set_bool(MPX .. "CL_RACE_MODDED_CAR", true)
			stats.set_int(MPX .. "AWD_FM_RACE_LAST_FIRST", 25)
			stats.set_bool(MPX .. "AWD_FMRACEWORLDRECHOLDER", true)
			stats.set_int(MPX .. "AWD_FM_RACES_FASTEST_LAP", 50)
			stats.set_bool(MPX .. "AWD_FMWINALLRACEMODES", true)
			stats.set_int(MPX .. "AWD_FMHORDWAVESSURVIVE", 10)
			stats.set_int(MPX .. "NUMBER_SLIPSTREAMS_IN_RACE", 100)
			stats.set_int(MPX .. "NUMBER_TURBO_STARTS_IN_RACE", 50)
			stats.set_int(MPX .. "AWD_NO_ARMWRESTLING_WINS", 25)
			stats.set_int(MPX .. "MOST_ARM_WRESTLING_WINS", 25)
			stats.set_int(MPX .. "AWD_WIN_AT_DARTS", 25)
			stats.set_int(MPX .. "AWD_FM_GOLF_WON", 25)
			stats.set_int(MPX .. "AWD_FM_TENNIS_WON", 25)
			stats.set_bool(MPX .. "AWD_FM_TENNIS_5_SET_WINS", true)
			stats.set_bool(MPX .. "AWD_FM_TENNIS_STASETWIN", true)
			stats.set_int(MPX .. "AWD_FM_SHOOTRANG_CT_WON", 25)
			stats.set_int(MPX .. "AWD_FM_SHOOTRANG_RT_WON", 25)
			stats.set_int(MPX .. "AWD_FM_SHOOTRANG_TG_WON", 25)
			stats.set_bool(MPX .. "AWD_FM_SHOOTRANG_GRAN_WON", true)
			stats.set_bool(MPX .. "AWD_FMWINEVERYGAMEMODE", true)
			stats.set_int(MPX .. "AWD_WIN_CAPTURES", 50)
			stats.set_int(MPX .. "AWD_WIN_CAPTURE_DONT_DYING", 25)
			stats.set_int(MPX .. "AWD_WIN_LAST_TEAM_STANDINGS", 50)
			stats.set_int(MPX .. "AWD_ONLY_PLAYER_ALIVE_LTS", 50)
			stats.set_int(MPX .. "AWD_KILL_TEAM_YOURSELF_LTS", 25)
			stats.set_int(MPX .. "AIR_LAUNCHES_OVER_40M", 25)
			stats.set_int(MPX .. "AWD_CARS_EXPORTED", 50)
			stats.set_int(MPX .. "AWD_LESTERDELIVERVEHICLES", 25)
			stats.set_int(MPX .. "TOTAL_RACES_WON", 500)
			stats.set_int(MPX .. "TOTAL_RACES_LOST", 250)
			stats.set_int(MPX .. "TOTAL_CUSTOM_RACES_WON", 500)
			stats.set_int(MPX .. "TOTAL_DEATHMATCH_LOST", 250)
			stats.set_int(MPX .. "TOTAL_DEATHMATCH_WON", 500)
			stats.set_int(MPX .. "TOTAL_TDEATHMATCH_LOST", 250)
			stats.set_int(MPX .. "TOTAL_TDEATHMATCH_WON", 500)
			stats.set_int(MPX .. "SHOOTINGRANGE_WINS", 500)
			stats.set_int(MPX .. "SHOOTINGRANGE_LOSSES", 250)
			stats.set_int(MPX .. "TENNIS_MATCHES_WON", 500)
			stats.set_int(MPX .. "TENNIS_MATCHES_LOST", 250)
			stats.set_int(MPX .. "GOLF_WINS", 500)
			stats.set_int(MPX .. "GOLF_LOSSES", 250)
			stats.set_int(MPX .. "DARTS_TOTAL_WINS", 500)
			stats.set_int(MPX .. "DARTS_TOTAL_MATCHES", 750)
			stats.set_int(MPX .. "SHOOTINGRANGE_TOTAL_MATCH", 800)
			stats.set_int(MPX .. "BJ_WINS", 500)
			stats.set_int(MPX .. "BJ_LOST", 250)
			stats.set_int(MPX .. "RACE_2_POINT_WINS", 500)
			stats.set_int(MPX .. "RACE_2_POINT_LOST", 250)
			stats.set_int(MPX .. "KILLS_PLAYERS", 3593)
			stats.set_int(MPX .. "DEATHS_PLAYER", 1002)
			stats.set_int(MPX .. "MISSIONS_CREATED", 500)
			stats.set_int(MPX .. "LTS_CREATED", 500)
			stats.set_int(MPX .. "FM_MISSION_LIKES", 1500)
			stats.set_bool(MPX .. "AWD_FM25DIFFERENTDM", true)
			stats.set_int(MPX .. "CR_DIFFERENT_DM", 25)
			stats.set_bool(MPX .. "AWD_FM25DIFFERENTRACES", true)
			stats.set_int(MPX .. "CR_DIFFERENT_RACES", 25)
			stats.set_int(MPX .. "AWD_PARACHUTE_JUMPS_20M", 25)
			stats.set_int(MPX .. "AWD_PARACHUTE_JUMPS_50M", 25)
			stats.set_int(MPX .. "AWD_FMBASEJMP", 25)
			stats.set_bool(MPX .. "AWD_FMATTGANGHQ", true)
			stats.set_bool(MPX .. "AWD_FM6DARTCHKOUT", true)
			stats.set_int(MPX .. "AWD_FM_GOLF_BIRDIES", 25)
			stats.set_bool(MPX .. "AWD_FM_GOLF_HOLE_IN_1", true)
			stats.set_int(MPX .. "AWD_FM_TENNIS_ACE", 25)
			stats.set_int(MPX .. "AWD_FMBBETWIN", 50000)
			stats.set_int(MPX .. "AWD_LAPDANCES", 25)
			stats.set_int(MPX .. "AWD_FMCRATEDROPS", 25)
			stats.set_bool(MPX .. "AWD_FMPICKUPDLCCRATE1ST", true)
			stats.set_bool(MPX .. "AWD_FM25DIFITEMSCLOTHES", true)
			stats.set_int(MPX .. "AWD_NO_HAIRCUTS", 25)
			stats.set_bool(MPX .. "AWD_BUY_EVERY_GUN", true)
			stats.set_bool(MPX .. "AWD_DRIVELESTERCAR5MINS", true)
			stats.set_bool(MPX .. "AWD_FMTATTOOALLBODYPARTS", true)
			stats.set_int(MPX .. "AWD_DROPOFF_CAP_PACKAGES", 100)
			stats.set_int(MPX .. "AWD_PICKUP_CAP_PACKAGES", 100)
			stats.set_int(MPX .. "AWD_MENTALSTATE_TO_NORMAL", 50)
			stats.set_bool(MPX .. "AWD_STORE_20_CAR_IN_GARAGES", true)
			stats.set_int(MPX .. "AWD_TRADE_IN_YOUR_PROPERTY", 25)
			stats.set_bool(MPX .. "AWD_DAILYOBJWEEKBONUS", true)
			stats.set_bool(MPX .. "AWD_DAILYOBJMONTHBONUS", true)
			stats.set_int(MPX .. "AWD_FM_CR_DM_MADE", 25)
			stats.set_int(MPX .. "AWD_FM_CR_RACES_MADE", 25)
			stats.set_int(MPX .. "AWD_FM_CR_PLAYED_BY_PEEP", 1598)
			stats.set_int(MPX .. "AWD_FM_CR_MISSION_SCORE", 100)
			stats.set_bool(MPX .. "CL_DRIVE_RALLY", true)
			stats.set_bool(MPX .. "CL_PLAY_GTA_RACE", true)
			stats.set_bool(MPX .. "CL_PLAY_BOAT_RACE", true)
			stats.set_bool(MPX .. "CL_PLAY_FOOT_RACE", true)
			stats.set_bool(MPX .. "CL_PLAY_TEAM_DM", true)
			stats.set_bool(MPX .. "CL_PLAY_VEHICLE_DM", true)
			stats.set_bool(MPX .. "CL_PLAY_MISSION_CONTACT", true)
			stats.set_bool(MPX .. "CL_PLAY_A_PLAYLIST", true)
			stats.set_bool(MPX .. "CL_PLAY_POINT_TO_POINT", true)
			stats.set_bool(MPX .. "CL_PLAY_ONE_ON_ONE_DM", true)
			stats.set_bool(MPX .. "CL_PLAY_ONE_ON_ONE_RACE", true)
			stats.set_bool(MPX .. "CL_SURV_A_BOUNTY", true)
			stats.set_bool(MPX .. "CL_SET_WANTED_LVL_ON_PLAY", true)
			stats.set_bool(MPX .. "CL_GANG_BACKUP_GANGS", true)
			stats.set_bool(MPX .. "CL_GANG_BACKUP_LOST", true)
			stats.set_bool(MPX .. "CL_GANG_BACKUP_VAGOS", true)
			stats.set_bool(MPX .. "CL_CALL_MERCENARIES", true)
			stats.set_bool(MPX .. "CL_PHONE_MECH_DROP_CAR", true)
			stats.set_bool(MPX .. "CL_GONE_OFF_RADAR", true)
			stats.set_bool(MPX .. "CL_FILL_TITAN", true)
			stats.set_bool(MPX .. "CL_MOD_CAR_USING_APP", true)
			stats.set_bool(MPX .. "CL_MOD_CAR_USING_APP", true)
			stats.set_bool(MPX .. "CL_BUY_INSURANCE", true)
			stats.set_bool(MPX .. "CL_BUY_GARAGE", true)
			stats.set_bool(MPX .. "CL_ENTER_FRIENDS_HOUSE", true)
			stats.set_bool(MPX .. "CL_CALL_STRIPPER_HOUSE", true)
			stats.set_bool(MPX .. "CL_CALL_FRIEND", true)
			stats.set_bool(MPX .. "CL_SEND_FRIEND_REQUEST", true)
			stats.set_bool(MPX .. "CL_W_WANTED_PLAYER_TV", true)
			stats.set_bool(MPX .. "FM_INTRO_CUT_DONE", true)
			stats.set_bool(MPX .. "FM_INTRO_MISS_DONE", true)
			stats.set_bool(MPX .. "SHOOTINGRANGE_SEEN_TUT", true)
			stats.set_bool(MPX .. "TENNIS_SEEN_TUTORIAL", true)
			stats.set_bool(MPX .. "DARTS_SEEN_TUTORIAL", true)
			stats.set_bool(MPX .. "ARMWRESTLING_SEEN_TUTORIAL", true)
			stats.set_bool(MPX .. "HAS_WATCHED_BENNY_CUTSCE", true)
			stats.set_int(MPX .. "NO_PHOTOS_TAKEN", 100)
			stats.set_int(MPX .. "BOUNTSONU", 200)
			stats.set_int(MPX .. "BOUNTPLACED", 500)
			stats.set_int(MPX .. "BETAMOUNT", 500)
			stats.set_int(MPX .. "CRARMWREST", 500)
			stats.set_int(MPX .. "CRBASEJUMP", 500)
			stats.set_int(MPX .. "CRDARTS", 500)
			stats.set_int(MPX .. "CRDM", 500)
			stats.set_int(MPX .. "CRGANGHIDE", 500)
			stats.set_int(MPX .. "CRGOLF", 500)
			stats.set_int(MPX .. "CRHORDE", 500)
			stats.set_int(MPX .. "CRMISSION", 500)
			stats.set_int(MPX .. "CRSHOOTRNG", 500)
			stats.set_int(MPX .. "CRTENNIS", 500)
			stats.set_int(MPX .. "NO_TIMES_CINEMA", 500)
			stats.set_int(MPX .. "CHAR_WEAP_UNLOCKED", -1)
			stats.set_int(MPX .. "CHAR_WEAP_UNLOCKED2", -1)
			stats.set_int(MPX .. "CHAR_WEAP_UNLOCKED3", -1)
			stats.set_int(MPX .. "CHAR_WEAP_UNLOCKED4", -1)
			stats.set_int(MPX .. "CHAR_WEAP_ADDON_1_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_WEAP_ADDON_2_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_WEAP_ADDON_3_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_WEAP_ADDON_4_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_WEAP_FREE", -1)
			stats.set_int(MPX .. "CHAR_WEAP_FREE2", -1)
			stats.set_int(MPX .. "CHAR_FM_WEAP_FREE", -1)
			stats.set_int(MPX .. "CHAR_FM_WEAP_FREE2", -1)
			stats.set_int(MPX .. "CHAR_FM_WEAP_FREE3", -1)
			stats.set_int(MPX .. "CHAR_FM_WEAP_FREE4", -1)
			stats.set_int(MPX .. "CHAR_WEAP_PURCHASED", -1)
			stats.set_int(MPX .. "CHAR_WEAP_PURCHASED2", -1)
			stats.set_int(MPX .. "WEAPON_PICKUP_BITSET", -1)
			stats.set_int(MPX .. "WEAPON_PICKUP_BITSET2", -1)
			stats.set_int(MPX .. "CHAR_FM_WEAP_UNLOCKED", -1)
			stats.set_int(MPX .. "NO_WEAPONS_UNLOCK", -1)
			stats.set_int(MPX .. "NO_WEAPON_MODS_UNLOCK", -1)
			stats.set_int(MPX .. "NO_WEAPON_CLR_MOD_UNLOCK", -1) 
			stats.set_int(MPX .. "CHAR_FM_WEAP_UNLOCKED2", -1)
			stats.set_int(MPX .. "CHAR_FM_WEAP_UNLOCKED3", -1)
			stats.set_int(MPX .. "CHAR_FM_WEAP_UNLOCKED4", -1)
			stats.set_int(MPX .. "CHAR_KIT_1_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_2_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_3_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_4_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_5_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_6_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_7_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_8_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_9_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_10_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_11_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_12_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_FM_PURCHASE", -1)
			stats.set_int(MPX .. "CHAR_WEAP_FM_PURCHASE", -1)
			stats.set_int(MPX .. "CHAR_WEAP_FM_PURCHASE2", -1)
			stats.set_int(MPX .. "CHAR_WEAP_FM_PURCHASE3", -1)
			stats.set_int(MPX .. "CHAR_WEAP_FM_PURCHASE4", -1)
			stats.set_int(MPX .. "FIREWORK_TYPE_1_WHITE", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_1_RED", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_1_BLUE", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_2_WHITE", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_2_RED", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_2_BLUE", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_3_WHITE", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_3_RED", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_3_BLUE", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_4_WHITE", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_4_RED", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_4_BLUE", 1000)
			stats.set_int(MPX .. "WEAP_FM_ADDON_PURCH", -1)
		for i = 2, 19 do stats.set_int(MPX .. "WEAP_FM_ADDON_PURCH"..i, -1) end
		for j = 1, 19 do stats.set_int(MPX .. "CHAR_FM_WEAP_ADDON_"..j.."_UNLCK", -1) end
		for m = 1, 41 do stats.set_int(MPX .. "CHAR_KIT_"..m.."_FM_UNLCK", -1) end
		for l = 2, 41 do stats.set_int(MPX .. "CHAR_KIT_FM_PURCHASE"..l, -1) end
			stats.set_int(MPX .. "AWD_FMTIME5STARWANTED", 120)
			stats.set_int(MPX .. "AWD_5STAR_WANTED_AVOIDANCE", 50)
			stats.set_int(MPX .. "AWD_FMSHOOTDOWNCOPHELI", 25)
			stats.set_int(MPX .. "AWD_VEHICLES_JACKEDR", 500)
			stats.set_int(MPX .. "AWD_SECURITY_CARS_ROBBED", 25)
			stats.set_int(MPX .. "AWD_HOLD_UP_SHOPS", 20)
			stats.set_int(MPX .. "AWD_ODISTRACTCOPSNOEATH", 25)
			stats.set_int(MPX .. "AWD_ENEMYDRIVEBYKILLS", 100)
			stats.set_int(MPX .. "CHAR_WANTED_LEVEL_TIME5STAR", 18000000)
			stats.set_int(MPX .. "CARS_COPS_EXPLODED", 300)
			stats.set_int(MPX .. "BIKES_EXPLODED", 100)
			stats.set_int(MPX .. "BOATS_EXPLODED", 168)
			stats.set_int(MPX .. "HELIS_EXPLODED", 98)
			stats.set_int(MPX .. "PLANES_EXPLODED", 138)
			stats.set_int(MPX .. "QUADBIKE_EXPLODED", 50)
			stats.set_int(MPX .. "BICYCLE_EXPLODED", 48)
			stats.set_int(MPX .. "SUBMARINE_EXPLODED", 28)
			stats.set_int(MPX .. "TIRES_POPPED_BY_GUNSHOT", 500)
			stats.set_int(MPX .. "NUMBER_CRASHES_CARS", 300)
			stats.set_int(MPX .. "NUMBER_CRASHES_BIKES", 300)
			stats.set_int(MPX .. "BAILED_FROM_VEHICLE", 300)
			stats.set_int(MPX .. "NUMBER_CRASHES_QUADBIKES", 300)
			stats.set_int(MPX .. "NUMBER_STOLEN_COP_VEHICLE", 300)
			stats.set_int(MPX .. "NUMBER_STOLEN_CARS", 300)
			stats.set_int(MPX .. "NUMBER_STOLEN_BIKES", 300)
			stats.set_int(MPX .. "NUMBER_STOLEN_BOATS", 300)
			stats.set_int(MPX .. "NUMBER_STOLEN_HELIS", 300)
			stats.set_int(MPX .. "NUMBER_STOLEN_PLANES", 300)
			stats.set_int(MPX .. "NUMBER_STOLEN_QUADBIKES", 300)
			stats.set_int(MPX .. "NUMBER_STOLEN_BICYCLES", 300)
			stats.set_int(MPX .. "MC_CONTRIBUTION_POINTS", 1000)
			stats.set_int(MPX .. "MEMBERSMARKEDFORDEATH", 700)
			stats.set_int(MPX .. "MCKILLS", 500)
			stats.set_int(MPX .. "MCDEATHS", 700)
			stats.set_int(MPX .. "RIVALPRESIDENTKILLS", 700)
			stats.set_int(MPX .. "RIVALCEOANDVIPKILLS", 700)
			stats.set_int(MPX .. "CLUBHOUSECONTRACTSCOMPLETE", 700)
			stats.set_int(MPX .. "CLUBHOUSECONTRACTEARNINGS", 32698547)
			stats.set_int(MPX .. "CLUBCHALLENGESCOMPLETED", 700)
			stats.set_int(MPX .. "MEMBERCHALLENGESCOMPLETED", 700)
			stats.set_int(MPX .. "GHKILLS", 500)
			stats.set_int(MPX .. "HORDELVL", 10)
			stats.set_int(MPX .. "HORDKILLS", 500)
			stats.set_int(MPX .. "UNIQUECRATES", 500)
			stats.set_int(MPX .. "BJWINS", 500)
			stats.set_int(MPX .. "HORDEWINS", 500)
			stats.set_int(MPX .. "MCMWINS", 500)
			stats.set_int(MPX .. "GANGHIDWINS", 500)
			stats.set_int(MPX .. "KILLS", 800)
			stats.set_int(MPX .. "HITS_PEDS_VEHICLES", 100)
			stats.set_int(MPX .. "SHOTS", 1000)
			stats.set_int(MPX .. "HEADSHOTS", 100)
			stats.set_int(MPX .. "KILLS_ARMED", 650)
			stats.set_int(MPX .. "SUCCESSFUL_COUNTERS", 100)
			stats.set_int(MPX .. "KILLS_PLAYERS", 3593)
			stats.set_int(MPX .. "DEATHS_PLAYER", 1002)
			stats.set_int(MPX .. "KILLS_STEALTH", 100)
			stats.set_int(MPX .. "KILLS_INNOCENTS", 500)
			stats.set_int(MPX .. "KILLS_ENEMY_GANG_MEMBERS", 500)
			stats.set_int(MPX .. "KILLS_FRIENDLY_GANG_MEMBERS", 500)
			stats.set_int(MPX .. "KILLS_BY_OTHERS", 100)
			stats.set_int(MPX .. "BIGGEST_VICTIM_KILLS", 500)
			stats.set_int(MPX .. "ARCHENEMY_KILLS", 500)
			stats.set_int(MPX .. "KILLS_COP", 4500)
			stats.set_int(MPX .. "KILLS_SWAT", 500)
			stats.set_int(MPX .. "STARS_ATTAINED", 5000)
			stats.set_int(MPX .. "STARS_EVADED", 4000)
			stats.set_int(MPX .. "VEHEXPORTED", 500)
			stats.set_int(MPX .. "TOTAL_NO_SHOPS_HELD_UP", 100)
			stats.set_int(MPX .. "CR_GANGATTACK_CITY", 1000)
			stats.set_int(MPX .. "CR_GANGATTACK_COUNTRY", 1000)
			stats.set_int(MPX .. "CR_GANGATTACK_LOST", 1000)
			stats.set_int(MPX .. "CR_GANGATTACK_VAGOS", 1000)
			stats.set_int(MPX .. "NO_NON_CONTRACT_RACE_WIN", 500)
			stats.set_int(MPX .. "DIED_IN_DROWNING", 833)
			stats.set_int(MPX .. "DIED_IN_DROWNINGINVEHICLE", 833)
			stats.set_int(MPX .. "DIED_IN_EXPLOSION", 833)
			stats.set_int(MPX .. "DIED_IN_FALL", 833)
			stats.set_int(MPX .. "DIED_IN_FIRE", 833)
			stats.set_int(MPX .. "DIED_IN_ROAD", 833)
			stats.set_int(MPX .. "GRENADE_ENEMY_KILLS", 50)
			stats.set_int(MPX .. "MICROSMG_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "SMG_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "ASLTSMG_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "CRBNRIFLE_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "ADVRIFLE_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "MG_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "CMBTMG_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "ASLTMG_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "RPG_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "PISTOL_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "PLAYER_HEADSHOTS", 500)
			stats.set_int(MPX .. "SAWNOFF_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "STKYBMB_ENEMY_KILLS", 50)
			stats.set_int(MPX .. "UNARMED_ENEMY_KILLS", 50)
			stats.set_int(MPX .. "SNIPERRFL_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "HVYSNIPER_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "AWD_50_VEHICLES_BLOWNUP", 500)
			stats.set_int(MPX .. "CARS_EXPLODED", 500)
			stats.set_int(MPX .. "AWD_CAR_EXPORT", 100)
			stats.set_int(MPX .. "AWD_FMDRIVEWITHOUTCRASH", 30)
			stats.set_int(MPX .. "AWD_PASSENGERTIME", 4)
			stats.set_int(MPX .. "AWD_TIME_IN_HELICOPTER", 4)
			stats.set_int(MPX .. "AWD_VEHICLE_JUMP_OVER_40M", 25)
			stats.set_int(MPX .. "MOST_FLIPS_IN_ONE_JUMP", 5)
			stats.set_int(MPX .. "MOST_SPINS_IN_ONE_JUMP", 5)
			stats.set_int(MPX .. "CHAR_FM_VEHICLE_1_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_FM_VEHICLE_2_UNLCK", -1)
			stats.set_int(MPX .. "NO_CARS_REPAIR", 1000)
			stats.set_int(MPX .. "VEHICLES_SPRAYED", 500)
			stats.set_int(MPX .. "NUMBER_NEAR_MISS_NOCRASH", 500)
			stats.set_int(MPX .. "USJS_FOUND", 50)
			stats.set_int(MPX .. "USJS_COMPLETED", 50)
			stats.set_int(MPX .. "USJS_TOTAL_COMPLETED", 50)
			stats.set_int(MPX .. "CRDEADLINE", 5)
			stats.set_int(MPX .. "FAVOUTFITBIKETIMECURRENT", 2069146067)
			stats.set_int(MPX .. "FAVOUTFITBIKETIME1ALLTIME", 2069146067)
			stats.set_int(MPX .. "FAVOUTFITBIKETYPECURRENT", 2069146067)
			stats.set_int(MPX .. "FAVOUTFITBIKETYPEALLTIME", 2069146067)
			stats.set_int(MPX .. "LONGEST_WHEELIE_DIST", 1000)
			stats.set_int(MPX .. "RACES_WON", 50)
			stats.set_int(MPX .. "COUNT_HOTRING_RACE", 20)
			stats.set_bool(MPX .. "AWD_FMFURTHESTWHEELIE", true)
			stats.set_bool(MPX .. "AWD_FMFULLYMODDEDCAR", true)
			stats.set_int(MPX .. "AWD_100_HEADSHOTS", 500)
			stats.set_int(MPX .. "AWD_FMOVERALLKILLS", 1000)
			stats.set_int(MPX .. "AWD_FMKILLBOUNTY", 25)
			stats.set_int(MPX .. "AWD_FM_DM_3KILLSAMEGUY", 50)
			stats.set_int(MPX .. "AWD_FM_DM_KILLSTREAK", 100)
			stats.set_int(MPX .. "AWD_FM_DM_STOLENKILL", 50)
			stats.set_int(MPX .. "AWD_FM_DM_TOTALKILLS", 500)
			stats.set_bool(MPX .. "AWD_FMKILLSTREAKSDM", true)
			stats.set_bool(MPX .. "AWD_FMMOSTKILLSGANGHIDE", true)
			stats.set_bool(MPX .. "AWD_FMMOSTKILLSSURVIVE", true)
			stats.set_int(MPX .. "AWD_FMREVENGEKILLSDM", 50)
			stats.set_int(MPX .. "AWD_KILL_CARRIER_CAPTURE", 100)
			stats.set_int(MPX .. "AWD_NIGHTVISION_KILLS", 100)
			stats.set_int(MPX .. "AWD_KILL_PSYCHOPATHS", 100)
			stats.set_int(MPX .. "AWD_TAKEDOWNSMUGPLANE", 50)
			stats.set_int(MPX .. "AWD_100_KILLS_PISTOL", 500)
			stats.set_int(MPX .. "AWD_100_KILLS_SMG", 500)
			stats.set_int(MPX .. "AWD_100_KILLS_SHOTGUN", 500)
			stats.set_int(MPX .. "ASLTRIFLE_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "AWD_100_KILLS_SNIPER", 500)
			stats.set_int(MPX .. "MG_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "AWD_25_KILLS_STICKYBOMBS", 50)
			stats.set_int(MPX .. "AWD_50_KILLS_GRENADES", 50)
			stats.set_int(MPX .. "AWD_50_KILLS_ROCKETLAUNCH", 50)
			stats.set_int(MPX .. "AWD_20_KILLS_MELEE", 50)
			stats.set_int(MPX .. "AWD_CAR_BOMBS_ENEMY_KILLS", 25)
			stats.set_int(MPX .. "MELEEKILLS", 700)
			stats.set_int(MPX .. "HITS", 10000)
			stats.set_int(MPX .. "DEATHS", 499)
			stats.set_int(MPX .. "HIGHEST_SKITTLES", 900)
			stats.set_int(MPX .. "NUMBER_NEAR_MISS", 1000)
			stats.set_int(MPX .. "AWD_FINISH_HEISTS", 50)
			stats.set_int(MPX .. "AWD_FINISH_HEIST_SETUP_JOB", 50)
			stats.set_int(MPX .. "AWD_COMPLETE_HEIST_NOT_DIE", -1)
			stats.set_bool(MPX .. "AWD_FINISH_HEIST_NO_DAMAGE", true)
			stats.set_int(MPX .. "AWD_WIN_GOLD_MEDAL_HEISTS", 25)
			stats.set_int(MPX .. "AWD_DO_HEIST_AS_MEMBER", 25)
			stats.set_int(MPX .. "AWD_DO_HEIST_AS_THE_LEADER", 25)
			stats.set_bool(MPX .. "AWD_SPLIT_HEIST_TAKE_EVENLY", true)
			stats.set_bool(MPX .. "AWD_ACTIVATE_2_PERSON_KEY", true)
			stats.set_int(MPX .. "AWD_CONTROL_CROWDS", 25)
			stats.set_bool(MPX .. "AWD_ALL_ROLES_HEIST", true)
			stats.set_int(MPX .. "HEIST_COMPLETION", 25)
			stats.set_int(MPX .. "HEISTS_ORGANISED", -1)
			stats.set_int(MPX .. "HEIST_START", -1)
			stats.set_int(MPX .. "HEIST_END", -1)
			stats.set_int(MPX .. "CUTSCENE_MID_PRISON", -1)
			stats.set_int(MPX .. "CUTSCENE_MID_HUMANE", -1)
			stats.set_int(MPX .. "CUTSCENE_MID_NARC", -1)
			stats.set_int(MPX .. "CUTSCENE_MID_ORNATE", -1)
			stats.set_int(MPX .. "CR_FLEECA_PREP_1", -1)
			stats.set_int(MPX .. "CR_FLEECA_PREP_2", -1)
			stats.set_int(MPX .. "CR_FLEECA_FINALE", -1)
			stats.set_int(MPX .. "CR_PRISON_PLANE", -1)
			stats.set_int(MPX .. "CR_PRISON_BUS", -1)
			stats.set_int(MPX .. "CR_PRISON_STATION", -1)
			stats.set_int(MPX .. "CR_PRISON_UNFINISHED_BIZ", -1)
			stats.set_int(MPX .. "CR_PRISON_FINALE", -1)
			stats.set_int(MPX .. "CR_HUMANE_KEY_CODES", -1)
			stats.set_int(MPX .. "CR_HUMANE_ARMORDILLOS", -1)
			stats.set_int(MPX .. "CR_HUMANE_EMP", -1)
			stats.set_int(MPX .. "CR_HUMANE_VALKYRIE", -1)
			stats.set_int(MPX .. "CR_HUMANE_FINALE", -1)
			stats.set_int(MPX .. "CR_NARC_COKE", -1)
			stats.set_int(MPX .. "CR_NARC_TRASH_TRUCK", -1)
			stats.set_int(MPX .. "CR_NARC_BIKERS", -1)
			stats.set_int(MPX .. "CR_NARC_WEED", -1)
			stats.set_int(MPX .. "CR_NARC_STEAL_METH", -1)
			stats.set_int(MPX .. "CR_NARC_FINALE", -1)
			stats.set_int(MPX .. "CR_PACIFIC_TRUCKS", -1)
			stats.set_int(MPX .. "CR_PACIFIC_WITSEC", -1)
			stats.set_int(MPX .. "CR_PACIFIC_HACK", -1)
			stats.set_int(MPX .. "CR_PACIFIC_BIKES", -1)
			stats.set_int(MPX .. "CR_PACIFIC_CONVOY", -1)
			stats.set_int(MPX .. "CR_PACIFIC_FINALE", -1)
			stats.set_int(MPX .. "HEIST_ACH_TRACKER", -1)
			stats.set_int(MPX .. "WIN_GOLD_MEDAL_HEISTS", 25)
			stats.set_bool(MPX .. "AWD_FLEECA_FIN", true)
			stats.set_bool(MPX .. "AWD_PRISON_FIN", true)
			stats.set_bool(MPX .. "AWD_HUMANE_FIN", true)
			stats.set_bool(MPX .. "AWD_SERIESA_FIN", true)
			stats.set_bool(MPX .. "AWD_PACIFIC_FIN", true)
			stats.set_bool(MPX .. "AWD_HST_ORDER", true)
			stats.set_bool(MPX .. "AWD_COMPLET_HEIST_MEM", true)
			stats.set_bool(MPX .. "AWD_COMPLET_HEIST_1STPER", true)
			stats.set_bool(MPX .. "AWD_HST_SAME_TEAM", true)
			stats.set_bool(MPX .. "AWD_HST_ULT_CHAL", true)
			stats.set_bool(MPX .. "AWD_MATCHING_OUTFIT_HEIST", true)
			stats.set_bool(MPX .. "HEIST_PLANNING_DONE_PRINT", true)
			stats.set_bool(MPX .. "HEIST_PLANNING_DONE_HELP_0", true)
			stats.set_bool(MPX .. "HEIST_PLANNING_DONE_HELP_1", true)
			stats.set_bool(MPX .. "HEIST_PRE_PLAN_DONE_HELP_0", true)
			stats.set_bool(MPX .. "HEIST_CUTS_DONE_FINALE", true)
			stats.set_bool(MPX .. "HEIST_IS_TUTORIAL", true)
			stats.set_bool(MPX .. "HEIST_STRAND_INTRO_DONE", true)
			stats.set_bool(MPX .. "HEIST_CUTS_DONE_ORNATE", true)
			stats.set_bool(MPX .. "HEIST_CUTS_DONE_PRISON", true)
			stats.set_bool(MPX .. "HEIST_CUTS_DONE_BIOLAB", true)
			stats.set_bool(MPX .. "HEIST_CUTS_DONE_NARCOTIC", true)
			stats.set_bool(MPX .. "HEIST_CUTS_DONE_TUTORIAL", true)
			stats.set_bool(MPX .. "HEIST_AWARD_DONE_PREP", true)
			stats.set_bool(MPX .. "HEIST_AWARD_BOUGHT_IN", true)
			stats.set_int(MPX .. "HEIST_PLANNING_STAGE", -1)
			stats.set_int(MPX .. "GANGOPS_HEIST_STATUS", -1)
			stats.set_int(MPX .. "GANGOPS_HEIST_STATUS", -229384)
			stats.set_int(MPX .. "GANGOPS_FM_MISSION_PROG", -1)
			stats.set_int(MPX .. "GANGOPS_FLOW_MISSION_PROG", -1)
			stats.set_int(MPX .. "GANGOPS_ALLINORDER", 100)
			stats.set_int(MPX .. "GANGOPS_LOYALTY", 100)
			stats.set_int(MPX .. "GANGOPS_CRIMMASMD", 100)
			stats.set_int(MPX .. "GANGOPS_LOYALTY2", 100)
			stats.set_int(MPX .. "GANGOPS_LOYALTY3", 100)
			stats.set_int(MPX .. "GANGOPS_CRIMMASMD2", 100)
			stats.set_int(MPX .. "GANGOPS_CRIMMASMD3", 100)
			stats.set_int(MPX .. "GANGOPS_SUPPORT", 100)
			stats.set_int(MPX .. "CR_GANGOP_MORGUE", 10)
			stats.set_int(MPX .. "CR_GANGOP_DELUXO", 10)
			stats.set_int(MPX .. "CR_GANGOP_SERVERFARM", 10)
			stats.set_int(MPX .. "CR_GANGOP_IAABASE_FIN", 10)
			stats.set_int(MPX .. "CR_GANGOP_STEALOSPREY", 10)
			stats.set_int(MPX .. "CR_GANGOP_FOUNDRY", 10)
			stats.set_int(MPX .. "CR_GANGOP_RIOTVAN", 10)
			stats.set_int(MPX .. "CR_GANGOP_SUBMARINECAR", 10)
			stats.set_int(MPX .. "CR_GANGOP_SUBMARINE_FIN", 10)
			stats.set_int(MPX .. "CR_GANGOP_PREDATOR", 10)
			stats.set_int(MPX .. "CR_GANGOP_BMLAUNCHER", 10)
			stats.set_int(MPX .. "CR_GANGOP_BCCUSTOM", 10)
			stats.set_int(MPX .. "CR_GANGOP_STEALTHTANKS", 10)
			stats.set_int(MPX .. "CR_GANGOP_SPYPLANE", 10)
			stats.set_int(MPX .. "CR_GANGOP_FINALE", 10)
			stats.set_int(MPX .. "CR_GANGOP_FINALE_P2", 10)
			stats.set_int(MPX .. "CR_GANGOP_FINALE_P3", 10)
			stats.set_bool(MPX .. "AWD_GANGOPS_IAA", true)
			stats.set_bool(MPX .. "AWD_GANGOPS_SUBMARINE", true)
			stats.set_bool(MPX .. "AWD_GANGOPS_MISSILE", true)
			stats.set_bool(MPX .. "AWD_GANGOPS_ALLINORDER", true)
			stats.set_bool(MPX .. "AWD_GANGOPS_LOYALTY", true)
			stats.set_bool(MPX .. "AWD_GANGOPS_LOYALTY2", true)
			stats.set_bool(MPX .. "AWD_GANGOPS_LOYALTY3", true)
			stats.set_bool(MPX .. "AWD_GANGOPS_CRIMMASMD", true)
			stats.set_bool(MPX .. "AWD_GANGOPS_CRIMMASMD2", true)
			stats.set_bool(MPX .. "AWD_GANGOPS_CRIMMASMD3", true)
			stats.set_bool(MPX .. "AWD_GANGOPS_SUPPORT", true)
		for j = 0, 63 do stats.set_bool_masked(MPX.."GANGOPSPSTAT_BOOL0", true, j, MPX) end
			stats.set_masked_int(MPX.."DLCSMUGCHARPSTAT_INT260", 3, 16, 8)
			stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT260", 3, 24, 8)
			stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT260", 3, 32, 8)
			stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT260", 3, 40, 8)
			stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT260", 3, 48, 8)
			stats.set_int(MPX .. "AWD_DANCE_TO_SOLOMUN", 120)
			stats.set_int(MPX .. "AWD_DANCE_TO_TALEOFUS", 120)
			stats.set_int(MPX .. "AWD_DANCE_TO_DIXON", 120)
			stats.set_int(MPX .. "AWD_DANCE_TO_BLKMAD", 120)
			stats.set_int(MPX .. "AWD_CLUB_DRUNK", 200)
			stats.set_int(MPX .. "NIGHTCLUB_VIP_APPEAR", 700)
			stats.set_int(MPX .. "NIGHTCLUB_JOBS_DONE", 700)
			stats.set_int(MPX .. "NIGHTCLUB_EARNINGS", 5721002)
			stats.set_int(MPX .. "HUB_SALES_COMPLETED", 1001)
			stats.set_int(MPX .. "HUB_EARNINGS", 20721002)
			stats.set_int(MPX .. "DANCE_COMBO_DURATION_MINS", 3600000)
			stats.set_int(MPX .. "NIGHTCLUB_PLAYER_APPEAR", 100)
			stats.set_int(MPX .. "LIFETIME_HUB_GOODS_SOLD", 784672)
			stats.set_int(MPX .. "LIFETIME_HUB_GOODS_MADE", 507822)
			stats.set_int(MPX .. "DANCEPERFECTOWNCLUB", 120)
			stats.set_int(MPX .. "NUMUNIQUEPLYSINCLUB", 120)
			stats.set_int(MPX .. "DANCETODIFFDJS", 4)
			stats.set_int(MPX .. "NIGHTCLUB_HOTSPOT_TIME_MS", 3600000)
			stats.set_int(MPX .. "NIGHTCLUB_CONT_TOTAL", 20)
			stats.set_int(MPX .. "NIGHTCLUB_CONT_MISSION", -1)
			stats.set_int(MPX .. "CLUB_CONTRABAND_MISSION", 1000)
			stats.set_int(MPX .. "HUB_CONTRABAND_MISSION", 1000)
			stats.set_bool(MPX .. "AWD_CLUB_HOTSPOT", true)
			stats.set_bool(MPX .. "AWD_CLUB_CLUBBER", true)
			stats.set_bool(MPX .. "AWD_CLUB_COORD", true)
		for j = 0, 63 do stats.set_bool_masked(MPX.."BUSINESSBATPSTAT_BOOL0", true, j, MPX) stats.set_bool_masked(MPX.."BUSINESSBATPSTAT_BOOL1", true, j, MPX) end
		if (stats.get_masked_int(MPX.."BUSINESSBATPSTAT_INT380", 0, 8) <20) then stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT380", 20, 0, 8) end
			stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT379", 50, 8, 8)
			stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT379", 100, 16, 8) 
			stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT379", 20, 24, 8) 
			stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT379", 80, 32, 8) 
			stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT379", 60, 40, 8) 
			stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT379", 40, 48, 8) 
			stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT379", 10, 56, 8)
			stats.set_int(MPX .. "ARN_BS_TRINKET_TICKERS", -1)
			stats.set_int(MPX .. "ARN_BS_TRINKET_SAVED", -1)
			stats.set_int(MPX .. "AWD_WATCH_YOUR_STEP", 50)
			stats.set_int(MPX .. "AWD_TOWER_OFFENSE", 50)
			stats.set_int(MPX .. "AWD_READY_FOR_WAR", 50)
			stats.set_int(MPX .. "AWD_THROUGH_A_LENS", 50)
			stats.set_int(MPX .. "AWD_SPINNER", 50)
			stats.set_int(MPX .. "AWD_YOUMEANBOOBYTRAPS", 50)
			stats.set_int(MPX .. "AWD_MASTER_BANDITO", 50)
			stats.set_int(MPX .. "AWD_SITTING_DUCK", 50)
			stats.set_int(MPX .. "AWD_CROWDPARTICIPATION", 50)
			stats.set_int(MPX .. "AWD_KILL_OR_BE_KILLED", 50)
			stats.set_int(MPX .. "AWD_MASSIVE_SHUNT", 50)
			stats.set_int(MPX .. "AWD_YOURE_OUTTA_HERE", 200)
			stats.set_int(MPX .. "AWD_WEVE_GOT_ONE", 50)
			stats.set_int(MPX .. "AWD_ARENA_WAGEWORKER", 1000000)
			stats.set_int(MPX .. "AWD_TIME_SERVED", 1000)
			stats.set_int(MPX .. "AWD_TOP_SCORE", 55000)
			stats.set_int(MPX .. "AWD_CAREER_WINNER", 1000)
			stats.set_int(MPX .. "ARENAWARS_SP", 0)
			stats.set_int(MPX .. "ARENAWARS_SKILL_LEVEL", 20)
			stats.set_int(MPX .. "ARENAWARS_SP_LIFETIME", 100)
			stats.set_int(MPX .. "ARENAWARS_AP", 0)
			stats.set_int(MPX .. "ARENAWARS_AP_TIER", 1000)
			stats.set_int(MPX .. "ARENAWARS_AP_LIFETIME", 5055000)
			stats.set_int(MPX .. "ARENAWARS_CARRER_UNLK", -1)
			stats.set_int(MPX .. "ARN_W_THEME_SCIFI", 1000)
			stats.set_int(MPX .. "ARN_W_THEME_APOC", 1000)
			stats.set_int(MPX .. "ARN_W_THEME_CONS", 1000)
			stats.set_int(MPX .. "ARN_W_PASS_THE_BOMB", 1000)
			stats.set_int(MPX .. "ARN_W_DETONATION", 1000)
			stats.set_int(MPX .. "ARN_W_ARCADE_RACE", 1000)
			stats.set_int(MPX .. "ARN_W_CTF", 1000)
			stats.set_int(MPX .. "ARN_W_TAG_TEAM", 1000)
			stats.set_int(MPX .. "ARN_W_DESTR_DERBY", 1000)
			stats.set_int(MPX .. "ARN_W_CARNAGE", 1000)
			stats.set_int(MPX .. "ARN_W_MONSTER_JAM", 1000)
			stats.set_int(MPX .. "ARN_W_GAMES_MASTERS", 1000)
			stats.set_int(MPX .. "ARN_L_PASS_THE_BOMB", 500)
			stats.set_int(MPX .. "ARN_L_DETONATION", 500)
			stats.set_int(MPX .. "ARN_L_ARCADE_RACE", 500)
			stats.set_int(MPX .. "ARN_L_CTF", 500)
			stats.set_int(MPX .. "ARN_L_TAG_TEAM", 500)
			stats.set_int(MPX .. "ARN_L_DESTR_DERBY", 500)
			stats.set_int(MPX .. "ARN_L_CARNAGE", 500)
			stats.set_int(MPX .. "ARN_L_MONSTER_JAM", 500)
			stats.set_int(MPX .. "ARN_L_GAMES_MASTERS", 500)
			stats.set_int(MPX .. "NUMBER_OF_CHAMP_BOUGHT", 1000)
			stats.set_int(MPX .. "ARN_SPECTATOR_KILLS", 1000)
			stats.set_int(MPX .. "ARN_LIFETIME_KILLS", 1000)
			stats.set_int(MPX .. "ARN_LIFETIME_DEATHS", 500)
			stats.set_int(MPX .. "ARENAWARS_CARRER_WINS", 1000)
			stats.set_int(MPX .. "ARENAWARS_CARRER_WINT", 1000)
			stats.set_int(MPX .. "ARENAWARS_MATCHES_PLYD", 1000)
			stats.set_int(MPX .. "ARENAWARS_MATCHES_PLYDT", 1000)
			stats.set_int(MPX .. "ARN_SPEC_BOX_TIME_MS", 86400000)
			stats.set_int(MPX .. "ARN_SPECTATOR_DRONE", 1000)
			stats.set_int(MPX .. "ARN_SPECTATOR_CAMS", 1000)
			stats.set_int(MPX .. "ARN_SMOKE", 1000)
			stats.set_int(MPX .. "ARN_DRINK", 1000)
			stats.set_int(MPX .. "ARN_VEH_MONSTER", 1000)
			stats.set_int(MPX .. "ARN_VEH_MONSTER", 1000)
			stats.set_int(MPX .. "ARN_VEH_MONSTER", 1000)
			stats.set_int(MPX .. "ARN_VEH_CERBERUS", 1000)
			stats.set_int(MPX .. "ARN_VEH_CERBERUS2", 1000)
			stats.set_int(MPX .. "ARN_VEH_CERBERUS3", 1000)
			stats.set_int(MPX .. "ARN_VEH_BRUISER", 1000)
			stats.set_int(MPX .. "ARN_VEH_BRUISER2", 1000)
			stats.set_int(MPX .. "ARN_VEH_BRUISER3", 1000)
			stats.set_int(MPX .. "ARN_VEH_SLAMVAN4", 1000)
			stats.set_int(MPX .. "ARN_VEH_SLAMVAN5", 1000)
			stats.set_int(MPX .. "ARN_VEH_SLAMVAN6", 1000)
			stats.set_int(MPX .. "ARN_VEH_BRUTUS", 1000)
			stats.set_int(MPX .. "ARN_VEH_BRUTUS2", 1000)
			stats.set_int(MPX .. "ARN_VEH_BRUTUS3", 1000)
			stats.set_int(MPX .. "ARN_VEH_SCARAB", 1000)
			stats.set_int(MPX .. "ARN_VEH_SCARAB2", 1000)
			stats.set_int(MPX .. "ARN_VEH_SCARAB3", 1000)
			stats.set_int(MPX .. "ARN_VEH_DOMINATOR4", 1000)
			stats.set_int(MPX .. "ARN_VEH_DOMINATOR5", 1000)
			stats.set_int(MPX .. "ARN_VEH_DOMINATOR6", 1000)
			stats.set_int(MPX .. "ARN_VEH_IMPALER2", 1000)
			stats.set_int(MPX .. "ARN_VEH_IMPALER3", 1000)
			stats.set_int(MPX .. "ARN_VEH_IMPALER4", 1000)
			stats.set_int(MPX .. "ARN_VEH_ISSI4", 1000)
			stats.set_int(MPX .. "ARN_VEH_ISSI5", 1000)
			stats.set_int(MPX .. "ARN_VEH_ISSI", 61000)
			stats.set_int(MPX .. "ARN_VEH_IMPERATOR", 1000)
			stats.set_int(MPX .. "ARN_VEH_IMPERATOR2", 1000)
			stats.set_int(MPX .. "ARN_VEH_IMPERATOR3", 1000)
			stats.set_int(MPX .. "ARN_VEH_ZR380", 1000)
			stats.set_int(MPX .. "ARN_VEH_ZR3802", 1000)
			stats.set_int(MPX .. "ARN_VEH_ZR3803", 1000)
			stats.set_int(MPX .. "ARN_VEH_DEATHBIKE", 1000)
			stats.set_int(MPX .. "ARN_VEH_DEATHBIKE2", 1000)
			stats.set_int(MPX .. "ARN_VEH_DEATHBIKE3", 1000)
			stats.set_bool(MPX .. "AWD_BEGINNER", true)
			stats.set_bool(MPX .. "AWD_FIELD_FILLER", true)
			stats.set_bool(MPX .. "AWD_ARMCHAIR_RACER", true)
			stats.set_bool(MPX .. "AWD_LEARNER", true)
			stats.set_bool(MPX .. "AWD_SUNDAY_DRIVER", true)
			stats.set_bool(MPX .. "AWD_THE_ROOKIE", true)
			stats.set_bool(MPX .. "AWD_BUMP_AND_RUN", true)
			stats.set_bool(MPX .. "AWD_GEAR_HEAD", true)
			stats.set_bool(MPX .. "AWD_DOOR_SLAMMER", true)
			stats.set_bool(MPX .. "AWD_HOT_LAP", true)
			stats.set_bool(MPX .. "AWD_ARENA_AMATEUR", true)
			stats.set_bool(MPX .. "AWD_PAINT_TRADER", true)
			stats.set_bool(MPX .. "AWD_SHUNTER", true)
			stats.set_bool(MPX .. "AWD_JOCK", true)
			stats.set_bool(MPX .. "AWD_WARRIOR", true)
			stats.set_bool(MPX .. "AWD_T_BONE", true)
			stats.set_bool(MPX .. "AWD_MAYHEM", true)
			stats.set_bool(MPX .. "AWD_WRECKER", true)
			stats.set_bool(MPX .. "AWD_CRASH_COURSE", true)
			stats.set_bool(MPX .. "AWD_ARENA_LEGEND", true)
			stats.set_bool(MPX .. "AWD_PEGASUS", true)
			stats.set_bool(MPX .. "AWD_UNSTOPPABLE", true)
			stats.set_bool(MPX .. "AWD_CONTACT_SPORT", true)
			stats.set_masked_int(MPX.."ARENAWARSPSTAT_INT", 1, 35, 8)
		for i = 0, 8 do for j = 0, 63 do stats.set_bool_masked(MPX.."ARENAWARSPSTAT_BOOL"..i, true, j, MPX) end end
			stats.set_int(MPX .. "AWD_ODD_JOBS", 50)
			stats.set_int(MPX .. "VCM_FLOW_PROGRESS", -1)
			stats.set_int(MPX .. "VCM_STORY_PROGRESS", 5)
			stats.set_bool(MPX .. "AWD_FIRST_TIME1", true)
			stats.set_bool(MPX .. "AWD_FIRST_TIME2", true)
			stats.set_bool(MPX .. "AWD_FIRST_TIME3", true)
			stats.set_bool(MPX .. "AWD_FIRST_TIME4", true)
			stats.set_bool(MPX .. "AWD_FIRST_TIME5", true)
			stats.set_bool(MPX .. "AWD_FIRST_TIME6", true)
			stats.set_bool(MPX .. "AWD_ALL_IN_ORDER", true)
			stats.set_bool(MPX .. "AWD_SUPPORTING_ROLE", true)
			stats.set_bool(MPX .. "AWD_LEADER", true)
			stats.set_bool(MPX .. "AWD_SURVIVALIST", true)
			Paragon = stats.get_bool(MPX .. "CAS_VEHICLE_REWARD") if Paragon == true then stats.set_bool(MPX .. "CAS_VEHICLE_REWARD",true) else stats.set_bool(MPX .. "CAS_VEHICLE_REWARD", false) end
		for i = 0, 6 do for j = 0, 63 do stats.set_bool_masked(MPX.."CASINOPSTAT_BOOL"..i, true, j, MPX) end end
			stats.set_int(MPX .. "CAS_HEIST_NOTS", -1)
			stats.set_int(MPX .. "CAS_HEIST_FLOW", -1)
			stats.set_int(MPX .. "SIGNAL_JAMMERS_COLLECTED", 50)
			stats.set_int(MPX .. "AWD_PREPARATION", 40)
			stats.set_int(MPX .. "AWD_ASLEEPONJOB", 20)
			stats.set_int(MPX .. "AWD_DAICASHCRAB", 100000)
			stats.set_int(MPX .. "AWD_BIGBRO", 40)
			stats.set_int(MPX .. "AWD_SHARPSHOOTER", 40)
			stats.set_int(MPX .. "AWD_RACECHAMP", 40)
			stats.set_int(MPX .. "AWD_BATSWORD", 1000000)
			stats.set_int(MPX .. "AWD_COINPURSE", 950000)
			stats.set_int(MPX .. "AWD_ASTROCHIMP", 3000000)
			stats.set_int(MPX .. "AWD_MASTERFUL", 40000)
			stats.set_int(MPX .. "H3_BOARD_DIALOGUE0", -1)
			stats.set_int(MPX .. "H3_BOARD_DIALOGUE1", -1)
			stats.set_int(MPX .. "H3_BOARD_DIALOGUE2", -1)
			stats.set_int(MPX .. "H3_VEHICLESUSED", -1)
			stats.set_int(MPX .. "H3_CR_STEALTH_1A", 100)
			stats.set_int(MPX .. "H3_CR_STEALTH_2B_RAPP", 100)
			stats.set_int(MPX .. "H3_CR_STEALTH_2C_SIDE", 100)
			stats.set_int(MPX .. "H3_CR_STEALTH_3A", 100)
			stats.set_int(MPX .. "H3_CR_STEALTH_4A", 100)
			stats.set_int(MPX .. "H3_CR_STEALTH_5A", 100)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_1A", 100)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_2A", 100)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_2B", 100)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_3A", 100)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_3B", 100)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_4A", 100)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_5A", 100)
			stats.set_int(MPX .. "H3_CR_DIRECT_1A", 100)
			stats.set_int(MPX .. "H3_CR_DIRECT_2A1", 100)
			stats.set_int(MPX .. "H3_CR_DIRECT_2A2", 100)
			stats.set_int(MPX .. "H3_CR_DIRECT_2BP", 100)
			stats.set_int(MPX .. "H3_CR_DIRECT_2C", 100)
			stats.set_int(MPX .. "H3_CR_DIRECT_3A", 100)
			stats.set_int(MPX .. "H3_CR_DIRECT_4A", 100)
			stats.set_int(MPX .. "H3_CR_DIRECT_5A", 100)
			stats.set_int(MPX .. "CR_ORDER", 100)
			stats.set_bool(MPX .. "AWD_SCOPEOUT", true)
			stats.set_bool(MPX .. "AWD_CREWEDUP", true)
			stats.set_bool(MPX .. "AWD_MOVINGON", true)
			stats.set_bool(MPX .. "AWD_PROMOCAMP", true)
			stats.set_bool(MPX .. "AWD_GUNMAN", true)
			stats.set_bool(MPX .. "AWD_SMASHNGRAB", true)
			stats.set_bool(MPX .. "AWD_INPLAINSI", true)
			stats.set_bool(MPX .. "AWD_UNDETECTED", true)
			stats.set_bool(MPX .. "AWD_ALLROUND", true)
			stats.set_bool(MPX .. "AWD_ELITETHEIF", true)
			stats.set_bool(MPX .. "AWD_PRO", true)
			stats.set_bool(MPX .. "AWD_SUPPORTACT", true)
			stats.set_bool(MPX .. "AWD_SHAFTED", true)
			stats.set_bool(MPX .. "AWD_COLLECTOR", true)
			stats.set_bool(MPX .. "AWD_DEADEYE", true)
			stats.set_bool(MPX .. "AWD_PISTOLSATDAWN", true)
			stats.set_bool(MPX .. "AWD_TRAFFICAVOI", true)
			stats.set_bool(MPX .. "AWD_CANTCATCHBRA", true)
			stats.set_bool(MPX .. "AWD_WIZHARD", true)
			stats.set_bool(MPX .. "AWD_APEESCAPE", true)
			stats.set_bool(MPX .. "AWD_MONKEYKIND", true)
			stats.set_bool(MPX .. "AWD_AQUAAPE", true)
			stats.set_bool(MPX .. "AWD_KEEPFAITH", true)
			stats.set_bool(MPX .. "AWD_TRUELOVE", true)
			stats.set_bool(MPX .. "AWD_NEMESIS", true)
			stats.set_bool(MPX .. "AWD_FRIENDZONED", true)
			stats.set_bool(MPX .. "VCM_FLOW_CS_RSC_SEEN", true)
			stats.set_bool(MPX .. "VCM_FLOW_CS_BWL_SEEN", true)
			stats.set_bool(MPX .. "VCM_FLOW_CS_MTG_SEEN", true)
			stats.set_bool(MPX .. "VCM_FLOW_CS_OIL_SEEN", true)
			stats.set_bool(MPX .. "VCM_FLOW_CS_DEF_SEEN", true)
			stats.set_bool(MPX .. "VCM_FLOW_CS_FIN_SEEN", true)
			stats.set_bool(MPX .. "HELP_FURIA", true)
			stats.set_bool(MPX .. "HELP_MINITAN", true)
			stats.set_bool(MPX .. "HELP_YOSEMITE2", true)
			stats.set_bool(MPX .. "HELP_ZHABA", true)
			stats.set_bool(MPX .. "HELP_IMORGEN", true)
			stats.set_bool(MPX .. "HELP_SULTAN2", true)
			stats.set_bool(MPX .. "HELP_VAGRANT", true)
			stats.set_bool(MPX .. "HELP_VSTR", true)
			stats.set_bool(MPX .. "HELP_STRYDER", true)
			stats.set_bool(MPX .. "HELP_SUGOI", true)
			stats.set_bool(MPX .. "HELP_KANJO", true)
			stats.set_bool(MPX .. "HELP_FORMULA", true)
			stats.set_bool(MPX .. "HELP_FORMULA2", true)
			stats.set_bool(MPX .. "HELP_JB7002", true)
		for i = 0, 4 do for j = 0, 63 do stats.set_bool_masked(MPX.."CASINOHSTPSTAT_BOOL"..i, true, j, MPX) end end
			stats.set_int(MPX .. "AWD_PREPARATION", 50)
			stats.set_int(MPX .. "AWD_ASLEEPONJOB", 20)
			stats.set_int(MPX .. "AWD_DAICASHCRAB", 100000)
			stats.set_int(MPX .. "AWD_BIGBRO", 40)
			stats.set_int(MPX .. "AWD_SHARPSHOOTER", 40)
			stats.set_int(MPX .. "AWD_RACECHAMP", 40)
			stats.set_int(MPX .. "AWD_BATSWORD", 1000000)
			stats.set_int(MPX .. "AWD_COINPURSE", 950000)
			stats.set_int(MPX .. "AWD_ASTROCHIMP", 3000000)
			stats.set_int(MPX .. "AWD_MASTERFUL", 40000)
			stats.set_int(MPX .. "SCGW_NUM_WINS_GANG_0", 50)
			stats.set_int(MPX .. "SCGW_NUM_WINS_GANG_1", 50)
			stats.set_int(MPX .. "SCGW_NUM_WINS_GANG_2", 50)
			stats.set_int(MPX .. "SCGW_NUM_WINS_GANG_3", 50)
			stats.set_int(MPX .. "CH_ARC_CAB_CLAW_TROPHY", -1)
			stats.set_int(MPX .. "CH_ARC_CAB_LOVE_TROPHY", -1)
			stats.set_int(MPX .. "IAP_MAX_MOON_DIST", 2147483647)
			stats.set_int(MPX .. "SCGW_INITIALS_0", 69644)
			stats.set_int(MPX .. "SCGW_INITIALS_1", 50333)
			stats.set_int(MPX .. "SCGW_INITIALS_2", 63512)
			stats.set_int(MPX .. "SCGW_INITIALS_3", 46136)
			stats.set_int(MPX .. "SCGW_INITIALS_4", 21638)
			stats.set_int(MPX .. "SCGW_INITIALS_5", 2133)
			stats.set_int(MPX .. "SCGW_INITIALS_6", 1215)
			stats.set_int(MPX .. "SCGW_INITIALS_7", 2444)
			stats.set_int(MPX .. "SCGW_INITIALS_8", 38023)
			stats.set_int(MPX .. "SCGW_INITIALS_9", 2233)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_0",0)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_1", 64)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_2", 8457)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_3", 91275)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_4", 53260)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_5", 78663)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_6", 25103)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_7", 102401)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_8", 12672)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_9", 74380)
			stats.set_int(MPX .. "FOOTAGE_SCORE_0", 284544)
			stats.set_int(MPX .. "FOOTAGE_SCORE_1", 275758)
			stats.set_int(MPX .. "FOOTAGE_SCORE_2", 100000)
			stats.set_int(MPX .. "FOOTAGE_SCORE_3", 90000)
			stats.set_int(MPX .. "FOOTAGE_SCORE_4", 80000)
			stats.set_int(MPX .. "FOOTAGE_SCORE_5", 70000)
			stats.set_int(MPX .. "FOOTAGE_SCORE_6", 60000)
			stats.set_int(MPX .. "FOOTAGE_SCORE_7", 50000)
			stats.set_int(MPX .. "FOOTAGE_SCORE_8", 40000)
			stats.set_int(MPX .. "FOOTAGE_SCORE_9", 30000)
		for i = 0, 9 do stats.set_int(MPX .. "IAP_INITIALS_"..i, 50) 
			stats.set_int(MPX .. "IAP_SCORE_"..i, 50) 
			stats.set_int(MPX .. "IAP_SCORE_"..i, 50) 
			stats.set_int(MPX .. "SCGW_SCORE_"..i, 50) 
			stats.set_int(MPX .. "DG_DEFENDER_INITIALS_"..i, 69644) 
			stats.set_int(MPX .. "DG_DEFENDER_SCORE_"..i, 50) 
			stats.set_int(MPX .. "DG_MONKEY_INITIALS_"..i, 69644) 
			stats.set_int(MPX .. "DG_MONKEY_SCORE_"..i, 50) 
			stats.set_int(MPX .. "DG_PENETRATOR_INITIALS_"..i, 69644) 
			stats.set_int(MPX .. "DG_PENETRATOR_SCORE_"..i, 50) 
			stats.set_int(MPX .. "GGSM_INITIALS_"..i, 69644) 
			stats.set_int(MPX .. "GGSM_SCORE_"..i, 50) 
			stats.set_int(MPX .. "TWR_INITIALS_"..i, 69644) 
			stats.set_int(MPX .. "TWR_SCORE_"..i, 50) end 
			stats.set_bool(MPX .. "AWD_SCOPEOUT", true)
			stats.set_bool(MPX .. "AWD_CREWEDUP", true)
			stats.set_bool(MPX .. "AWD_MOVINGON", true)
			stats.set_bool(MPX .. "AWD_PROMOCAMP", true)
			stats.set_bool(MPX .. "AWD_GUNMAN", true)
			stats.set_bool(MPX .. "AWD_SMASHNGRAB", true)
			stats.set_bool(MPX .. "AWD_INPLAINSI", true)
			stats.set_bool(MPX .. "AWD_UNDETECTED", true)
			stats.set_bool(MPX .. "AWD_ALLROUND", true)
			stats.set_bool(MPX .. "AWD_ELITETHEIF", true)
			stats.set_bool(MPX .. "AWD_PRO", true)
			stats.set_bool(MPX .. "AWD_SUPPORTACT", true)
			stats.set_bool(MPX .. "AWD_SHAFTED", true)
			stats.set_bool(MPX .. "AWD_COLLECTOR", true)
			stats.set_bool(MPX .. "AWD_DEADEYE", true)
			stats.set_bool(MPX .. "AWD_PISTOLSATDAWN", true)
			stats.set_bool(MPX .. "AWD_TRAFFICAVOI", true)
			stats.set_bool(MPX .. "AWD_CANTCATCHBRA", true)
			stats.set_bool(MPX .. "AWD_WIZHARD", true)
			stats.set_bool(MPX .. "AWD_APEESCAP", true)
			stats.set_bool(MPX .. "AWD_MONKEYKIND", true)
			stats.set_bool(MPX .. "AWD_AQUAAPE", true)
			stats.set_bool(MPX .. "AWD_KEEPFAITH", true)
			stats.set_bool(MPX .. "AWD_TRUELOVE", true)
			stats.set_bool(MPX .. "AWD_NEMESIS", true)
			stats.set_bool(MPX .. "AWD_FRIENDZONED", true)
			stats.set_bool(MPX .. "IAP_CHALLENGE_0", true)
			stats.set_bool(MPX .. "IAP_CHALLENGE_1", true)
			stats.set_bool(MPX .. "IAP_CHALLENGE_2", true)
			stats.set_bool(MPX .. "IAP_CHALLENGE_3", true)
			stats.set_bool(MPX .. "IAP_CHALLENGE_4", true)
			stats.set_bool(MPX .. "IAP_GOLD_TANK", true)
			stats.set_bool(MPX .. "SCGW_WON_NO_DEATHS", true)
		for j = 290449, 290468 do globals.set_int(j, 1) end 
		for i = 0, 4 do for j = 0, 63 do stats.set_bool_masked(MPX.."CASINOHSTPSTAT_BOOL"..i, true, j, MPX) end end 
		for i = 0, 6 do for j = 0, 63 do stats.set_bool_masked(MPX.."CASINOPSTAT_BOOL"..i, true, j, MPX) end end
			stats.set_bool(MPX .. "AWD_KINGOFQUB3D", true)
			stats.set_bool(MPX .. "AWD_QUBISM", true)
			stats.set_bool(MPX .. "AWD_QUIBITS", true)
			stats.set_bool(MPX .. "AWD_GODOFQUB3D", true)
			stats.set_bool(MPX .. "AWD_ELEVENELEVEN", true)
			stats.set_bool(MPX .. "AWD_GOFOR11TH", true)
			stats.set_masked_int(MPX.."SU20PSTAT_INT", 1, 35, 8)
		for i = 0, 1 do for j = 0, 63 do stats.set_bool_masked(MPX.."SU20PSTAT_BOOL"..i, true, j, MPX) stats.set_bool_masked(MPX.."SU20TATTOOSTAT_BOOL"..i, true, j, MPX) end end
			stats.set_bool(MPX .. "AWD_INTELGATHER", true)
			stats.set_bool(MPX .. "AWD_COMPOUNDINFILT", true)
			stats.set_bool(MPX .. "AWD_LOOT_FINDER", true)
			stats.set_bool(MPX .. "AWD_MAX_DISRUPT", true)
			stats.set_bool(MPX .. "AWD_THE_ISLAND_HEIST", true)
			stats.set_bool(MPX .. "AWD_GOING_ALONE", true)
			stats.set_bool(MPX .. "AWD_TEAM_WORK", true)
			stats.set_bool(MPX .. "AWD_MIXING_UP", true)
			stats.set_bool(MPX .. "AWD_TEAM_WORK", true)
			stats.set_bool(MPX .. "AWD_MIXING_UP", true)
			stats.set_bool(MPX .. "AWD_PRO_THIEF", true)
			stats.set_bool(MPX .. "AWD_CAT_BURGLAR", true)
			stats.set_bool(MPX .. "AWD_ONE_OF_THEM", true)
			stats.set_bool(MPX .. "AWD_GOLDEN_GUN", true)
			stats.set_bool(MPX .. "AWD_ELITE_THIEF", true)
			stats.set_bool(MPX .. "AWD_PROFESSIONAL", true)
			stats.set_bool(MPX .. "AWD_HELPING_OUT", true)
			stats.set_bool(MPX .. "AWD_COURIER", true)
			stats.set_bool(MPX .. "AWD_PARTY_VIBES", true)
			stats.set_bool(MPX .. "AWD_HELPING_HAND", true)
			stats.set_bool(MPX .. "AWD_ELEVENELEVEN", true)
			stats.set_bool(MPX .. "COMPLETE_H4_F_USING_VETIR", true)
			stats.set_bool(MPX .. "COMPLETE_H4_F_USING_LONGFIN", true)
			stats.set_bool(MPX .. "COMPLETE_H4_F_USING_ANNIH", true)
			stats.set_bool(MPX .. "COMPLETE_H4_F_USING_ALKONOS", true)
			stats.set_bool(MPX .. "COMPLETE_H4_F_USING_PATROLB", true)
			stats.set_int(MPX .. "AWD_LOSTANDFOUND", 500000)
			stats.set_int(MPX .. "AWD_SUNSET", 1800000)
			stats.set_int(MPX .. "AWD_TREASURE_HUNTER", 1000000)
			stats.set_int(MPX .. "AWD_WRECK_DIVING", 1000000)
			stats.set_int(MPX .. "AWD_KEINEMUSIK", 1800000)
			stats.set_int(MPX .. "AWD_PALMS_TRAX", 1800000)
			stats.set_int(MPX .. "AWD_MOODYMANN", 1800000)
			stats.set_int(MPX .. "AWD_FILL_YOUR_BAGS", 1000000000)
			stats.set_int(MPX .. "AWD_WELL_PREPARED", 80)
			stats.set_int(MPX .. "H4_H4_DJ_MISSIONS", -1)
			stats.set_int(MPX .. "H4CNF_APPROACH", -1)
			stats.set_int(MPX .. "H4_MISSIONS", -1)
			stats.set_int(MPX .. "H4_PLAYTHROUGH_STATUS", 100)
		for i = 0, 2 do for j = 0, 63 do stats.set_bool_masked(MPX.."HISLANDPSTAT_BOOL"..i, true, j, MPX) end end
			stats.set_int(MPX .. "AWD_CAR_CLUB_MEM", 100)
			stats.set_int(MPX .. "AWD_SPRINTRACER", 50)
			stats.set_int(MPX .. "AWD_STREETRACER", 50)
			stats.set_int(MPX .. "AWD_PURSUITRACER", 50)
			stats.set_int(MPX .. "AWD_TEST_CAR", 240)
			stats.set_int(MPX .. "AWD_AUTO_SHOP", 50)	
			stats.set_int(MPX .. "AWD_GROUNDWORK", 40)
			stats.set_int(MPX .. "AWD_CAR_EXPORT", 100)
			stats.set_int(MPX .. "AWD_ROBBERY_CONTRACT", 100)
			stats.set_int(MPX .. "AWD_FACES_OF_DEATH", 100)
			stats.set_bool(MPX .. "AWD_CAR_CLUB", true)
			stats.set_bool(MPX .. "AWD_PRO_CAR_EXPORT", true)
			stats.set_bool(MPX .. "AWD_UNION_DEPOSITORY", true)
			stats.set_bool(MPX .. "AWD_MILITARY_CONVOY", true)
			stats.set_bool(MPX .. "AWD_FLEECA_BANK", true)
			stats.set_bool(MPX .. "AWD_FREIGHT_TRAIN", true)
			stats.set_bool(MPX .. "AWD_BOLINGBROKE_ASS", true)
			stats.set_bool(MPX .. "AWD_IAA_RAID", true)
			stats.set_bool(MPX .. "AWD_METH_JOB", true)
			stats.set_bool(MPX .. "AWD_BUNKER_RAID", true)
			stats.set_bool(MPX .. "AWD_STRAIGHT_TO_VIDEO", true)
			stats.set_bool(MPX .. "AWD_MONKEY_C_MONKEY_DO", true)
			stats.set_bool(MPX .. "AWD_TRAINED_TO_KILL", true)
			stats.set_bool(MPX .. "AWD_DIRECTOR", true)
		for i = 0, 8 do for j = 0, 63 do stats.set_bool_masked(MPX.."TUNERPSTAT_BOOL"..i, true, j, MPX) end end
			stats.set_int(MPX .. "AWD_CONTRACTOR", 50)
			stats.set_int(MPX .. "AWD_COLD_CALLER", 50)
			stats.set_int(MPX .. "AWD_PRODUCER", 60)
			stats.set_int(MPX .. "FIXERTELEPHONEHITSCOMPL", 10)
			stats.set_int(MPX .. "PAYPHONE_BONUS_KILL_METHOD", 10)
			stats.set_int(MPX .. "PAYPHONE_BONUS_KILL_METHOD", -1)
			stats.set_int(MPX .. "FIXER_GENERAL_BS", -1)
			stats.set_int(MPX .. "FIXER_COMPLETED_BS", -1)
			stats.set_int(MPX .. "FIXER_STORY_BS", -1)
			stats.set_int(MPX .. "FIXER_STORY_STRAND", -1)
			stats.set_int(MPX .. "FIXER_STORY_COOLDOWN", -1)
			stats.set_int(MPX .. "FIXER_COUNT", 510)
			stats.set_int(MPX .. "FIXER_SC_VEH_RECOVERED", 85)
			stats.set_int(MPX .. "FIXER_SC_VAL_RECOVERED", 85)
			stats.set_int(MPX .. "FIXER_SC_GANG_TERMINATED", 85)
			stats.set_int(MPX .. "FIXER_SC_VIP_RESCUED", 85)
			stats.set_int(MPX .. "FIXER_SC_ASSETS_PROTECTED", 85)
			stats.set_int(MPX .. "FIXER_SC_EQ_DESTROYED", 85)
			stats.set_int(MPX .. "FIXER_EARNINGS", 19734860)
			stats.set_bool(MPX .. "AWD_TEEING_OFF", true)
			stats.set_bool(MPX .. "AWD_PARTY_NIGHT", true)
			stats.set_bool(MPX .. "AWD_BILLIONAIRE_GAMES", true)
			stats.set_bool(MPX .. "AWD_HOOD_PASS", true)
			stats.set_bool(MPX .. "AWD_STUDIO_TOUR", true)
			stats.set_bool(MPX .. "AWD_DONT_MESS_DRE", true)
			stats.set_bool(MPX .. "AWD_BACKUP", true)
			stats.set_bool(MPX .. "AWD_SHORTFRANK_1", true)
			stats.set_bool(MPX .. "AWD_SHORTFRANK_2", true)
			stats.set_bool(MPX .. "AWD_SHORTFRANK_3", true)
			stats.set_bool(MPX .. "AWD_CONTR_KILLER", true)
			stats.set_bool(MPX .. "AWD_DOGS_BEST_FRIEND", true)
			stats.set_bool(MPX .. "AWD_MUSIC_STUDIO", true)
			stats.set_bool(MPX .. "AWD_SHORTLAMAR_1", true)
			stats.set_bool(MPX .. "AWD_SHORTLAMAR_2", true)
			stats.set_bool(MPX .. "AWD_SHORTLAMAR_3", true)
			stats.set_bool(MPX .. "BS_FRANKLIN_DIALOGUE_0", true)
			stats.set_bool(MPX .. "BS_FRANKLIN_DIALOGUE_1", true)
			stats.set_bool(MPX .. "BS_FRANKLIN_DIALOGUE_2", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_SETUP", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_STRAND", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_PARTY", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_PARTY_2", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_PARTY_F", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_BILL", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_BILL_2", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_BILL_F", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_HOOD", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_HOOD_2", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_HOOD_F", true)
			stats.set_bool(MPX .. "AWD_ACELIQUOR", true)
			stats.set_bool(MPX .. "AWD_TRUCKAMBUSH", true)
			stats.set_bool(MPX .. "AWD_LOSTCAMPREV", true)
			stats.set_bool(MPX .. "AWD_ACIDTRIP", true)
			stats.set_bool(MPX .. "AWD_HIPPYRIVALS", true)
			stats.set_bool(MPX .. "AWD_TRAINCRASH", true)
			stats.set_bool(MPX .. "AWD_BACKUPB", true)
			stats.set_bool(MPX .. "AWD_GETSTARTED", true)
			stats.set_bool(MPX .. "AWD_CHEMREACTION", true)
			stats.set_bool(MPX .. "AAWD_WAREHODEFEND", true)
			stats.set_bool(MPX .. "AWD_ATTACKINVEST", true)
			stats.set_bool(MPX .. "AWD_RESCUECOOK", true)
			stats.set_bool(MPX .. "AWD_DRUGTRIPREHAB", true)
			stats.set_bool(MPX .. "AWD_CARGOPLANE", true)
			stats.set_bool(MPX .. "AWD_BACKUPB2", true)
			stats.set_bool(MPX .. "AWD_TAXISTAR", true)
			stats.set_int(MPX .. "AWD_RUNRABBITRUN", 5)
			stats.set_int(MPX .. "AWD_CALLME", 50)
			stats.set_int(MPX .. "AWD_CHEMCOMPOUNDS", 50)
		for j = 0, 63 do stats.set_bool_masked(MPX.."FIXERPSTAT_BOOL0", true, j, MPX) stats.set_bool_masked(MPX.."FIXERPSTAT_BOOL1", true, j, MPX) stats.set_bool_masked(MPX.."FIXERTATTOOSTAT_BOOL0", true, j, MPX) end end)
	
	Awards1b1 = Awards:add_submenu("Unlock One By One")

	Awards1b1:add_action("Victory", function() 
			stats.set_int(MPX .. "AWD_FM_DM_WINS", 50)
			stats.set_int(MPX .. "AWD_FM_TDM_WINS", 50)
			stats.set_int(MPX .. "AWD_FM_TDM_MVP", 50)
			stats.set_int(MPX .. "AWD_RACES_WON", 50)
			stats.set_int(MPX .. "AWD_FMWINAIRRACE", 25)
			stats.set_int(MPX .. "AWD_FMWINSEARACE", 25)
			stats.set_int(MPX .. "AWD_FM_GTA_RACES_WON", 50)
			stats.set_bool(MPX .. "AWD_FMKILL3ANDWINGTARACE", true)
			stats.set_int(MPX .. "AWD_FMRALLYWONDRIVE", 25)
			stats.set_int(MPX .. "AWD_FMRALLYWONNAV", 25)
			stats.set_bool(MPX .. "AWD_FMWINCUSTOMRACE", true)
			stats.set_int(MPX .. "AWD_FMWINRACETOPOINTS", 25)
			stats.set_bool(MPX .. "CL_RACE_MODDED_CAR", true)
			stats.set_int(MPX .. "AWD_FM_RACE_LAST_FIRST", 25)
			stats.set_bool(MPX .. "AWD_FMRACEWORLDRECHOLDER", true)
			stats.set_int(MPX .. "AWD_FM_RACES_FASTEST_LAP", 50)
			stats.set_bool(MPX .. "AWD_FMWINALLRACEMODES", true)
			stats.set_int(MPX .. "AWD_FMHORDWAVESSURVIVE", 10)
			stats.set_int(MPX .. "NUMBER_SLIPSTREAMS_IN_RACE", 100)
			stats.set_int(MPX .. "NUMBER_TURBO_STARTS_IN_RACE", 50)
			stats.set_int(MPX .. "AWD_NO_ARMWRESTLING_WINS", 25)
			stats.set_int(MPX .. "MOST_ARM_WRESTLING_WINS", 25)
			stats.set_int(MPX .. "AWD_WIN_AT_DARTS", 25)
			stats.set_int(MPX .. "AWD_FM_GOLF_WON", 25)
			stats.set_int(MPX .. "AWD_FM_TENNIS_WON", 25)
			stats.set_bool(MPX .. "AWD_FM_TENNIS_5_SET_WINS", true)
			stats.set_bool(MPX .. "AWD_FM_TENNIS_STASETWIN", true)
			stats.set_int(MPX .. "AWD_FM_SHOOTRANG_CT_WON", 25)
			stats.set_int(MPX .. "AWD_FM_SHOOTRANG_RT_WON", 25)
			stats.set_int(MPX .. "AWD_FM_SHOOTRANG_TG_WON", 25)
			stats.set_bool(MPX .. "AWD_FM_SHOOTRANG_GRAN_WON", true)
			stats.set_bool(MPX .. "AWD_FMWINEVERYGAMEMODE", true)
			stats.set_int(MPX .. "AWD_WIN_CAPTURES", 50)
			stats.set_int(MPX .. "AWD_WIN_CAPTURE_DONT_DYING", 25)
			stats.set_int(MPX .. "AWD_WIN_LAST_TEAM_STANDINGS", 50)
			stats.set_int(MPX .. "AWD_ONLY_PLAYER_ALIVE_LTS", 50)
			stats.set_int(MPX .. "AWD_KILL_TEAM_YOURSELF_LTS", 25)
			stats.set_int(MPX .. "AIR_LAUNCHES_OVER_40M", 25)
			stats.set_int(MPX .. "AWD_CARS_EXPORTED", 50)
			stats.set_int(MPX .. "AWD_LESTERDELIVERVEHICLES", 25)
			stats.set_int(MPX .. "TOTAL_RACES_WON", 500)
			stats.set_int(MPX .. "TOTAL_RACES_LOST", 250)
			stats.set_int(MPX .. "TOTAL_CUSTOM_RACES_WON", 500)
			stats.set_int(MPX .. "TOTAL_DEATHMATCH_LOST", 250)
			stats.set_int(MPX .. "TOTAL_DEATHMATCH_WON", 500)
			stats.set_int(MPX .. "TOTAL_TDEATHMATCH_LOST", 250)
			stats.set_int(MPX .. "TOTAL_TDEATHMATCH_WON", 500)
			stats.set_int(MPX .. "SHOOTINGRANGE_WINS", 500)
			stats.set_int(MPX .. "SHOOTINGRANGE_LOSSES", 250)
			stats.set_int(MPX .. "TENNIS_MATCHES_WON", 500)
			stats.set_int(MPX .. "TENNIS_MATCHES_LOST", 250)
			stats.set_int(MPX .. "GOLF_WINS", 500)
			stats.set_int(MPX .. "GOLF_LOSSES", 250)
			stats.set_int(MPX .. "DARTS_TOTAL_WINS", 500)
			stats.set_int(MPX .. "DARTS_TOTAL_MATCHES", 750)
			stats.set_int(MPX .. "SHOOTINGRANGE_TOTAL_MATCH", 800)
			stats.set_int(MPX .. "BJ_WINS", 500)
			stats.set_int(MPX .. "BJ_LOST", 250)
			stats.set_int(MPX .. "RACE_2_POINT_WINS", 500)
			stats.set_int(MPX .. "RACE_2_POINT_LOST", 250)
			stats.set_int(MPX .. "KILLS_PLAYERS", 3593)
			stats.set_int(MPX .. "DEATHS_PLAYER", 1002)
			stats.set_int(MPX .. "MISSIONS_CREATED", 500)
			stats.set_int(MPX .. "LTS_CREATED", 500)
			stats.set_int(MPX .. "FM_MISSION_LIKES", 1500) end)
	
	Awards1b1:add_action("General", function()
			stats.set_bool(MPX .. "AWD_FM25DIFFERENTDM", true)
			stats.set_int(MPX .. "CR_DIFFERENT_DM", 25)
			stats.set_bool(MPX .. "AWD_FM25DIFFERENTRACES", true)
			stats.set_int(MPX .. "CR_DIFFERENT_RACES", 25)
			stats.set_int(MPX .. "AWD_PARACHUTE_JUMPS_20M", 25)
			stats.set_int(MPX .. "AWD_PARACHUTE_JUMPS_50M", 25)
			stats.set_int(MPX .. "AWD_FMBASEJMP", 25)
			stats.set_bool(MPX .. "AWD_FMATTGANGHQ", true)
			stats.set_bool(MPX .. "AWD_FM6DARTCHKOUT", true)
			stats.set_int(MPX .. "AWD_FM_GOLF_BIRDIES", 25)
			stats.set_bool(MPX .. "AWD_FM_GOLF_HOLE_IN_1", true)
			stats.set_int(MPX .. "AWD_FM_TENNIS_ACE", 25)
			stats.set_int(MPX .. "AWD_FMBBETWIN", 50000)
			stats.set_int(MPX .. "AWD_LAPDANCES", 25)
			stats.set_int(MPX .. "AWD_FMCRATEDROPS", 25)
			stats.set_bool(MPX .. "AWD_FMPICKUPDLCCRATE1ST", true)
			stats.set_bool(MPX .. "AWD_FM25DIFITEMSCLOTHES", true)
			stats.set_int(MPX .. "AWD_NO_HAIRCUTS", 25)
			stats.set_bool(MPX .. "AWD_BUY_EVERY_GUN", true)
			stats.set_bool(MPX .. "AWD_DRIVELESTERCAR5MINS", true)
			stats.set_bool(MPX .. "AWD_FMTATTOOALLBODYPARTS", true)
			stats.set_int(MPX .. "AWD_DROPOFF_CAP_PACKAGES", 100)
			stats.set_int(MPX .. "AWD_PICKUP_CAP_PACKAGES", 100)
			stats.set_int(MPX .. "AWD_MENTALSTATE_TO_NORMAL", 50)
			stats.set_bool(MPX .. "AWD_STORE_20_CAR_IN_GARAGES", true)
			stats.set_int(MPX .. "AWD_TRADE_IN_YOUR_PROPERTY", 25)
			stats.set_bool(MPX .. "AWD_DAILYOBJWEEKBONUS", true)
			stats.set_bool(MPX .. "AWD_DAILYOBJMONTHBONUS", true)
			stats.set_int(MPX .. "AWD_FM_CR_DM_MADE", 25)
			stats.set_int(MPX .. "AWD_FM_CR_RACES_MADE", 25)
			stats.set_int(MPX .. "AWD_FM_CR_PLAYED_BY_PEEP", 1598)
			stats.set_int(MPX .. "AWD_FM_CR_MISSION_SCORE", 100)
			stats.set_bool(MPX .. "CL_DRIVE_RALLY", true)
			stats.set_bool(MPX .. "CL_PLAY_GTA_RACE", true)
			stats.set_bool(MPX .. "CL_PLAY_BOAT_RACE", true)
			stats.set_bool(MPX .. "CL_PLAY_FOOT_RACE", true)
			stats.set_bool(MPX .. "CL_PLAY_TEAM_DM", true)
			stats.set_bool(MPX .. "CL_PLAY_VEHICLE_DM", true)
			stats.set_bool(MPX .. "CL_PLAY_MISSION_CONTACT", true)
			stats.set_bool(MPX .. "CL_PLAY_A_PLAYLIST", true)
			stats.set_bool(MPX .. "CL_PLAY_POINT_TO_POINT", true)
			stats.set_bool(MPX .. "CL_PLAY_ONE_ON_ONE_DM", true)
			stats.set_bool(MPX .. "CL_PLAY_ONE_ON_ONE_RACE", true)
			stats.set_bool(MPX .. "CL_SURV_A_BOUNTY", true)
			stats.set_bool(MPX .. "CL_SET_WANTED_LVL_ON_PLAY", true)
			stats.set_bool(MPX .. "CL_GANG_BACKUP_GANGS", true)
			stats.set_bool(MPX .. "CL_GANG_BACKUP_LOST", true)
			stats.set_bool(MPX .. "CL_GANG_BACKUP_VAGOS", true)
			stats.set_bool(MPX .. "CL_CALL_MERCENARIES", true)
			stats.set_bool(MPX .. "CL_PHONE_MECH_DROP_CAR", true)
			stats.set_bool(MPX .. "CL_GONE_OFF_RADAR", true)
			stats.set_bool(MPX .. "CL_FILL_TITAN", true)
			stats.set_bool(MPX .. "CL_MOD_CAR_USING_APP", true)
			stats.set_bool(MPX .. "CL_MOD_CAR_USING_APP", true)
			stats.set_bool(MPX .. "CL_BUY_INSURANCE", true)
			stats.set_bool(MPX .. "CL_BUY_GARAGE", true)
			stats.set_bool(MPX .. "CL_ENTER_FRIENDS_HOUSE", true)
			stats.set_bool(MPX .. "CL_CALL_STRIPPER_HOUSE", true)
			stats.set_bool(MPX .. "CL_CALL_FRIEND", true)
			stats.set_bool(MPX .. "CL_SEND_FRIEND_REQUEST", true)
			stats.set_bool(MPX .. "CL_W_WANTED_PLAYER_TV", true)
			stats.set_bool(MPX .. "FM_INTRO_CUT_DONE", true)
			stats.set_bool(MPX .. "FM_INTRO_MISS_DONE", true)
			stats.set_bool(MPX .. "SHOOTINGRANGE_SEEN_TUT", true)
			stats.set_bool(MPX .. "TENNIS_SEEN_TUTORIAL", true)
			stats.set_bool(MPX .. "DARTS_SEEN_TUTORIAL", true)
			stats.set_bool(MPX .. "ARMWRESTLING_SEEN_TUTORIAL", true)
			stats.set_bool(MPX .. "HAS_WATCHED_BENNY_CUTSCE", true)
			stats.set_int(MPX .. "NO_PHOTOS_TAKEN", 100)
			stats.set_int(MPX .. "BOUNTSONU", 200)
			stats.set_int(MPX .. "BOUNTPLACED", 500)
			stats.set_int(MPX .. "BETAMOUNT", 500)
			stats.set_int(MPX .. "CRARMWREST", 500)
			stats.set_int(MPX .. "CRBASEJUMP", 500)
			stats.set_int(MPX .. "CRDARTS", 500)
			stats.set_int(MPX .. "CRDM", 500)
			stats.set_int(MPX .. "CRGANGHIDE", 500)
			stats.set_int(MPX .. "CRGOLF", 500)
			stats.set_int(MPX .. "CRHORDE", 500)
			stats.set_int(MPX .. "CRMISSION", 500)
			stats.set_int(MPX .. "CRSHOOTRNG", 500)
			stats.set_int(MPX .. "CRTENNIS", 500)
			stats.set_int(MPX .. "NO_TIMES_CINEMA", 500) end)
	
	Awards1b1:add_action("Weapons", function()
			stats.set_int(MPX .. "CHAR_WEAP_UNLOCKED", -1)
			stats.set_int(MPX .. "CHAR_WEAP_UNLOCKED2", -1)
			stats.set_int(MPX .. "CHAR_WEAP_UNLOCKED3", -1)
			stats.set_int(MPX .. "CHAR_WEAP_UNLOCKED4", -1)
			stats.set_int(MPX .. "CHAR_WEAP_ADDON_1_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_WEAP_ADDON_2_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_WEAP_ADDON_3_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_WEAP_ADDON_4_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_WEAP_FREE", -1)
			stats.set_int(MPX .. "CHAR_WEAP_FREE2", -1)
			stats.set_int(MPX .. "CHAR_FM_WEAP_FREE", -1)
			stats.set_int(MPX .. "CHAR_FM_WEAP_FREE2", -1)
			stats.set_int(MPX .. "CHAR_FM_WEAP_FREE3", -1)
			stats.set_int(MPX .. "CHAR_FM_WEAP_FREE4", -1)
			stats.set_int(MPX .. "CHAR_WEAP_PURCHASED", -1)
			stats.set_int(MPX .. "CHAR_WEAP_PURCHASED2", -1)
			stats.set_int(MPX .. "WEAPON_PICKUP_BITSET", -1)
			stats.set_int(MPX .. "WEAPON_PICKUP_BITSET2", -1)
			stats.set_int(MPX .. "CHAR_FM_WEAP_UNLOCKED", -1)
			stats.set_int(MPX .. "NO_WEAPONS_UNLOCK", -1)
			stats.set_int(MPX .. "NO_WEAPON_MODS_UNLOCK", -1)
			stats.set_int(MPX .. "NO_WEAPON_CLR_MOD_UNLOCK", -1) 
			stats.set_int(MPX .. "CHAR_FM_WEAP_UNLOCKED2", -1)
			stats.set_int(MPX .. "CHAR_FM_WEAP_UNLOCKED3", -1)
			stats.set_int(MPX .. "CHAR_FM_WEAP_UNLOCKED4", -1)
			stats.set_int(MPX .. "CHAR_KIT_1_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_2_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_3_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_4_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_5_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_6_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_7_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_8_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_9_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_10_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_11_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_12_FM_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_KIT_FM_PURCHASE", -1)
			stats.set_int(MPX .. "CHAR_WEAP_FM_PURCHASE", -1)
			stats.set_int(MPX .. "CHAR_WEAP_FM_PURCHASE2", -1)
			stats.set_int(MPX .. "CHAR_WEAP_FM_PURCHASE3", -1)
			stats.set_int(MPX .. "CHAR_WEAP_FM_PURCHASE4", -1)
			stats.set_int(MPX .. "FIREWORK_TYPE_1_WHITE", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_1_RED", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_1_BLUE", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_2_WHITE", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_2_RED", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_2_BLUE", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_3_WHITE", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_3_RED", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_3_BLUE", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_4_WHITE", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_4_RED", 1000)
			stats.set_int(MPX .. "FIREWORK_TYPE_4_BLUE", 1000)
			stats.set_int(MPX .. "WEAP_FM_ADDON_PURCH", -1)
		for i = 2, 19 do stats.set_int(MPX .. "WEAP_FM_ADDON_PURCH"..i, -1) end
		for j = 1, 19 do stats.set_int(MPX .. "CHAR_FM_WEAP_ADDON_"..j.."_UNLCK", -1) end
		for m = 1, 41 do stats.set_int(MPX .. "CHAR_KIT_"..m.."_FM_UNLCK", -1) end
		for l = 2, 41 do stats.set_int(MPX .. "CHAR_KIT_FM_PURCHASE"..l, -1) end end)
	
	Awards1b1:add_action("Crimes", function()
			stats.set_int(MPX .. "AWD_FMTIME5STARWANTED", 120)
			stats.set_int(MPX .. "AWD_5STAR_WANTED_AVOIDANCE", 50)
			stats.set_int(MPX .. "AWD_FMSHOOTDOWNCOPHELI", 25)
			stats.set_int(MPX .. "AWD_VEHICLES_JACKEDR", 500)
			stats.set_int(MPX .. "AWD_SECURITY_CARS_ROBBED", 25)
			stats.set_int(MPX .. "AWD_HOLD_UP_SHOPS", 20)
			stats.set_int(MPX .. "AWD_ODISTRACTCOPSNOEATH", 25)
			stats.set_int(MPX .. "AWD_ENEMYDRIVEBYKILLS", 100)
			stats.set_int(MPX .. "CHAR_WANTED_LEVEL_TIME5STAR", 18000000)
			stats.set_int(MPX .. "CARS_COPS_EXPLODED", 300)
			stats.set_int(MPX .. "BIKES_EXPLODED", 100)
			stats.set_int(MPX .. "BOATS_EXPLODED", 168)
			stats.set_int(MPX .. "HELIS_EXPLODED", 98)
			stats.set_int(MPX .. "PLANES_EXPLODED", 138)
			stats.set_int(MPX .. "QUADBIKE_EXPLODED", 50)
			stats.set_int(MPX .. "BICYCLE_EXPLODED", 48)
			stats.set_int(MPX .. "SUBMARINE_EXPLODED", 28)
			stats.set_int(MPX .. "TIRES_POPPED_BY_GUNSHOT", 500)
			stats.set_int(MPX .. "NUMBER_CRASHES_CARS", 300)
			stats.set_int(MPX .. "NUMBER_CRASHES_BIKES", 300)
			stats.set_int(MPX .. "BAILED_FROM_VEHICLE", 300)
			stats.set_int(MPX .. "NUMBER_CRASHES_QUADBIKES", 300)
			stats.set_int(MPX .. "NUMBER_STOLEN_COP_VEHICLE", 300)
			stats.set_int(MPX .. "NUMBER_STOLEN_CARS", 300)
			stats.set_int(MPX .. "NUMBER_STOLEN_BIKES", 300)
			stats.set_int(MPX .. "NUMBER_STOLEN_BOATS", 300)
			stats.set_int(MPX .. "NUMBER_STOLEN_HELIS", 300)
			stats.set_int(MPX .. "NUMBER_STOLEN_PLANES", 300)
			stats.set_int(MPX .. "NUMBER_STOLEN_QUADBIKES", 300)
			stats.set_int(MPX .. "NUMBER_STOLEN_BICYCLES", 300)
			stats.set_int(MPX .. "MC_CONTRIBUTION_POINTS", 1000)
			stats.set_int(MPX .. "MEMBERSMARKEDFORDEATH", 700)
			stats.set_int(MPX .. "MCKILLS", 500)
			stats.set_int(MPX .. "MCDEATHS", 700)
			stats.set_int(MPX .. "RIVALPRESIDENTKILLS", 700)
			stats.set_int(MPX .. "RIVALCEOANDVIPKILLS", 700)
			stats.set_int(MPX .. "CLUBHOUSECONTRACTSCOMPLETE", 700)
			stats.set_int(MPX .. "CLUBHOUSECONTRACTEARNINGS", 32698547)
			stats.set_int(MPX .. "CLUBCHALLENGESCOMPLETED", 700)
			stats.set_int(MPX .. "MEMBERCHALLENGESCOMPLETED", 700)
			stats.set_int(MPX .. "GHKILLS", 500)
			stats.set_int(MPX .. "HORDELVL", 10)
			stats.set_int(MPX .. "HORDKILLS", 500)
			stats.set_int(MPX .. "UNIQUECRATES", 500)
			stats.set_int(MPX .. "BJWINS", 500)
			stats.set_int(MPX .. "HORDEWINS", 500)
			stats.set_int(MPX .. "MCMWINS", 500)
			stats.set_int(MPX .. "GANGHIDWINS", 500)
			stats.set_int(MPX .. "KILLS", 800)
			stats.set_int(MPX .. "HITS_PEDS_VEHICLES", 100)
			stats.set_int(MPX .. "SHOTS", 1000)
			stats.set_int(MPX .. "HEADSHOTS", 100)
			stats.set_int(MPX .. "KILLS_ARMED", 650)
			stats.set_int(MPX .. "SUCCESSFUL_COUNTERS", 100)
			stats.set_int(MPX .. "KILLS_PLAYERS", 3593)
			stats.set_int(MPX .. "DEATHS_PLAYER", 1002)
			stats.set_int(MPX .. "KILLS_STEALTH", 100)
			stats.set_int(MPX .. "KILLS_INNOCENTS", 500)
			stats.set_int(MPX .. "KILLS_ENEMY_GANG_MEMBERS", 500)
			stats.set_int(MPX .. "KILLS_FRIENDLY_GANG_MEMBERS", 500)
			stats.set_int(MPX .. "KILLS_BY_OTHERS", 100)
			stats.set_int(MPX .. "BIGGEST_VICTIM_KILLS", 500)
			stats.set_int(MPX .. "ARCHENEMY_KILLS", 500)
			stats.set_int(MPX .. "KILLS_COP", 4500)
			stats.set_int(MPX .. "KILLS_SWAT", 500)
			stats.set_int(MPX .. "STARS_ATTAINED", 5000)
			stats.set_int(MPX .. "STARS_EVADED", 4000)
			stats.set_int(MPX .. "VEHEXPORTED", 500)
			stats.set_int(MPX .. "TOTAL_NO_SHOPS_HELD_UP", 100)
			stats.set_int(MPX .. "CR_GANGATTACK_CITY", 1000)
			stats.set_int(MPX .. "CR_GANGATTACK_COUNTRY", 1000)
			stats.set_int(MPX .. "CR_GANGATTACK_LOST", 1000)
			stats.set_int(MPX .. "CR_GANGATTACK_VAGOS", 1000)
			stats.set_int(MPX .. "NO_NON_CONTRACT_RACE_WIN", 500)
			stats.set_int(MPX .. "DIED_IN_DROWNING", 833)
			stats.set_int(MPX .. "DIED_IN_DROWNINGINVEHICLE", 833)
			stats.set_int(MPX .. "DIED_IN_EXPLOSION", 833)
			stats.set_int(MPX .. "DIED_IN_FALL", 833)
			stats.set_int(MPX .. "DIED_IN_FIRE", 833)
			stats.set_int(MPX .. "DIED_IN_ROAD", 833)
			stats.set_int(MPX .. "GRENADE_ENEMY_KILLS", 50)
			stats.set_int(MPX .. "MICROSMG_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "SMG_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "ASLTSMG_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "CRBNRIFLE_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "ADVRIFLE_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "MG_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "CMBTMG_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "ASLTMG_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "RPG_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "PISTOL_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "PLAYER_HEADSHOTS", 500)
			stats.set_int(MPX .. "SAWNOFF_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "STKYBMB_ENEMY_KILLS", 50)
			stats.set_int(MPX .. "UNARMED_ENEMY_KILLS", 50)
			stats.set_int(MPX .. "SNIPERRFL_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "HVYSNIPER_ENEMY_KILLS", 500) end)
	
	Awards1b1:add_action("ArenaWarVehicles", function()
			stats.set_int(MPX .. "AWD_50_VEHICLES_BLOWNUP", 500)
			stats.set_int(MPX .. "CARS_EXPLODED", 500)
			stats.set_int(MPX .. "AWD_CAR_EXPORT", 100)
			stats.set_int(MPX .. "AWD_FMDRIVEWITHOUTCRASH", 30)
			stats.set_int(MPX .. "AWD_PASSENGERTIME", 4)
			stats.set_int(MPX .. "AWD_TIME_IN_HELICOPTER", 4)
			stats.set_int(MPX .. "AWD_VEHICLE_JUMP_OVER_40M", 25)
			stats.set_int(MPX .. "MOST_FLIPS_IN_ONE_JUMP", 5)
			stats.set_int(MPX .. "MOST_SPINS_IN_ONE_JUMP", 5)
			stats.set_int(MPX .. "CHAR_FM_VEHICLE_1_UNLCK", -1)
			stats.set_int(MPX .. "CHAR_FM_VEHICLE_2_UNLCK", -1)
			stats.set_int(MPX .. "NO_CARS_REPAIR", 1000)
			stats.set_int(MPX .. "VEHICLES_SPRAYED", 500)
			stats.set_int(MPX .. "NUMBER_NEAR_MISS_NOCRASH", 500)
			stats.set_int(MPX .. "USJS_FOUND", 50)
			stats.set_int(MPX .. "USJS_COMPLETED", 50)
			stats.set_int(MPX .. "USJS_TOTAL_COMPLETED", 50)
			stats.set_int(MPX .. "CRDEADLINE", 5)
			stats.set_int(MPX .. "FAVOUTFITBIKETIMECURRENT", 2069146067)
			stats.set_int(MPX .. "FAVOUTFITBIKETIME1ALLTIME", 2069146067)
			stats.set_int(MPX .. "FAVOUTFITBIKETYPECURRENT", 2069146067)
			stats.set_int(MPX .. "FAVOUTFITBIKETYPEALLTIME", 2069146067)
			stats.set_int(MPX .. "LONGEST_WHEELIE_DIST", 1000)
			stats.set_int(MPX .. "RACES_WON", 50)
			stats.set_int(MPX .. "COUNT_HOTRING_RACE", 20)
			stats.set_bool(MPX .. "AWD_FMFURTHESTWHEELIE", true)
			stats.set_bool(MPX .. "AWD_FMFULLYMODDEDCAR", true) end)

	Awards1b1:add_action("Combat", function()
			stats.set_int(MPX .. "AWD_100_HEADSHOTS", 500)
			stats.set_int(MPX .. "AWD_FMOVERALLKILLS", 1000)
			stats.set_int(MPX .. "AWD_FMKILLBOUNTY", 25)
			stats.set_int(MPX .. "AWD_FM_DM_3KILLSAMEGUY", 50)
			stats.set_int(MPX .. "AWD_FM_DM_KILLSTREAK", 100)
			stats.set_int(MPX .. "AWD_FM_DM_STOLENKILL", 50)
			stats.set_int(MPX .. "AWD_FM_DM_TOTALKILLS", 500)
			stats.set_bool(MPX .. "AWD_FMKILLSTREAKSDM", true)
			stats.set_bool(MPX .. "AWD_FMMOSTKILLSGANGHIDE", true)
			stats.set_bool(MPX .. "AWD_FMMOSTKILLSSURVIVE", true)
			stats.set_int(MPX .. "AWD_FMREVENGEKILLSDM", 50)
			stats.set_int(MPX .. "AWD_KILL_CARRIER_CAPTURE", 100)
			stats.set_int(MPX .. "AWD_NIGHTVISION_KILLS", 100)
			stats.set_int(MPX .. "AWD_KILL_PSYCHOPATHS", 100)
			stats.set_int(MPX .. "AWD_TAKEDOWNSMUGPLANE", 50)
			stats.set_int(MPX .. "AWD_100_KILLS_PISTOL", 500)
			stats.set_int(MPX .. "AWD_100_KILLS_SMG", 500)
			stats.set_int(MPX .. "AWD_100_KILLS_SHOTGUN", 500)
			stats.set_int(MPX .. "ASLTRIFLE_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "AWD_100_KILLS_SNIPER", 500)
			stats.set_int(MPX .. "MG_ENEMY_KILLS", 500)
			stats.set_int(MPX .. "AWD_25_KILLS_STICKYBOMBS", 50)
			stats.set_int(MPX .. "AWD_50_KILLS_GRENADES", 50)
			stats.set_int(MPX .. "AWD_50_KILLS_ROCKETLAUNCH", 50)
			stats.set_int(MPX .. "AWD_20_KILLS_MELEE", 50)
			stats.set_int(MPX .. "AWD_CAR_BOMBS_ENEMY_KILLS", 25)
			stats.set_int(MPX .. "MELEEKILLS", 700)
			stats.set_int(MPX .. "HITS", 10000)
			stats.set_int(MPX .. "DEATHS", 499)
			stats.set_int(MPX .. "HIGHEST_SKITTLES", 900)
			stats.set_int(MPX .. "NUMBER_NEAR_MISS", 1000) end)

	Awards1b1:add_action("Heists", function()
			stats.set_int(MPX .. "AWD_FINISH_HEISTS", 50)
			stats.set_int(MPX .. "AWD_FINISH_HEIST_SETUP_JOB", 50)
			stats.set_int(MPX .. "AWD_COMPLETE_HEIST_NOT_DIE", -1)
			stats.set_bool(MPX .. "AWD_FINISH_HEIST_NO_DAMAGE", true)
			stats.set_int(MPX .. "AWD_WIN_GOLD_MEDAL_HEISTS", 25)
			stats.set_int(MPX .. "AWD_DO_HEIST_AS_MEMBER", 25)
			stats.set_int(MPX .. "AWD_DO_HEIST_AS_THE_LEADER", 25)
			stats.set_bool(MPX .. "AWD_SPLIT_HEIST_TAKE_EVENLY", true)
			stats.set_bool(MPX .. "AWD_ACTIVATE_2_PERSON_KEY", true)
			stats.set_int(MPX .. "AWD_CONTROL_CROWDS", 25)
			stats.set_bool(MPX .. "AWD_ALL_ROLES_HEIST", true)
			stats.set_int(MPX .. "HEIST_COMPLETION", 25)
			stats.set_int(MPX .. "HEISTS_ORGANISED", -1)
			stats.set_int(MPX .. "HEIST_START", -1)
			stats.set_int(MPX .. "HEIST_END", -1)
			stats.set_int(MPX .. "CUTSCENE_MID_PRISON", -1)
			stats.set_int(MPX .. "CUTSCENE_MID_HUMANE", -1)
			stats.set_int(MPX .. "CUTSCENE_MID_NARC", -1)
			stats.set_int(MPX .. "CUTSCENE_MID_ORNATE", -1)
			stats.set_int(MPX .. "CR_FLEECA_PREP_1", -1)
			stats.set_int(MPX .. "CR_FLEECA_PREP_2", -1)
			stats.set_int(MPX .. "CR_FLEECA_FINALE", -1)
			stats.set_int(MPX .. "CR_PRISON_PLANE", -1)
			stats.set_int(MPX .. "CR_PRISON_BUS", -1)
			stats.set_int(MPX .. "CR_PRISON_STATION", -1)
			stats.set_int(MPX .. "CR_PRISON_UNFINISHED_BIZ", -1)
			stats.set_int(MPX .. "CR_PRISON_FINALE", -1)
			stats.set_int(MPX .. "CR_HUMANE_KEY_CODES", -1)
			stats.set_int(MPX .. "CR_HUMANE_ARMORDILLOS", -1)
			stats.set_int(MPX .. "CR_HUMANE_EMP", -1)
			stats.set_int(MPX .. "CR_HUMANE_VALKYRIE", -1)
			stats.set_int(MPX .. "CR_HUMANE_FINALE", -1)
			stats.set_int(MPX .. "CR_NARC_COKE", -1)
			stats.set_int(MPX .. "CR_NARC_TRASH_TRUCK", -1)
			stats.set_int(MPX .. "CR_NARC_BIKERS", -1)
			stats.set_int(MPX .. "CR_NARC_WEED", -1)
			stats.set_int(MPX .. "CR_NARC_STEAL_METH", -1)
			stats.set_int(MPX .. "CR_NARC_FINALE", -1)
			stats.set_int(MPX .. "CR_PACIFIC_TRUCKS", -1)
			stats.set_int(MPX .. "CR_PACIFIC_WITSEC", -1)
			stats.set_int(MPX .. "CR_PACIFIC_HACK", -1)
			stats.set_int(MPX .. "CR_PACIFIC_BIKES", -1)
			stats.set_int(MPX .. "CR_PACIFIC_CONVOY", -1)
			stats.set_int(MPX .. "CR_PACIFIC_FINALE", -1)
			stats.set_int("MPPLY_HEIST_ACH_TRACKER", -1)
			stats.set_int("MPPLY_WIN_GOLD_MEDAL_HEISTS", 25)
			stats.set_bool("MPPLY_AWD_FLEECA_FIN", true)
			stats.set_bool("MPPLY_AWD_PRISON_FIN", true)
			stats.set_bool("MPPLY_AWD_HUMANE_FIN", true)
			stats.set_bool("MPPLY_AWD_SERIESA_FIN", true)
			stats.set_bool("MPPLY_AWD_PACIFIC_FIN", true)
			stats.set_bool("MPPLY_AWD_HST_ORDER", true)
			stats.set_bool("MPPLY_AWD_COMPLET_HEIST_MEM", true)
			stats.set_bool("MPPLY_AWD_COMPLET_HEIST_1STPER", true)
			stats.set_bool("MPPLY_AWD_HST_SAME_TEAM", true)
			stats.set_bool("MPPLY_AWD_HST_ULT_CHAL", true)
			stats.set_bool(MPX .. "AWD_MATCHING_OUTFIT_HEIST", true)
			stats.set_bool(MPX .. "HEIST_PLANNING_DONE_PRINT", true)
			stats.set_bool(MPX .. "HEIST_PLANNING_DONE_HELP_0", true)
			stats.set_bool(MPX .. "HEIST_PLANNING_DONE_HELP_1", true)
			stats.set_bool(MPX .. "HEIST_PRE_PLAN_DONE_HELP_0", true)
			stats.set_bool(MPX .. "HEIST_CUTS_DONE_FINALE", true)
			stats.set_bool(MPX .. "HEIST_IS_TUTORIAL", true)
			stats.set_bool(MPX .. "HEIST_STRAND_INTRO_DONE", true)
			stats.set_bool(MPX .. "HEIST_CUTS_DONE_ORNATE", true)
			stats.set_bool(MPX .. "HEIST_CUTS_DONE_PRISON", true)
			stats.set_bool(MPX .. "HEIST_CUTS_DONE_BIOLAB", true)
			stats.set_bool(MPX .. "HEIST_CUTS_DONE_NARCOTIC", true)
			stats.set_bool(MPX .. "HEIST_CUTS_DONE_TUTORIAL", true)
			stats.set_bool(MPX .. "HEIST_AWARD_DONE_PREP", true)
			stats.set_bool(MPX .. "HEIST_AWARD_BOUGHT_IN", true)
			stats.set_int(MPX .. "HEIST_PLANNING_STAGE", -1) end)

	Awards1b1:add_action("Doomsday", function()
			stats.set_int(MPX .. "GANGOPS_HEIST_STATUS", -1)
			stats.set_int(MPX .. "GANGOPS_HEIST_STATUS", -229384)
			stats.set_int(MPX .. "GANGOPS_FM_MISSION_PROG", -1)
			stats.set_int(MPX .. "GANGOPS_FLOW_MISSION_PROG", -1)
			stats.set_int("MPPLY_GANGOPS_ALLINORDER", 100)
			stats.set_int("MPPLY_GANGOPS_LOYALTY", 100)
			stats.set_int("MPPLY_GANGOPS_CRIMMASMD", 100)
			stats.set_int("MPPLY_GANGOPS_LOYALTY2", 100)
			stats.set_int("MPPLY_GANGOPS_LOYALTY3", 100)
			stats.set_int("MPPLY_GANGOPS_CRIMMASMD2", 100)
			stats.set_int("MPPLY_GANGOPS_CRIMMASMD3", 100)
			stats.set_int("MPPLY_GANGOPS_SUPPORT", 100)
			stats.set_int(MPX .. "CR_GANGOP_MORGUE", 10)
			stats.set_int(MPX .. "CR_GANGOP_DELUXO", 10)
			stats.set_int(MPX .. "CR_GANGOP_SERVERFARM", 10)
			stats.set_int(MPX .. "CR_GANGOP_IAABASE_FIN", 10)
			stats.set_int(MPX .. "CR_GANGOP_STEALOSPREY", 10)
			stats.set_int(MPX .. "CR_GANGOP_FOUNDRY", 10)
			stats.set_int(MPX .. "CR_GANGOP_RIOTVAN", 10)
			stats.set_int(MPX .. "CR_GANGOP_SUBMARINECAR", 10)
			stats.set_int(MPX .. "CR_GANGOP_SUBMARINE_FIN", 10)
			stats.set_int(MPX .. "CR_GANGOP_PREDATOR", 10)
			stats.set_int(MPX .. "CR_GANGOP_BMLAUNCHER", 10)
			stats.set_int(MPX .. "CR_GANGOP_BCCUSTOM", 10)
			stats.set_int(MPX .. "CR_GANGOP_STEALTHTANKS", 10)
			stats.set_int(MPX .. "CR_GANGOP_SPYPLANE", 10)
			stats.set_int(MPX .. "CR_GANGOP_FINALE", 10)
			stats.set_int(MPX .. "CR_GANGOP_FINALE_P2", 10)
			stats.set_int(MPX .. "CR_GANGOP_FINALE_P3", 10)
			stats.set_bool("MPPLY_AWD_GANGOPS_IAA", true)
			stats.set_bool("MPPLY_AWD_GANGOPS_SUBMARINE", true)
			stats.set_bool("MPPLY_AWD_GANGOPS_MISSILE", true)
			stats.set_bool("MPPLY_AWD_GANGOPS_ALLINORDER", true)
			stats.set_bool("MPPLY_AWD_GANGOPS_LOYALTY", true)
			stats.set_bool("MPPLY_AWD_GANGOPS_LOYALTY2", true)
			stats.set_bool("MPPLY_AWD_GANGOPS_LOYALTY3", true)
			stats.set_bool("MPPLY_AWD_GANGOPS_CRIMMASMD", true)
			stats.set_bool("MPPLY_AWD_GANGOPS_CRIMMASMD2", true)
			stats.set_bool("MPPLY_AWD_GANGOPS_CRIMMASMD3", true)
			stats.set_bool("MPPLY_AWD_GANGOPS_SUPPORT", true)
		for j = 0, 63 do stats.set_bool_masked(MPX .. "GANGOPSPSTAT_BOOL0", true, j, MPX) end
			stats.set_masked_int(MPX .. "DLCSMUGCHARPSTAT_INT260", 3, 16, 8)
			stats.set_masked_int(MPX .. "BUSINESSBATPSTAT_INT260", 3, 24, 8)
			stats.set_masked_int(MPX .. "BUSINESSBATPSTAT_INT260", 3, 32, 8)
			stats.set_masked_int(MPX .. "BUSINESSBATPSTAT_INT260", 3, 40, 8)
			stats.set_masked_int(MPX .. "BUSINESSBATPSTAT_INT260", 3, 48, 8) end)

	Awards1b1:add_action("After Hours", function()
			stats.set_int(MPX .. "AWD_DANCE_TO_SOLOMUN", 120)
			stats.set_int(MPX .. "AWD_DANCE_TO_TALEOFUS", 120)
			stats.set_int(MPX .. "AWD_DANCE_TO_DIXON", 120)
			stats.set_int(MPX .. "AWD_DANCE_TO_BLKMAD", 120)
			stats.set_int(MPX .. "AWD_CLUB_DRUNK", 200)
			stats.set_int(MPX .. "NIGHTCLUB_VIP_APPEAR", 700)
			stats.set_int(MPX .. "NIGHTCLUB_JOBS_DONE", 700)
			stats.set_int(MPX .. "NIGHTCLUB_EARNINGS", 5721002)
			stats.set_int(MPX .. "HUB_SALES_COMPLETED", 1001)
			stats.set_int(MPX .. "HUB_EARNINGS", 20721002)
			stats.set_int(MPX .. "DANCE_COMBO_DURATION_MINS", 3600000)
			stats.set_int(MPX .. "NIGHTCLUB_PLAYER_APPEAR", 100)
			stats.set_int(MPX .. "LIFETIME_HUB_GOODS_SOLD", 784672)
			stats.set_int(MPX .. "LIFETIME_HUB_GOODS_MADE", 507822)
			stats.set_int(MPX .. "DANCEPERFECTOWNCLUB", 120)
			stats.set_int(MPX .. "NUMUNIQUEPLYSINCLUB", 120)
			stats.set_int(MPX .. "DANCETODIFFDJS", 4)
			stats.set_int(MPX .. "NIGHTCLUB_HOTSPOT_TIME_MS", 3600000)
			stats.set_int(MPX .. "NIGHTCLUB_CONT_TOTAL", 20)
			stats.set_int(MPX .. "NIGHTCLUB_CONT_MISSION", -1)
			stats.set_int(MPX .. "CLUB_CONTRABAND_MISSION", 1000)
			stats.set_int(MPX .. "HUB_CONTRABAND_MISSION", 1000)
			stats.set_bool(MPX .. "AWD_CLUB_HOTSPOT", true)
			stats.set_bool(MPX .. "AWD_CLUB_CLUBBER", true)
			stats.set_bool(MPX .. "AWD_CLUB_COORD", true)
		for j = 0, 63 do stats.set_bool_masked(MPX.."BUSINESSBATPSTAT_BOOL0", true, j, MPX) 
						 stats.set_bool_masked(MPX.."BUSINESSBATPSTAT_BOOL1", true, j, MPX) end
		if (stats.get_masked_int(MPX.."BUSINESSBATPSTAT_INT380", 0, 8) <20) then 
		    stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT380", 20, 0, 8) end
			stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT379", 50, 8, 8)
			stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT379", 100, 16, 8) 
			stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT379", 20, 24, 8) 
			stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT379", 80, 32, 8) 
			stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT379", 60, 40, 8) 
			stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT379", 40, 48, 8) 
			stats.set_masked_int(MPX.."BUSINESSBATPSTAT_INT379", 10, 56, 8) end)

	Awards1b1:add_action("Arena War", function()
			stats.set_int(MPX .. "ARN_BS_TRINKET_TICKERS", -1)
			stats.set_int(MPX .. "ARN_BS_TRINKET_SAVED", -1)
			stats.set_int(MPX .. "AWD_WATCH_YOUR_STEP", 50)
			stats.set_int(MPX .. "AWD_TOWER_OFFENSE", 50)
			stats.set_int(MPX .. "AWD_READY_FOR_WAR", 50)
			stats.set_int(MPX .. "AWD_THROUGH_A_LENS", 50)
			stats.set_int(MPX .. "AWD_SPINNER", 50)
			stats.set_int(MPX .. "AWD_YOUMEANBOOBYTRAPS", 50)
			stats.set_int(MPX .. "AWD_MASTER_BANDITO", 50)
			stats.set_int(MPX .. "AWD_SITTING_DUCK", 50)
			stats.set_int(MPX .. "AWD_CROWDPARTICIPATION", 50)
			stats.set_int(MPX .. "AWD_KILL_OR_BE_KILLED", 50)
			stats.set_int(MPX .. "AWD_MASSIVE_SHUNT", 50)
			stats.set_int(MPX .. "AWD_YOURE_OUTTA_HERE", 200)
			stats.set_int(MPX .. "AWD_WEVE_GOT_ONE", 50)
			stats.set_int(MPX .. "AWD_ARENA_WAGEWORKER", 1000000)
			stats.set_int(MPX .. "AWD_TIME_SERVED", 1000)
			stats.set_int(MPX .. "AWD_TOP_SCORE", 55000)
			stats.set_int(MPX .. "AWD_CAREER_WINNER", 1000)
			stats.set_int(MPX .. "ARENAWARS_SP", 0)
			stats.set_int(MPX .. "ARENAWARS_SKILL_LEVEL", 20)
			stats.set_int(MPX .. "ARENAWARS_SP_LIFETIME", 100)
			stats.set_int(MPX .. "ARENAWARS_AP", 0)
			stats.set_int(MPX .. "ARENAWARS_AP_TIER", 1000)
			stats.set_int(MPX .. "ARENAWARS_AP_LIFETIME", 5055000)
			stats.set_int(MPX .. "ARENAWARS_CARRER_UNLK", -1)
			stats.set_int(MPX .. "ARN_W_THEME_SCIFI", 1000)
			stats.set_int(MPX .. "ARN_W_THEME_APOC", 1000)
			stats.set_int(MPX .. "ARN_W_THEME_CONS", 1000)
			stats.set_int(MPX .. "ARN_W_PASS_THE_BOMB", 1000)
			stats.set_int(MPX .. "ARN_W_DETONATION", 1000)
			stats.set_int(MPX .. "ARN_W_ARCADE_RACE", 1000)
			stats.set_int(MPX .. "ARN_W_CTF", 1000)
			stats.set_int(MPX .. "ARN_W_TAG_TEAM", 1000)
			stats.set_int(MPX .. "ARN_W_DESTR_DERBY", 1000)
			stats.set_int(MPX .. "ARN_W_CARNAGE", 1000)
			stats.set_int(MPX .. "ARN_W_MONSTER_JAM", 1000)
			stats.set_int(MPX .. "ARN_W_GAMES_MASTERS", 1000)
			stats.set_int(MPX .. "ARN_L_PASS_THE_BOMB", 500)
			stats.set_int(MPX .. "ARN_L_DETONATION", 500)
			stats.set_int(MPX .. "ARN_L_ARCADE_RACE", 500)
			stats.set_int(MPX .. "ARN_L_CTF", 500)
			stats.set_int(MPX .. "ARN_L_TAG_TEAM", 500)
			stats.set_int(MPX .. "ARN_L_DESTR_DERBY", 500)
			stats.set_int(MPX .. "ARN_L_CARNAGE", 500)
			stats.set_int(MPX .. "ARN_L_MONSTER_JAM", 500)
			stats.set_int(MPX .. "ARN_L_GAMES_MASTERS", 500)
			stats.set_int(MPX .. "NUMBER_OF_CHAMP_BOUGHT", 1000)
			stats.set_int(MPX .. "ARN_SPECTATOR_KILLS", 1000)
			stats.set_int(MPX .. "ARN_LIFETIME_KILLS", 1000)
			stats.set_int(MPX .. "ARN_LIFETIME_DEATHS", 500)
			stats.set_int(MPX .. "ARENAWARS_CARRER_WINS", 1000)
			stats.set_int(MPX .. "ARENAWARS_CARRER_WINT", 1000)
			stats.set_int(MPX .. "ARENAWARS_MATCHES_PLYD", 1000)
			stats.set_int(MPX .. "ARENAWARS_MATCHES_PLYDT", 1000)
			stats.set_int(MPX .. "ARN_SPEC_BOX_TIME_MS", 86400000)
			stats.set_int(MPX .. "ARN_SPECTATOR_DRONE", 1000)
			stats.set_int(MPX .. "ARN_SPECTATOR_CAMS", 1000)
			stats.set_int(MPX .. "ARN_SMOKE", 1000)
			stats.set_int(MPX .. "ARN_DRINK", 1000)
			stats.set_int(MPX .. "ARN_VEH_MONSTER", 1000)
			stats.set_int(MPX .. "ARN_VEH_MONSTER", 1000)
			stats.set_int(MPX .. "ARN_VEH_MONSTER", 1000)
			stats.set_int(MPX .. "ARN_VEH_CERBERUS", 1000)
			stats.set_int(MPX .. "ARN_VEH_CERBERUS2", 1000)
			stats.set_int(MPX .. "ARN_VEH_CERBERUS3", 1000)
			stats.set_int(MPX .. "ARN_VEH_BRUISER", 1000)
			stats.set_int(MPX .. "ARN_VEH_BRUISER2", 1000)
			stats.set_int(MPX .. "ARN_VEH_BRUISER3", 1000)
			stats.set_int(MPX .. "ARN_VEH_SLAMVAN4", 1000)
			stats.set_int(MPX .. "ARN_VEH_SLAMVAN5", 1000)
			stats.set_int(MPX .. "ARN_VEH_SLAMVAN6", 1000)
			stats.set_int(MPX .. "ARN_VEH_BRUTUS", 1000)
			stats.set_int(MPX .. "ARN_VEH_BRUTUS2", 1000)
			stats.set_int(MPX .. "ARN_VEH_BRUTUS3", 1000)
			stats.set_int(MPX .. "ARN_VEH_SCARAB", 1000)
			stats.set_int(MPX .. "ARN_VEH_SCARAB2", 1000)
			stats.set_int(MPX .. "ARN_VEH_SCARAB3", 1000)
			stats.set_int(MPX .. "ARN_VEH_DOMINATOR4", 1000)
			stats.set_int(MPX .. "ARN_VEH_DOMINATOR5", 1000)
			stats.set_int(MPX .. "ARN_VEH_DOMINATOR6", 1000)
			stats.set_int(MPX .. "ARN_VEH_IMPALER2", 1000)
			stats.set_int(MPX .. "ARN_VEH_IMPALER3", 1000)
			stats.set_int(MPX .. "ARN_VEH_IMPALER4", 1000)
			stats.set_int(MPX .. "ARN_VEH_ISSI4", 1000)
			stats.set_int(MPX .. "ARN_VEH_ISSI5", 1000)
			stats.set_int(MPX .. "ARN_VEH_ISSI", 61000)
			stats.set_int(MPX .. "ARN_VEH_IMPERATOR", 1000)
			stats.set_int(MPX .. "ARN_VEH_IMPERATOR2", 1000)
			stats.set_int(MPX .. "ARN_VEH_IMPERATOR3", 1000)
			stats.set_int(MPX .. "ARN_VEH_ZR380", 1000)
			stats.set_int(MPX .. "ARN_VEH_ZR3802", 1000)
			stats.set_int(MPX .. "ARN_VEH_ZR3803", 1000)
			stats.set_int(MPX .. "ARN_VEH_DEATHBIKE", 1000)
			stats.set_int(MPX .. "ARN_VEH_DEATHBIKE2", 1000)
			stats.set_int(MPX .. "ARN_VEH_DEATHBIKE3", 1000)
			stats.set_bool(MPX .. "AWD_BEGINNER", true)
			stats.set_bool(MPX .. "AWD_FIELD_FILLER", true)
			stats.set_bool(MPX .. "AWD_ARMCHAIR_RACER", true)
			stats.set_bool(MPX .. "AWD_LEARNER", true)
			stats.set_bool(MPX .. "AWD_SUNDAY_DRIVER", true)
			stats.set_bool(MPX .. "AWD_THE_ROOKIE", true)
			stats.set_bool(MPX .. "AWD_BUMP_AND_RUN", true)
			stats.set_bool(MPX .. "AWD_GEAR_HEAD", true)
			stats.set_bool(MPX .. "AWD_DOOR_SLAMMER", true)
			stats.set_bool(MPX .. "AWD_HOT_LAP", true)
			stats.set_bool(MPX .. "AWD_ARENA_AMATEUR", true)
			stats.set_bool(MPX .. "AWD_PAINT_TRADER", true)
			stats.set_bool(MPX .. "AWD_SHUNTER", true)
			stats.set_bool(MPX .. "AWD_JOCK", true)
			stats.set_bool(MPX .. "AWD_WARRIOR", true)
			stats.set_bool(MPX .. "AWD_T_BONE", true)
			stats.set_bool(MPX .. "AWD_MAYHEM", true)
			stats.set_bool(MPX .. "AWD_WRECKER", true)
			stats.set_bool(MPX .. "AWD_CRASH_COURSE", true)
			stats.set_bool(MPX .. "AWD_ARENA_LEGEND", true)
			stats.set_bool(MPX .. "AWD_PEGASUS", true)
			stats.set_bool(MPX .. "AWD_UNSTOPPABLE", true)
			stats.set_bool(MPX .. "AWD_CONTACT_SPORT", true)
			stats.set_masked_int(MPX.."ARENAWARSPSTAT_INT", 1, 35, 8)
		for i = 0, 8 do for j = 0, 63 do stats.set_bool_masked(MPX.."ARENAWARSPSTAT_BOOL"..i, true, j, MPX) end end end)

	Awards1b1:add_action("Diamond Casino n Resort", function()
			stats.set_int(MPX .. "AWD_ODD_JOBS", 50)
			stats.set_int(MPX .. "VCM_FLOW_PROGRESS", -1)
			stats.set_int(MPX .. "VCM_STORY_PROGRESS", 5)
			stats.set_bool(MPX .. "AWD_FIRST_TIME1", true)
			stats.set_bool(MPX .. "AWD_FIRST_TIME2", true)
			stats.set_bool(MPX .. "AWD_FIRST_TIME3", true)
			stats.set_bool(MPX .. "AWD_FIRST_TIME4", true)
			stats.set_bool(MPX .. "AWD_FIRST_TIME5", true)
			stats.set_bool(MPX .. "AWD_FIRST_TIME6", true)
			stats.set_bool(MPX .. "AWD_ALL_IN_ORDER", true)
			stats.set_bool(MPX .. "AWD_SUPPORTING_ROLE", true)
			stats.set_bool(MPX .. "AWD_LEADER", true)
			stats.set_bool(MPX .. "AWD_SURVIVALIST", true)
			Paragon = stats.get_bool(MPX .. "CAS_VEHICLE_REWARD") if Paragon == true then 
					  stats.set_bool(MPX .. "CAS_VEHICLE_REWARD", true) else 
					  stats.set_bool(MPX .. "CAS_VEHICLE_REWARD", false) end
		for i = 0, 6 do for j = 0, 63 do stats.set_bool_masked(MPX.."CASINOPSTAT_BOOL"..i, true, j, MPX) end end end)

	Awards1b1:add_action("Diamond Casino Heist", function()
			stats.set_int(MPX .. "CAS_HEIST_NOTS", -1)
			stats.set_int(MPX .. "CAS_HEIST_FLOW", -1)
			stats.set_int(MPX .. "SIGNAL_JAMMERS_COLLECTED", 50)
			stats.set_int(MPX .. "AWD_PREPARATION", 40)
			stats.set_int(MPX .. "AWD_ASLEEPONJOB", 20)
			stats.set_int(MPX .. "AWD_DAICASHCRAB", 100000)
			stats.set_int(MPX .. "AWD_BIGBRO", 40)
			stats.set_int(MPX .. "AWD_SHARPSHOOTER", 40)
			stats.set_int(MPX .. "AWD_RACECHAMP", 40)
			stats.set_int(MPX .. "AWD_BATSWORD", 1000000)
			stats.set_int(MPX .. "AWD_COINPURSE", 950000)
			stats.set_int(MPX .. "AWD_ASTROCHIMP", 3000000)
			stats.set_int(MPX .. "AWD_MASTERFUL", 40000)
			stats.set_int(MPX .. "H3_BOARD_DIALOGUE0", -1)
			stats.set_int(MPX .. "H3_BOARD_DIALOGUE1", -1)
			stats.set_int(MPX .. "H3_BOARD_DIALOGUE2", -1)
			stats.set_int(MPX .. "H3_VEHICLESUSED", -1)
			stats.set_int(MPX .. "H3_CR_STEALTH_1A", 100)
			stats.set_int(MPX .. "H3_CR_STEALTH_2B_RAPP", 100)
			stats.set_int(MPX .. "H3_CR_STEALTH_2C_SIDE", 100)
			stats.set_int(MPX .. "H3_CR_STEALTH_3A", 100)
			stats.set_int(MPX .. "H3_CR_STEALTH_4A", 100)
			stats.set_int(MPX .. "H3_CR_STEALTH_5A", 100)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_1A", 100)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_2A", 100)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_2B", 100)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_3A", 100)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_3B", 100)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_4A", 100)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_5A", 100)
			stats.set_int(MPX .. "H3_CR_DIRECT_1A", 100)
			stats.set_int(MPX .. "H3_CR_DIRECT_2A1", 100)
			stats.set_int(MPX .. "H3_CR_DIRECT_2A2", 100)
			stats.set_int(MPX .. "H3_CR_DIRECT_2BP", 100)
			stats.set_int(MPX .. "H3_CR_DIRECT_2C", 100)
			stats.set_int(MPX .. "H3_CR_DIRECT_3A", 100)
			stats.set_int(MPX .. "H3_CR_DIRECT_4A", 100)
			stats.set_int(MPX .. "H3_CR_DIRECT_5A", 100)
			stats.set_int(MPX .. "CR_ORDER", 100)
			stats.set_bool(MPX .. "AWD_SCOPEOUT", true)
			stats.set_bool(MPX .. "AWD_CREWEDUP", true)
			stats.set_bool(MPX .. "AWD_MOVINGON", true)
			stats.set_bool(MPX .. "AWD_PROMOCAMP", true)
			stats.set_bool(MPX .. "AWD_GUNMAN", true)
			stats.set_bool(MPX .. "AWD_SMASHNGRAB", true)
			stats.set_bool(MPX .. "AWD_INPLAINSI", true)
			stats.set_bool(MPX .. "AWD_UNDETECTED", true)
			stats.set_bool(MPX .. "AWD_ALLROUND", true)
			stats.set_bool(MPX .. "AWD_ELITETHEIF", true)
			stats.set_bool(MPX .. "AWD_PRO", true)
			stats.set_bool(MPX .. "AWD_SUPPORTACT", true)
			stats.set_bool(MPX .. "AWD_SHAFTED", true)
			stats.set_bool(MPX .. "AWD_COLLECTOR", true)
			stats.set_bool(MPX .. "AWD_DEADEYE", true)
			stats.set_bool(MPX .. "AWD_PISTOLSATDAWN", true)
			stats.set_bool(MPX .. "AWD_TRAFFICAVOI", true)
			stats.set_bool(MPX .. "AWD_CANTCATCHBRA", true)
			stats.set_bool(MPX .. "AWD_WIZHARD", true)
			stats.set_bool(MPX .. "AWD_APEESCAPE", true)
			stats.set_bool(MPX .. "AWD_MONKEYKIND", true)
			stats.set_bool(MPX .. "AWD_AQUAAPE", true)
			stats.set_bool(MPX .. "AWD_KEEPFAITH", true)
			stats.set_bool(MPX .. "AWD_TRUELOVE", true)
			stats.set_bool(MPX .. "AWD_NEMESIS", true)
			stats.set_bool(MPX .. "AWD_FRIENDZONED", true)
			stats.set_bool(MPX .. "VCM_FLOW_CS_RSC_SEEN", true)
			stats.set_bool(MPX .. "VCM_FLOW_CS_BWL_SEEN", true)
			stats.set_bool(MPX .. "VCM_FLOW_CS_MTG_SEEN", true)
			stats.set_bool(MPX .. "VCM_FLOW_CS_OIL_SEEN", true)
			stats.set_bool(MPX .. "VCM_FLOW_CS_DEF_SEEN", true)
			stats.set_bool(MPX .. "VCM_FLOW_CS_FIN_SEEN", true)
			stats.set_bool(MPX .. "HELP_FURIA", true)
			stats.set_bool(MPX .. "HELP_MINITAN", true)
			stats.set_bool(MPX .. "HELP_YOSEMITE2", true)
			stats.set_bool(MPX .. "HELP_ZHABA", true)
			stats.set_bool(MPX .. "HELP_IMORGEN", true)
			stats.set_bool(MPX .. "HELP_SULTAN2", true)
			stats.set_bool(MPX .. "HELP_VAGRANT", true)
			stats.set_bool(MPX .. "HELP_VSTR", true)
			stats.set_bool(MPX .. "HELP_STRYDER", true)
			stats.set_bool(MPX .. "HELP_SUGOI", true)
			stats.set_bool(MPX .. "HELP_KANJO", true)
			stats.set_bool(MPX .. "HELP_FORMULA", true)
			stats.set_bool(MPX .. "HELP_FORMULA2", true)
			stats.set_bool(MPX .. "HELP_JB7002", true)
		for i = 0, 4 do for j = 0, 63 do stats.set_bool_masked(MPX.."CASINOHSTPSTAT_BOOL"..i, true, j, MPX) end end end)

	Awards1b1:add_action("Arcade", function()
			stats.set_int(MPX .. "AWD_PREPARATION", 50)
			stats.set_int(MPX .. "AWD_ASLEEPONJOB", 20)
			stats.set_int(MPX .. "AWD_DAICASHCRAB", 100000)
			stats.set_int(MPX .. "AWD_BIGBRO", 40)
			stats.set_int(MPX .. "AWD_SHARPSHOOTER", 40)
			stats.set_int(MPX .. "AWD_RACECHAMP", 40)
			stats.set_int(MPX .. "AWD_BATSWORD", 1000000)
			stats.set_int(MPX .. "AWD_COINPURSE", 950000)
			stats.set_int(MPX .. "AWD_ASTROCHIMP", 3000000)
			stats.set_int(MPX .. "AWD_MASTERFUL", 40000)
			stats.set_int(MPX .. "SCGW_NUM_WINS_GANG_0", 50)
			stats.set_int(MPX .. "SCGW_NUM_WINS_GANG_1", 50)
			stats.set_int(MPX .. "SCGW_NUM_WINS_GANG_2", 50)
			stats.set_int(MPX .. "SCGW_NUM_WINS_GANG_3", 50)
			stats.set_int(MPX .. "CH_ARC_CAB_CLAW_TROPHY", -1)
			stats.set_int(MPX .. "CH_ARC_CAB_LOVE_TROPHY", -1)
			stats.set_int(MPX .. "IAP_MAX_MOON_DIST", 2147483647)
			stats.set_int(MPX .. "SCGW_INITIALS_0", 69644)
			stats.set_int(MPX .. "SCGW_INITIALS_1", 50333)
			stats.set_int(MPX .. "SCGW_INITIALS_2", 63512)
			stats.set_int(MPX .. "SCGW_INITIALS_3", 46136)
			stats.set_int(MPX .. "SCGW_INITIALS_4", 21638)
			stats.set_int(MPX .. "SCGW_INITIALS_5", 2133)
			stats.set_int(MPX .. "SCGW_INITIALS_6", 1215)
			stats.set_int(MPX .. "SCGW_INITIALS_7", 2444)
			stats.set_int(MPX .. "SCGW_INITIALS_8", 38023)
			stats.set_int(MPX .. "SCGW_INITIALS_9", 2233)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_0",0)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_1", 64)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_2", 8457)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_3", 91275)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_4", 53260)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_5", 78663)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_6", 25103)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_7", 102401)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_8", 12672)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_9", 74380)
			stats.set_int(MPX .. "FOOTAGE_SCORE_0", 284544)
			stats.set_int(MPX .. "FOOTAGE_SCORE_1", 275758)
			stats.set_int(MPX .. "FOOTAGE_SCORE_2", 100000)
			stats.set_int(MPX .. "FOOTAGE_SCORE_3", 90000)
			stats.set_int(MPX .. "FOOTAGE_SCORE_4", 80000)
			stats.set_int(MPX .. "FOOTAGE_SCORE_5", 70000)
			stats.set_int(MPX .. "FOOTAGE_SCORE_6", 60000)
			stats.set_int(MPX .. "FOOTAGE_SCORE_7", 50000)
			stats.set_int(MPX .. "FOOTAGE_SCORE_8", 40000)
			stats.set_int(MPX .. "FOOTAGE_SCORE_9", 30000)
		for i = 0, 9 do stats.set_int(MPX .. "IAP_INITIALS_"..i, 50) 
			stats.set_int(MPX .. "IAP_SCORE_"..i, 50) 
			stats.set_int(MPX .. "IAP_SCORE_"..i, 50) 
			stats.set_int(MPX .. "SCGW_SCORE_"..i, 50) 
			stats.set_int(MPX .. "DG_DEFENDER_INITIALS_"..i, 69644) 
			stats.set_int(MPX .. "DG_DEFENDER_SCORE_"..i, 50) 
			stats.set_int(MPX .. "DG_MONKEY_INITIALS_"..i, 69644) 
			stats.set_int(MPX .. "DG_MONKEY_SCORE_"..i, 50) 
			stats.set_int(MPX .. "DG_PENETRATOR_INITIALS_"..i, 69644) 
			stats.set_int(MPX .. "DG_PENETRATOR_SCORE_"..i, 50) 
			stats.set_int(MPX .. "GGSM_INITIALS_"..i, 69644) 
			stats.set_int(MPX .. "GGSM_SCORE_"..i, 50) 
			stats.set_int(MPX .. "TWR_INITIALS_"..i, 69644) 
			stats.set_int(MPX .. "TWR_SCORE_"..i, 50) end 
			stats.set_bool(MPX .. "AWD_SCOPEOUT", true)
			stats.set_bool(MPX .. "AWD_CREWEDUP", true)
			stats.set_bool(MPX .. "AWD_MOVINGON", true)
			stats.set_bool(MPX .. "AWD_PROMOCAMP", true)
			stats.set_bool(MPX .. "AWD_GUNMAN", true)
			stats.set_bool(MPX .. "AWD_SMASHNGRAB", true)
			stats.set_bool(MPX .. "AWD_INPLAINSI", true)
			stats.set_bool(MPX .. "AWD_UNDETECTED", true)
			stats.set_bool(MPX .. "AWD_ALLROUND", true)
			stats.set_bool(MPX .. "AWD_ELITETHEIF", true)
			stats.set_bool(MPX .. "AWD_PRO", true)
			stats.set_bool(MPX .. "AWD_SUPPORTACT", true)
			stats.set_bool(MPX .. "AWD_SHAFTED", true)
			stats.set_bool(MPX .. "AWD_COLLECTOR", true)
			stats.set_bool(MPX .. "AWD_DEADEYE", true)
			stats.set_bool(MPX .. "AWD_PISTOLSATDAWN", true)
			stats.set_bool(MPX .. "AWD_TRAFFICAVOI", true)
			stats.set_bool(MPX .. "AWD_CANTCATCHBRA", true)
			stats.set_bool(MPX .. "AWD_WIZHARD", true)
			stats.set_bool(MPX .. "AWD_APEESCAP", true)
			stats.set_bool(MPX .. "AWD_MONKEYKIND", true)
			stats.set_bool(MPX .. "AWD_AQUAAPE", true)
			stats.set_bool(MPX .. "AWD_KEEPFAITH", true)
			stats.set_bool(MPX .. "AWD_TRUELOVE", true)
			stats.set_bool(MPX .. "AWD_NEMESIS", true)
			stats.set_bool(MPX .. "AWD_FRIENDZONED", true)
			stats.set_bool(MPX .. "IAP_CHALLENGE_0", true)
			stats.set_bool(MPX .. "IAP_CHALLENGE_1", true)
			stats.set_bool(MPX .. "IAP_CHALLENGE_2", true)
			stats.set_bool(MPX .. "IAP_CHALLENGE_3", true)
			stats.set_bool(MPX .. "IAP_CHALLENGE_4", true)
			stats.set_bool(MPX .. "IAP_GOLD_TANK", true)
			stats.set_bool(MPX .. "SCGW_WON_NO_DEATHS", true)
		for j = 290449, 290468 do globals.set_int(j, 1) end 
		for i = 0, 4 do for j = 0, 63 do stats.set_bool_masked(MPX.."CASINOHSTPSTAT_BOOL"..i, true, j, MPX) end end 
		for i = 0, 6 do for j = 0, 63 do stats.set_bool_masked(MPX.."CASINOPSTAT_BOOL"..i, true, j, MPX) end end end)

	Awards1b1:add_action("LS Summer Special", function()
			stats.set_bool(MPX .. "AWD_KINGOFQUB3D", true)
			stats.set_bool(MPX .. "AWD_QUBISM", true)
			stats.set_bool(MPX .. "AWD_QUIBITS", true)
			stats.set_bool(MPX .. "AWD_GODOFQUB3D", true)
			stats.set_bool(MPX .. "AWD_ELEVENELEVEN", true)
			stats.set_bool(MPX .. "AWD_GOFOR11TH", true)
			stats.set_masked_int(MPX.."SU20PSTAT_INT", 1, 35, 8)
		for i = 0, 1 do for j = 0, 63 do stats.set_bool_masked(MPX.."SU20PSTAT_BOOL"..i, true, j, MPX) 
										 stats.set_bool_masked(MPX.."SU20TATTOOSTAT_BOOL"..i, true, j, MPX) end end end)

	Awards1b1:add_action("Cayo Perico", function()
			stats.set_bool(MPX .. "AWD_INTELGATHER", true)
			stats.set_bool(MPX .. "AWD_COMPOUNDINFILT", true)
			stats.set_bool(MPX .. "AWD_LOOT_FINDER", true)
			stats.set_bool(MPX .. "AWD_MAX_DISRUPT", true)
			stats.set_bool(MPX .. "AWD_THE_ISLAND_HEIST", true)
			stats.set_bool(MPX .. "AWD_GOING_ALONE", true)
			stats.set_bool(MPX .. "AWD_TEAM_WORK", true)
			stats.set_bool(MPX .. "AWD_MIXING_UP", true)
			stats.set_bool(MPX .. "AWD_TEAM_WORK", true)
			stats.set_bool(MPX .. "AWD_MIXING_UP", true)
			stats.set_bool(MPX .. "AWD_PRO_THIEF", true)
			stats.set_bool(MPX .. "AWD_CAT_BURGLAR", true)
			stats.set_bool(MPX .. "AWD_ONE_OF_THEM", true)
			stats.set_bool(MPX .. "AWD_GOLDEN_GUN", true)
			stats.set_bool(MPX .. "AWD_ELITE_THIEF", true)
			stats.set_bool(MPX .. "AWD_PROFESSIONAL", true)
			stats.set_bool(MPX .. "AWD_HELPING_OUT", true)
			stats.set_bool(MPX .. "AWD_COURIER", true)
			stats.set_bool(MPX .. "AWD_PARTY_VIBES", true)
			stats.set_bool(MPX .. "AWD_HELPING_HAND", true)
			stats.set_bool(MPX .. "AWD_ELEVENELEVEN", true)
			stats.set_bool(MPX .. "COMPLETE_H4_F_USING_VETIR", true)
			stats.set_bool(MPX .. "COMPLETE_H4_F_USING_LONGFIN", true)
			stats.set_bool(MPX .. "COMPLETE_H4_F_USING_ANNIH", true)
			stats.set_bool(MPX .. "COMPLETE_H4_F_USING_ALKONOS", true)
			stats.set_bool(MPX .. "COMPLETE_H4_F_USING_PATROLB", true)
			stats.set_int(MPX .. "AWD_LOSTANDFOUND", 500000)
			stats.set_int(MPX .. "AWD_SUNSET", 1800000)
			stats.set_int(MPX .. "AWD_TREASURE_HUNTER", 1000000)
			stats.set_int(MPX .. "AWD_WRECK_DIVING", 1000000)
			stats.set_int(MPX .. "AWD_KEINEMUSIK", 1800000)
			stats.set_int(MPX .. "AWD_PALMS_TRAX", 1800000)
			stats.set_int(MPX .. "AWD_MOODYMANN", 1800000)
			stats.set_int(MPX .. "AWD_FILL_YOUR_BAGS", 1000000000)
			stats.set_int(MPX .. "AWD_WELL_PREPARED", 80)
			stats.set_int(MPX .. "H4_H4_DJ_MISSIONS", -1)
			stats.set_int(MPX .. "H4CNF_APPROACH", -1)
			stats.set_int(MPX .. "H4_MISSIONS", -1)
			stats.set_int(MPX .. "H4_PLAYTHROUGH_STATUS", 100)
		for i = 0, 2 do for j = 0, 63 do stats.set_bool_masked(MPX.."HISLANDPSTAT_BOOL"..i, true, j, MPX) end end end)

	Awards1b1:add_action("LS Tuners", function()
			stats.set_int(MPX .. "AWD_CAR_CLUB_MEM", 100)
			stats.set_int(MPX .. "AWD_SPRINTRACER", 50)
			stats.set_int(MPX .. "AWD_STREETRACER", 50)
			stats.set_int(MPX .. "AWD_PURSUITRACER", 50)
			stats.set_int(MPX .. "AWD_TEST_CAR", 240)
			stats.set_int(MPX .. "AWD_AUTO_SHOP", 50)	
			stats.set_int(MPX .. "AWD_GROUNDWORK", 40)
			stats.set_int(MPX .. "AWD_CAR_EXPORT", 100)
			stats.set_int(MPX .. "AWD_ROBBERY_CONTRACT", 100)
			stats.set_int(MPX .. "AWD_FACES_OF_DEATH", 100)
			stats.set_bool(MPX .. "AWD_CAR_CLUB", true)
			stats.set_bool(MPX .. "AWD_PRO_CAR_EXPORT", true)
			stats.set_bool(MPX .. "AWD_UNION_DEPOSITORY", true)
			stats.set_bool(MPX .. "AWD_MILITARY_CONVOY", true)
			stats.set_bool(MPX .. "AWD_FLEECA_BANK", true)
			stats.set_bool(MPX .. "AWD_FREIGHT_TRAIN", true)
			stats.set_bool(MPX .. "AWD_BOLINGBROKE_ASS", true)
			stats.set_bool(MPX .. "AWD_IAA_RAID", true)
			stats.set_bool(MPX .. "AWD_METH_JOB", true)
			stats.set_bool(MPX .. "AWD_BUNKER_RAID", true)
			stats.set_bool(MPX .. "AWD_STRAIGHT_TO_VIDEO", true)
			stats.set_bool(MPX .. "AWD_MONKEY_C_MONKEY_DO", true)
			stats.set_bool(MPX .. "AWD_TRAINED_TO_KILL", true)
			stats.set_bool(MPX .. "AWD_DIRECTOR", true)
		for i = 0, 8 do for j = 0, 63 do stats.set_bool_masked(MPX.."TUNERPSTAT_BOOL"..i, true, j, MPX) end end end)

	Awards1b1:add_action("Contract", function()
			stats.set_int(MPX .. "AWD_CONTRACTOR", 50)
			stats.set_int(MPX .. "AWD_COLD_CALLER", 50)
			stats.set_int(MPX .. "AWD_PRODUCER", 60)
			stats.set_int(MPX .. "FIXERTELEPHONEHITSCOMPL", 10)
			stats.set_int(MPX .. "PAYPHONE_BONUS_KILL_METHOD", 10)
			stats.set_int(MPX .. "PAYPHONE_BONUS_KILL_METHOD", -1)
			stats.set_int(MPX .. "FIXER_GENERAL_BS", -1)
			stats.set_int(MPX .. "FIXER_COMPLETED_BS", -1)
			stats.set_int(MPX .. "FIXER_STORY_BS", -1)
			stats.set_int(MPX .. "FIXER_STORY_STRAND", -1)
			stats.set_int(MPX .. "FIXER_STORY_COOLDOWN", -1)
			stats.set_int(MPX .. "FIXER_COUNT", 510)
			stats.set_int(MPX .. "FIXER_SC_VEH_RECOVERED", 85)
			stats.set_int(MPX .. "FIXER_SC_VAL_RECOVERED", 85)
			stats.set_int(MPX .. "FIXER_SC_GANG_TERMINATED", 85)
			stats.set_int(MPX .. "FIXER_SC_VIP_RESCUED", 85)
			stats.set_int(MPX .. "FIXER_SC_ASSETS_PROTECTED", 85)
			stats.set_int(MPX .. "FIXER_SC_EQ_DESTROYED", 85)
			stats.set_int(MPX .. "FIXER_EARNINGS", 19734860)
			stats.set_bool(MPX .. "AWD_TEEING_OFF", true)
			stats.set_bool(MPX .. "AWD_PARTY_NIGHT", true)
			stats.set_bool(MPX .. "AWD_BILLIONAIRE_GAMES", true)
			stats.set_bool(MPX .. "AWD_HOOD_PASS", true)
			stats.set_bool(MPX .. "AWD_STUDIO_TOUR", true)
			stats.set_bool(MPX .. "AWD_DONT_MESS_DRE", true)
			stats.set_bool(MPX .. "AWD_BACKUP", true)
			stats.set_bool(MPX .. "AWD_SHORTFRANK_1", true)
			stats.set_bool(MPX .. "AWD_SHORTFRANK_2", true)
			stats.set_bool(MPX .. "AWD_SHORTFRANK_3", true)
			stats.set_bool(MPX .. "AWD_CONTR_KILLER", true)
			stats.set_bool(MPX .. "AWD_DOGS_BEST_FRIEND", true)
			stats.set_bool(MPX .. "AWD_MUSIC_STUDIO", true)
			stats.set_bool(MPX .. "AWD_SHORTLAMAR_1", true)
			stats.set_bool(MPX .. "AWD_SHORTLAMAR_2", true)
			stats.set_bool(MPX .. "AWD_SHORTLAMAR_3", true)
			stats.set_bool(MPX .. "BS_FRANKLIN_DIALOGUE_0", true)
			stats.set_bool(MPX .. "BS_FRANKLIN_DIALOGUE_1", true)
			stats.set_bool(MPX .. "BS_FRANKLIN_DIALOGUE_2", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_SETUP", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_STRAND", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_PARTY", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_PARTY_2", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_PARTY_F", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_BILL", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_BILL_2", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_BILL_F", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_HOOD", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_HOOD_2", true)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_HOOD_F", true)
		for j = 0, 63 do stats.set_bool_masked(MPX.."FIXERPSTAT_BOOL0", true, j, MPX) 
						 stats.set_bool_masked(MPX.."FIXERPSTAT_BOOL1", true, j, MPX) 
						 stats.set_bool_masked(MPX.."FIXERTATTOOSTAT_BOOL0", true, j, MPX) end end)
						 
	Awards1b1:add_action("Drug Wars", function() 
			stats.set_bool(MPX .. "AWD_ACELIQUOR", true)
			stats.set_bool(MPX .. "AWD_TRUCKAMBUSH", true)
			stats.set_bool(MPX .. "AWD_LOSTCAMPREV", true)
			stats.set_bool(MPX .. "AWD_ACIDTRIP", true)
			stats.set_bool(MPX .. "AWD_HIPPYRIVALS", true)
			stats.set_bool(MPX .. "AWD_TRAINCRASH", true)
			stats.set_bool(MPX .. "AWD_BACKUPB", true)
			stats.set_bool(MPX .. "AWD_GETSTARTED", true)
			stats.set_bool(MPX .. "AWD_CHEMREACTION", true)
			stats.set_bool(MPX .. "AAWD_WAREHODEFEND", true)
			stats.set_bool(MPX .. "AWD_ATTACKINVEST", true)
			stats.set_bool(MPX .. "AWD_RESCUECOOK", true)
			stats.set_bool(MPX .. "AWD_DRUGTRIPREHAB", true)
			stats.set_bool(MPX .. "AWD_CARGOPLANE", true)
			stats.set_bool(MPX .. "AWD_BACKUPB2", true)
			stats.set_bool(MPX .. "AWD_TAXISTAR", true)
			stats.set_int(MPX .. "AWD_RUNRABBITRUN", 5)
			stats.set_int(MPX .. "AWD_CALLME", 50)
			stats.set_int(MPX .. "AWD_CHEMCOMPOUNDS", 50) end)
	
	Awards:add_action("Reset All", function()
			stats.set_int(MPX .. "AWD_FM_DM_WINS", 0)
			stats.set_int(MPX .. "AWD_FM_TDM_WINS", 0)
			stats.set_int(MPX .. "AWD_FM_TDM_MVP", 0)
			stats.set_int(MPX .. "AWD_RACES_WON", 0)
			stats.set_int(MPX .. "AWD_FMWINAIRRACE", 0)
			stats.set_int(MPX .. "AWD_FMWINSEARACE", 0)
			stats.set_int(MPX .. "AWD_FM_GTA_RACES_WON", 0)
			stats.set_int(MPX .. "AWD_FMRALLYWONDRIVE", 0)
			stats.set_int(MPX .. "AWD_FMRALLYWONNAV", 0)
			stats.set_int(MPX .. "AWD_FMWINRACETOPOINTS", 0)
			stats.set_int(MPX .. "AWD_FM_RACE_LAST_FIRST", 0)
			stats.set_int(MPX .. "AWD_FM_RACES_FASTEST_LAP", 0)
			stats.set_int(MPX .. "AWD_FMHORDWAVESSURVIVE", 0)
			stats.set_int(MPX .. "NUMBER_SLIPSTREAMS_IN_RACE", 0)
			stats.set_int(MPX .. "NUMBER_TURBO_STARTS_IN_RACE", 0)
			stats.set_int(MPX .. "AWD_NO_ARMWRESTLING_WINS", 0)
			stats.set_int(MPX .. "MOST_ARM_WRESTLING_WINS", 0)
			stats.set_int(MPX .. "AWD_WIN_AT_DARTS", 0)
			stats.set_int(MPX .. "AWD_FM_GOLF_WON", 0)
			stats.set_int(MPX .. "AWD_FM_TENNIS_WON", 0)
			stats.set_int(MPX .. "AWD_FM_SHOOTRANG_CT_WON", 0)
			stats.set_int(MPX .. "AWD_FM_SHOOTRANG_RT_WON", 0)
			stats.set_int(MPX .. "AWD_FM_SHOOTRANG_TG_WON", 0)
			stats.set_int(MPX .. "AWD_WIN_CAPTURES", 0)
			stats.set_int(MPX .. "AWD_WIN_CAPTURE_DONT_DYING", 0)
			stats.set_int(MPX .. "AWD_WIN_LAST_TEAM_STANDINGS", 0)
			stats.set_int(MPX .. "AWD_ONLY_PLAYER_ALIVE_LTS", 0)
			stats.set_int(MPX .. "AWD_KILL_TEAM_YOURSELF_LTS", 0)
			stats.set_int(MPX .. "AIR_LAUNCHES_OVER_0M", 0)
			stats.set_int(MPX .. "AWD_CARS_EXPORTED", 0)
			stats.set_int(MPX .. "AWD_LESTERDELIVERVEHICLES", 0)
			stats.set_int(MPX .. "CR_DIFFERENT_DM", 0)
			stats.set_int(MPX .. "CR_DIFFERENT_RACES", 0)
			stats.set_int(MPX .. "AWD_PARACHUTE_JUMPS_0M", 0)
			stats.set_int(MPX .. "AWD_PARACHUTE_JUMPS_0M", 0)
			stats.set_int(MPX .. "AWD_FMBASEJMP", 0)
			stats.set_int(MPX .. "AWD_FM_GOLF_BIRDIES", 0)
			stats.set_int(MPX .. "AWD_FM_TENNIS_ACE", 0)
			stats.set_int(MPX .. "AWD_FMBBETWIN", 0)
			stats.set_int(MPX .. "AWD_LAPDANCES", 0)
			stats.set_int(MPX .. "AWD_FMCRATEDROPS", 0)
			stats.set_int(MPX .. "AWD_NO_HAIRCUTS", 0)
			stats.set_int(MPX .. "AWD_DROPOFF_CAP_PACKAGES", 0)
			stats.set_int(MPX .. "AWD_PICKUP_CAP_PACKAGES", 0)
			stats.set_int(MPX .. "AWD_MENTALSTATE_TO_NORMAL", 0)
			stats.set_int(MPX .. "AWD_TRADE_IN_YOUR_PROPERTY", 0)
			stats.set_int(MPX .. "NO_PHOTOS_TAKEN", 0)
			stats.set_int(MPX .. "BOUNTSONU", 0)
			stats.set_int(MPX .. "BOUNTPLACED", 0)
			stats.set_int(MPX .. "BETAMOUNT", 0)
			stats.set_int(MPX .. "CRARMWREST", 0)
			stats.set_int(MPX .. "CRBASEJUMP", 0)
			stats.set_int(MPX .. "CRDARTS", 0)
			stats.set_int(MPX .. "CRDM", 0)
			stats.set_int(MPX .. "CRGANGHIDE", 0)
			stats.set_int(MPX .. "CRGOLF", 0)
			stats.set_int(MPX .. "CRHORDE", 0)
			stats.set_int(MPX .. "CRMISSION", 0)
			stats.set_int(MPX .. "CRSHOOTRNG", 0)
			stats.set_int(MPX .. "CRTENNIS", 0)
			stats.set_int(MPX .. "NO_TIMES_CINEMA", 0)
			stats.set_int(MPX .. "CHAR_WEAP_UNLOCKED", 0)
			stats.set_int(MPX .. "CHAR_WEAP_UNLOCKED2", 0)
			stats.set_int(MPX .. "CHAR_WEAP_UNLOCKED3", 0)
			stats.set_int(MPX .. "CHAR_WEAP_UNLOCKED0", 0)
			stats.set_int(MPX .. "CHAR_WEAP_ADDON_1_UNLCK", 0)
			stats.set_int(MPX .. "CHAR_WEAP_ADDON_2_UNLCK", 0)
			stats.set_int(MPX .. "CHAR_WEAP_ADDON_3_UNLCK", 0)
			stats.set_int(MPX .. "CHAR_WEAP_ADDON_0_UNLCK", 0)
			stats.set_int(MPX .. "CHAR_WEAP_FREE", 0)
			stats.set_int(MPX .. "CHAR_WEAP_FREE2", 0)
			stats.set_int(MPX .. "CHAR_FM_WEAP_FREE", 0)
			stats.set_int(MPX .. "CHAR_FM_WEAP_FREE2", 0)
			stats.set_int(MPX .. "CHAR_FM_WEAP_FREE3", 0)
			stats.set_int(MPX .. "CHAR_FM_WEAP_FREE0", 0)
			stats.set_int(MPX .. "CHAR_WEAP_PURCHASED", 0)
			stats.set_int(MPX .. "CHAR_WEAP_PURCHASED2", 0)
			stats.set_int(MPX .. "WEAPON_PICKUP_BITSET", 0)
			stats.set_int(MPX .. "WEAPON_PICKUP_BITSET2", 0)
			stats.set_int(MPX .. "CHAR_FM_WEAP_UNLOCKED", 0)
			stats.set_int(MPX .. "NO_WEAPONS_UNLOCK", 0)
			stats.set_int(MPX .. "NO_WEAPON_MODS_UNLOCK", 0)
			stats.set_int(MPX .. "NO_WEAPON_CLR_MOD_UNLOCK", 0) 
			stats.set_int(MPX .. "CHAR_FM_WEAP_UNLOCKED2", 0)
			stats.set_int(MPX .. "CHAR_FM_WEAP_UNLOCKED3", 0)
			stats.set_int(MPX .. "CHAR_FM_WEAP_UNLOCKED0", 0)
			stats.set_int(MPX .. "CHAR_KIT_1_FM_UNLCK", 0)
			stats.set_int(MPX .. "CHAR_KIT_2_FM_UNLCK", 0)
			stats.set_int(MPX .. "CHAR_KIT_3_FM_UNLCK", 0)
			stats.set_int(MPX .. "CHAR_KIT_0_FM_UNLCK", 0)
			stats.set_int(MPX .. "CHAR_KIT_5_FM_UNLCK", 0)
			stats.set_int(MPX .. "CHAR_KIT_6_FM_UNLCK", 0)
			stats.set_int(MPX .. "CHAR_KIT_7_FM_UNLCK", 0)
			stats.set_int(MPX .. "CHAR_KIT_8_FM_UNLCK", 0)
			stats.set_int(MPX .. "CHAR_KIT_9_FM_UNLCK", 0)
			stats.set_int(MPX .. "CHAR_KIT_0_FM_UNLCK", 0)
			stats.set_int(MPX .. "CHAR_KIT_11_FM_UNLCK", 0)
			stats.set_int(MPX .. "CHAR_KIT_12_FM_UNLCK", 0)
			stats.set_int(MPX .. "CHAR_KIT_FM_PURCHASE", 0)
			stats.set_int(MPX .. "CHAR_WEAP_FM_PURCHASE", 0)
			stats.set_int(MPX .. "CHAR_WEAP_FM_PURCHASE2", 0)
			stats.set_int(MPX .. "CHAR_WEAP_FM_PURCHASE3", 0)
			stats.set_int(MPX .. "CHAR_WEAP_FM_PURCHASE0", 0)
			stats.set_int(MPX .. "FIREWORK_TYPE_1_WHITE", 0)
			stats.set_int(MPX .. "FIREWORK_TYPE_1_RED", 0)
			stats.set_int(MPX .. "FIREWORK_TYPE_1_BLUE", 0)
			stats.set_int(MPX .. "FIREWORK_TYPE_2_WHITE", 0)
			stats.set_int(MPX .. "FIREWORK_TYPE_2_RED", 0)
			stats.set_int(MPX .. "FIREWORK_TYPE_2_BLUE", 0)
			stats.set_int(MPX .. "FIREWORK_TYPE_3_WHITE", 0)
			stats.set_int(MPX .. "FIREWORK_TYPE_3_RED", 0)
			stats.set_int(MPX .. "FIREWORK_TYPE_3_BLUE", 0)
			stats.set_int(MPX .. "FIREWORK_TYPE_0_WHITE", 0)
			stats.set_int(MPX .. "FIREWORK_TYPE_0_RED", 0)
			stats.set_int(MPX .. "FIREWORK_TYPE_0_BLUE", 0)
			stats.set_int(MPX .. "WEAP_FM_ADDON_PURCH", 0)
			stats.set_int(MPX .. "AWD_FMTIME5STARWANTED", 0)
			stats.set_int(MPX .. "AWD_5STAR_WANTED_AVOIDANCE", 0)
			stats.set_int(MPX .. "AWD_FMSHOOTDOWNCOPHELI", 0)
			stats.set_int(MPX .. "AWD_VEHICLES_JACKEDR", 0)
			stats.set_int(MPX .. "AWD_SECURITY_CARS_ROBBED", 0)
			stats.set_int(MPX .. "AWD_HOLD_UP_SHOPS", 0)
			stats.set_int(MPX .. "AWD_ODISTRACTCOPSNOEATH", 0)
			stats.set_int(MPX .. "AWD_ENEMYDRIVEBYKILLS", 0)
			stats.set_int(MPX .. "CHAR_WANTED_LEVEL_TIME5STAR", 0)
			stats.set_int(MPX .. "CARS_COPS_EXPLODED", 0)
			stats.set_int(MPX .. "BIKES_EXPLODED", 0)
			stats.set_int(MPX .. "BOATS_EXPLODED", 0)
			stats.set_int(MPX .. "HELIS_EXPLODED", 0)
			stats.set_int(MPX .. "PLANES_EXPLODED", 0)
			stats.set_int(MPX .. "QUADBIKE_EXPLODED", 0)
			stats.set_int(MPX .. "BICYCLE_EXPLODED", 0)
			stats.set_int(MPX .. "SUBMARINE_EXPLODED", 0)
			stats.set_int(MPX .. "TIRES_POPPED_BY_GUNSHOT", 0)
			stats.set_int(MPX .. "NUMBER_CRASHES_CARS", 0)
			stats.set_int(MPX .. "NUMBER_CRASHES_BIKES", 0)
			stats.set_int(MPX .. "BAILED_FROM_VEHICLE", 0)
			stats.set_int(MPX .. "NUMBER_CRASHES_QUADBIKES", 0)
			stats.set_int(MPX .. "NUMBER_STOLEN_COP_VEHICLE", 0)
			stats.set_int(MPX .. "NUMBER_STOLEN_CARS", 0)
			stats.set_int(MPX .. "NUMBER_STOLEN_BIKES", 0)
			stats.set_int(MPX .. "NUMBER_STOLEN_BOATS", 0)
			stats.set_int(MPX .. "NUMBER_STOLEN_HELIS", 0)
			stats.set_int(MPX .. "NUMBER_STOLEN_PLANES", 0)
			stats.set_int(MPX .. "NUMBER_STOLEN_QUADBIKES", 0)
			stats.set_int(MPX .. "NUMBER_STOLEN_BICYCLES", 0)
			stats.set_int(MPX .. "MC_CONTRIBUTION_POINTS", 0)
			stats.set_int(MPX .. "MEMBERSMARKEDFORDEATH", 0)
			stats.set_int(MPX .. "MCKILLS", 0)
			stats.set_int(MPX .. "MCDEATHS", 0)
			stats.set_int(MPX .. "RIVALPRESIDENTKILLS", 0)
			stats.set_int(MPX .. "RIVALCEOANDVIPKILLS", 0)
			stats.set_int(MPX .. "CLUBHOUSECONTRACTSCOMPLETE", 0)
			stats.set_int(MPX .. "CLUBHOUSECONTRACTEARNINGS", 0)
			stats.set_int(MPX .. "CLUBCHALLENGESCOMPLETED", 0)
			stats.set_int(MPX .. "MEMBERCHALLENGESCOMPLETED", 0)
			stats.set_int(MPX .. "GHKILLS", 0)
			stats.set_int(MPX .. "HORDELVL", 0)
			stats.set_int(MPX .. "HORDKILLS", 0)
			stats.set_int(MPX .. "UNIQUECRATES", 0)
			stats.set_int(MPX .. "BJWINS", 0)
			stats.set_int(MPX .. "HORDEWINS", 0)
			stats.set_int(MPX .. "MCMWINS", 0)
			stats.set_int(MPX .. "GANGHIDWINS", 0)
			stats.set_int(MPX .. "KILLS", 0)
			stats.set_int(MPX .. "HITS_PEDS_VEHICLES", 0)
			stats.set_int(MPX .. "SHOTS", 0)
			stats.set_int(MPX .. "HEADSHOTS", 0)
			stats.set_int(MPX .. "KILLS_ARMED", 0)
			stats.set_int(MPX .. "SUCCESSFUL_COUNTERS", 0)
			stats.set_int(MPX .. "KILLS_PLAYERS", 0)
			stats.set_int(MPX .. "DEATHS_PLAYER", 0)
			stats.set_int(MPX .. "KILLS_STEALTH", 0)
			stats.set_int(MPX .. "KILLS_INNOCENTS", 0)
			stats.set_int(MPX .. "KILLS_ENEMY_GANG_MEMBERS", 0)
			stats.set_int(MPX .. "KILLS_FRIENDLY_GANG_MEMBERS", 0)
			stats.set_int(MPX .. "KILLS_BY_OTHERS", 0)
			stats.set_int(MPX .. "BIGGEST_VICTIM_KILLS", 0)
			stats.set_int(MPX .. "ARCHENEMY_KILLS", 0)
			stats.set_int(MPX .. "KILLS_COP", 0)
			stats.set_int(MPX .. "KILLS_SWAT", 0)
			stats.set_int(MPX .. "STARS_ATTAINED", 0)
			stats.set_int(MPX .. "STARS_EVADED", 0)
			stats.set_int(MPX .. "VEHEXPORTED", 0)
			stats.set_int(MPX .. "TOTAL_NO_SHOPS_HELD_UP", 0)
			stats.set_int(MPX .. "CR_GANGATTACK_CITY", 0)
			stats.set_int(MPX .. "CR_GANGATTACK_COUNTRY", 0)
			stats.set_int(MPX .. "CR_GANGATTACK_LOST", 0)
			stats.set_int(MPX .. "CR_GANGATTACK_VAGOS", 0)
			stats.set_int(MPX .. "NO_NON_CONTRACT_RACE_WIN", 0)
			stats.set_int(MPX .. "DIED_IN_DROWNING", 0)
			stats.set_int(MPX .. "DIED_IN_DROWNINGINVEHICLE", 0)
			stats.set_int(MPX .. "DIED_IN_EXPLOSION", 0)
			stats.set_int(MPX .. "DIED_IN_FALL", 0)
			stats.set_int(MPX .. "DIED_IN_FIRE", 0)
			stats.set_int(MPX .. "DIED_IN_ROAD", 0)
			stats.set_int(MPX .. "GRENADE_ENEMY_KILLS", 0)
			stats.set_int(MPX .. "MICROSMG_ENEMY_KILLS", 0)
			stats.set_int(MPX .. "SMG_ENEMY_KILLS", 0)
			stats.set_int(MPX .. "ASLTSMG_ENEMY_KILLS", 0)
			stats.set_int(MPX .. "CRBNRIFLE_ENEMY_KILLS", 0)
			stats.set_int(MPX .. "ADVRIFLE_ENEMY_KILLS", 0)
			stats.set_int(MPX .. "MG_ENEMY_KILLS", 0)
			stats.set_int(MPX .. "CMBTMG_ENEMY_KILLS", 0)
			stats.set_int(MPX .. "ASLTMG_ENEMY_KILLS", 0)
			stats.set_int(MPX .. "RPG_ENEMY_KILLS", 0)
			stats.set_int(MPX .. "PISTOL_ENEMY_KILLS", 0)
			stats.set_int(MPX .. "PLAYER_HEADSHOTS", 0)
			stats.set_int(MPX .. "SAWNOFF_ENEMY_KILLS", 0)
			stats.set_int(MPX .. "STKYBMB_ENEMY_KILLS", 0)
			stats.set_int(MPX .. "UNARMED_ENEMY_KILLS", 0)
			stats.set_int(MPX .. "SNIPERRFL_ENEMY_KILLS", 0)
			stats.set_int(MPX .. "HVYSNIPER_ENEMY_KILLS", 0)
			stats.set_int(MPX .. "AWD_0_VEHICLES_BLOWNUP", 0)
			stats.set_int(MPX .. "CARS_EXPLODED", 0)
			stats.set_int(MPX .. "AWD_CAR_EXPORT", 0)
			stats.set_int(MPX .. "AWD_FMDRIVEWITHOUTCRASH", 0)
			stats.set_int(MPX .. "AWD_PASSENGERTIME", 0)
			stats.set_int(MPX .. "AWD_TIME_IN_HELICOPTER", 0)
			stats.set_int(MPX .. "AWD_VEHICLE_JUMP_OVER_0M", 0)
			stats.set_int(MPX .. "MOST_FLIPS_IN_ONE_JUMP", 5)
			stats.set_int(MPX .. "MOST_SPINS_IN_ONE_JUMP", 5)
			stats.set_int(MPX .. "CHAR_FM_VEHICLE_1_UNLCK", 0)
			stats.set_int(MPX .. "CHAR_FM_VEHICLE_2_UNLCK", 0)
			stats.set_int(MPX .. "NO_CARS_REPAIR", 0)
			stats.set_int(MPX .. "VEHICLES_SPRAYED", 0)
			stats.set_int(MPX .. "NUMBER_NEAR_MISS_NOCRASH", 0)
			stats.set_int(MPX .. "USJS_FOUND", 0)
			stats.set_int(MPX .. "USJS_COMPLETED", 0)
			stats.set_int(MPX .. "USJS_TOTAL_COMPLETED", 0)
			stats.set_int(MPX .. "CRDEADLINE", 0)
			stats.set_int(MPX .. "FAVOUTFITBIKETIMECURRENT", 0)
			stats.set_int(MPX .. "FAVOUTFITBIKETIME1ALLTIME", 0)
			stats.set_int(MPX .. "FAVOUTFITBIKETYPECURRENT", 0)
			stats.set_int(MPX .. "FAVOUTFITBIKETYPEALLTIME", 0)
			stats.set_int(MPX .. "LONGEST_WHEELIE_DIST", 0)
			stats.set_int(MPX .. "RACES_WON", 0)
			stats.set_int(MPX .. "COUNT_HOTRING_RACE", 0)
			stats.set_int(MPX .. "AWD_0_HEADSHOTS", 0)
			stats.set_int(MPX .. "AWD_FMOVERALLKILLS", 0)
			stats.set_int(MPX .. "AWD_FMKILLBOUNTY", 0)
			stats.set_int(MPX .. "AWD_FM_DM_3KILLSAMEGUY", 0)
			stats.set_int(MPX .. "AWD_FM_DM_KILLSTREAK", 0)
			stats.set_int(MPX .. "AWD_FM_DM_STOLENKILL", 0)
			stats.set_int(MPX .. "AWD_FM_DM_TOTALKILLS", 0)
			stats.set_int(MPX .. "AWD_FMREVENGEKILLSDM", 0)
			stats.set_int(MPX .. "AWD_KILL_CARRIER_CAPTURE", 0)
			stats.set_int(MPX .. "AWD_NIGHTVISION_KILLS", 0)
			stats.set_int(MPX .. "AWD_KILL_PSYCHOPATHS", 0)
			stats.set_int(MPX .. "AWD_TAKEDOWNSMUGPLANE", 0)
			stats.set_int(MPX .. "AWD_0_KILLS_PISTOL", 0)
			stats.set_int(MPX .. "AWD_0_KILLS_SMG", 0)
			stats.set_int(MPX .. "AWD_0_KILLS_SHOTGUN", 0)
			stats.set_int(MPX .. "ASLTRIFLE_ENEMY_KILLS", 0)
			stats.set_int(MPX .. "AWD_0_KILLS_SNIPER", 0)
			stats.set_int(MPX .. "MG_ENEMY_KILLS", 0)
			stats.set_int(MPX .. "AWD_0_KILLS_STICKYBOMBS", 0)
			stats.set_int(MPX .. "AWD_0_KILLS_GRENADES", 0)
			stats.set_int(MPX .. "AWD_0_KILLS_ROCKETLAUNCH", 0)
			stats.set_int(MPX .. "AWD_0_KILLS_MELEE", 0)
			stats.set_int(MPX .. "AWD_CAR_BOMBS_ENEMY_KILLS", 0)
			stats.set_int(MPX .. "MELEEKILLS", 0)
			stats.set_int(MPX .. "HITS", 0)
			stats.set_int(MPX .. "DEATHS", 0)
			stats.set_int(MPX .. "HIGHEST_SKITTLES", 0)
			stats.set_int(MPX .. "NUMBER_NEAR_MISS", 0)
			stats.set_int(MPX .. "AWD_FINISH_HEISTS", 0)
			stats.set_int(MPX .. "AWD_FINISH_HEIST_SETUP_JOB", 0)
			stats.set_int(MPX .. "AWD_COMPLETE_HEIST_NOT_DIE", 0)
			stats.set_int(MPX .. "AWD_WIN_GOLD_MEDAL_HEISTS", 0)
			stats.set_int(MPX .. "AWD_DO_HEIST_AS_MEMBER", 0)
			stats.set_int(MPX .. "AWD_DO_HEIST_AS_THE_LEADER", 0)
			stats.set_int(MPX .. "AWD_CONTROL_CROWDS", 0)
			stats.set_int(MPX .. "HEIST_COMPLETION", 0)
			stats.set_int(MPX .. "HEISTS_ORGANISED", 0)
			stats.set_int(MPX .. "HEIST_START", 0)
			stats.set_int(MPX .. "HEIST_END", 0)
			stats.set_int(MPX .. "CUTSCENE_MID_PRISON", 0)
			stats.set_int(MPX .. "CUTSCENE_MID_HUMANE", 0)
			stats.set_int(MPX .. "CUTSCENE_MID_NARC", 0)
			stats.set_int(MPX .. "CUTSCENE_MID_ORNATE", 0)
			stats.set_int(MPX .. "CR_FLEECA_PREP_1", 0)
			stats.set_int(MPX .. "CR_FLEECA_PREP_2", 0)
			stats.set_int(MPX .. "CR_FLEECA_FINALE", 0)
			stats.set_int(MPX .. "CR_PRISON_PLANE", 0)
			stats.set_int(MPX .. "CR_PRISON_BUS", 0)
			stats.set_int(MPX .. "CR_PRISON_STATION", 0)
			stats.set_int(MPX .. "CR_PRISON_UNFINISHED_BIZ", 0)
			stats.set_int(MPX .. "CR_PRISON_FINALE", 0)
			stats.set_int(MPX .. "CR_HUMANE_KEY_CODES", 0)
			stats.set_int(MPX .. "CR_HUMANE_ARMORDILLOS", 0)
			stats.set_int(MPX .. "CR_HUMANE_EMP", 0)
			stats.set_int(MPX .. "CR_HUMANE_VALKYRIE", 0)
			stats.set_int(MPX .. "CR_HUMANE_FINALE", 0)
			stats.set_int(MPX .. "CR_NARC_COKE", 0)
			stats.set_int(MPX .. "CR_NARC_TRASH_TRUCK", 0)
			stats.set_int(MPX .. "CR_NARC_BIKERS", 0)
			stats.set_int(MPX .. "CR_NARC_WEED", 0)
			stats.set_int(MPX .. "CR_NARC_STEAL_METH", 0)
			stats.set_int(MPX .. "CR_NARC_FINALE", 0)
			stats.set_int(MPX .. "CR_PACIFIC_TRUCKS", 0)
			stats.set_int(MPX .. "CR_PACIFIC_WITSEC", 0)
			stats.set_int(MPX .. "CR_PACIFIC_HACK", 0)
			stats.set_int(MPX .. "CR_PACIFIC_BIKES", 0)
			stats.set_int(MPX .. "CR_PACIFIC_CONVOY", 0)
			stats.set_int(MPX .. "CR_PACIFIC_FINALE", 0)
			stats.set_int(MPX .. "HEIST_PLANNING_STAGE", 0)
			stats.set_int(MPX .. "GANGOPS_HEIST_STATUS", 0)
			stats.set_int(MPX .. "GANGOPS_HEIST_STATUS", 0)
			stats.set_int(MPX .. "GANGOPS_FM_MISSION_PROG", 0)
			stats.set_int(MPX .. "GANGOPS_FLOW_MISSION_PROG", 0)
			stats.set_int(MPX .. "CR_GANGOP_MORGUE", 0)
			stats.set_int(MPX .. "CR_GANGOP_DELUXO", 0)
			stats.set_int(MPX .. "CR_GANGOP_SERVERFARM", 0)
			stats.set_int(MPX .. "CR_GANGOP_IAABASE_FIN", 0)
			stats.set_int(MPX .. "CR_GANGOP_STEALOSPREY", 0)
			stats.set_int(MPX .. "CR_GANGOP_FOUNDRY", 0)
			stats.set_int(MPX .. "CR_GANGOP_RIOTVAN", 0)
			stats.set_int(MPX .. "CR_GANGOP_SUBMARINECAR", 0)
			stats.set_int(MPX .. "CR_GANGOP_SUBMARINE_FIN", 0)
			stats.set_int(MPX .. "CR_GANGOP_PREDATOR", 0)
			stats.set_int(MPX .. "CR_GANGOP_BMLAUNCHER", 0)
			stats.set_int(MPX .. "CR_GANGOP_BCCUSTOM", 0)
			stats.set_int(MPX .. "CR_GANGOP_STEALTHTANKS", 0)
			stats.set_int(MPX .. "CR_GANGOP_SPYPLANE", 0)
			stats.set_int(MPX .. "CR_GANGOP_FINALE", 0)
			stats.set_int(MPX .. "CR_GANGOP_FINALE_P2", 0)
			stats.set_int(MPX .. "CR_GANGOP_FINALE_P3", 0)
			stats.set_int(MPX .. "AWD_DANCE_TO_SOLOMUN", 0)
			stats.set_int(MPX .. "AWD_DANCE_TO_TALEOFUS", 0)
			stats.set_int(MPX .. "AWD_DANCE_TO_DIXON", 0)
			stats.set_int(MPX .. "AWD_DANCE_TO_BLKMAD", 0)
			stats.set_int(MPX .. "AWD_CLUB_DRUNK", 0)
			stats.set_int(MPX .. "NIGHTCLUB_VIP_APPEAR", 0)
			stats.set_int(MPX .. "NIGHTCLUB_JOBS_DONE", 0)
			stats.set_int(MPX .. "NIGHTCLUB_EARNINGS", 0)
			stats.set_int(MPX .. "HUB_SALES_COMPLETED", 0)
			stats.set_int(MPX .. "HUB_EARNINGS", 0)
			stats.set_int(MPX .. "DANCE_COMBO_DURATION_MINS", 0)
			stats.set_int(MPX .. "NIGHTCLUB_PLAYER_APPEAR", 0)
			stats.set_int(MPX .. "LIFETIME_HUB_GOODS_SOLD", 0)
			stats.set_int(MPX .. "LIFETIME_HUB_GOODS_MADE", 0)
			stats.set_int(MPX .. "DANCEPERFECTOWNCLUB", 0)
			stats.set_int(MPX .. "NUMUNIQUEPLYSINCLUB", 0)
			stats.set_int(MPX .. "DANCETODIFFDJS", 0)
			stats.set_int(MPX .. "NIGHTCLUB_HOTSPOT_TIME_MS", 0)
			stats.set_int(MPX .. "NIGHTCLUB_CONT_TOTAL", 0)
			stats.set_int(MPX .. "NIGHTCLUB_CONT_MISSION", 0)
			stats.set_int(MPX .. "CLUB_CONTRABAND_MISSION", 0)
			stats.set_int(MPX .. "HUB_CONTRABAND_MISSION", 0)
			stats.set_int(MPX .. "ARN_BS_TRINKET_TICKERS", 0)
			stats.set_int(MPX .. "ARN_BS_TRINKET_SAVED", 0)
			stats.set_int(MPX .. "AWD_WATCH_YOUR_STEP", 0)
			stats.set_int(MPX .. "AWD_TOWER_OFFENSE", 0)
			stats.set_int(MPX .. "AWD_READY_FOR_WAR", 0)
			stats.set_int(MPX .. "AWD_THROUGH_A_LENS", 0)
			stats.set_int(MPX .. "AWD_SPINNER", 0)
			stats.set_int(MPX .. "AWD_YOUMEANBOOBYTRAPS", 0)
			stats.set_int(MPX .. "AWD_MASTER_BANDITO", 0)
			stats.set_int(MPX .. "AWD_SITTING_DUCK", 0)
			stats.set_int(MPX .. "AWD_CROWDPARTICIPATION", 0)
			stats.set_int(MPX .. "AWD_KILL_OR_BE_KILLED", 0)
			stats.set_int(MPX .. "AWD_MASSIVE_SHUNT", 0)
			stats.set_int(MPX .. "AWD_YOURE_OUTTA_HERE", 0)
			stats.set_int(MPX .. "AWD_WEVE_GOT_ONE", 0)
			stats.set_int(MPX .. "AWD_ARENA_WAGEWORKER", 0)
			stats.set_int(MPX .. "AWD_TIME_SERVED", 0)
			stats.set_int(MPX .. "AWD_TOP_SCORE", 0)
			stats.set_int(MPX .. "AWD_CAREER_WINNER", 0)
			stats.set_int(MPX .. "ARENAWARS_SP", 0)
			stats.set_int(MPX .. "ARENAWARS_SKILL_LEVEL", 0)
			stats.set_int(MPX .. "ARENAWARS_SP_LIFETIME", 0)
			stats.set_int(MPX .. "ARENAWARS_AP", 0)
			stats.set_int(MPX .. "ARENAWARS_AP_TIER", 0)
			stats.set_int(MPX .. "ARENAWARS_AP_LIFETIME", 0)
			stats.set_int(MPX .. "ARENAWARS_CARRER_UNLK", 0)
			stats.set_int(MPX .. "ARN_W_THEME_SCIFI", 0)
			stats.set_int(MPX .. "ARN_W_THEME_APOC", 0)
			stats.set_int(MPX .. "ARN_W_THEME_CONS", 0)
			stats.set_int(MPX .. "ARN_W_PASS_THE_BOMB", 0)
			stats.set_int(MPX .. "ARN_W_DETONATION", 0)
			stats.set_int(MPX .. "ARN_W_ARCADE_RACE", 0)
			stats.set_int(MPX .. "ARN_W_CTF", 0)
			stats.set_int(MPX .. "ARN_W_TAG_TEAM", 0)
			stats.set_int(MPX .. "ARN_W_DESTR_DERBY", 0)
			stats.set_int(MPX .. "ARN_W_CARNAGE", 0)
			stats.set_int(MPX .. "ARN_W_MONSTER_JAM", 0)
			stats.set_int(MPX .. "ARN_W_GAMES_MASTERS", 0)
			stats.set_int(MPX .. "ARN_L_PASS_THE_BOMB", 0)
			stats.set_int(MPX .. "ARN_L_DETONATION", 0)
			stats.set_int(MPX .. "ARN_L_ARCADE_RACE", 0)
			stats.set_int(MPX .. "ARN_L_CTF", 0)
			stats.set_int(MPX .. "ARN_L_TAG_TEAM", 0)
			stats.set_int(MPX .. "ARN_L_DESTR_DERBY", 0)
			stats.set_int(MPX .. "ARN_L_CARNAGE", 0)
			stats.set_int(MPX .. "ARN_L_MONSTER_JAM", 0)
			stats.set_int(MPX .. "ARN_L_GAMES_MASTERS", 0)
			stats.set_int(MPX .. "NUMBER_OF_CHAMP_BOUGHT", 0)
			stats.set_int(MPX .. "ARN_SPECTATOR_KILLS", 0)
			stats.set_int(MPX .. "ARN_LIFETIME_KILLS", 0)
			stats.set_int(MPX .. "ARN_LIFETIME_DEATHS", 0)
			stats.set_int(MPX .. "ARENAWARS_CARRER_WINS", 0)
			stats.set_int(MPX .. "ARENAWARS_CARRER_WINT", 0)
			stats.set_int(MPX .. "ARENAWARS_MATCHES_PLYD", 0)
			stats.set_int(MPX .. "ARENAWARS_MATCHES_PLYDT", 0)
			stats.set_int(MPX .. "ARN_SPEC_BOX_TIME_MS", 0)
			stats.set_int(MPX .. "ARN_SPECTATOR_DRONE", 0)
			stats.set_int(MPX .. "ARN_SPECTATOR_CAMS", 0)
			stats.set_int(MPX .. "ARN_SMOKE", 0)
			stats.set_int(MPX .. "ARN_DRINK", 0)
			stats.set_int(MPX .. "ARN_VEH_MONSTER", 0)
			stats.set_int(MPX .. "ARN_VEH_MONSTER", 0)
			stats.set_int(MPX .. "ARN_VEH_MONSTER", 0)
			stats.set_int(MPX .. "ARN_VEH_CERBERUS", 0)
			stats.set_int(MPX .. "ARN_VEH_CERBERUS2", 0)
			stats.set_int(MPX .. "ARN_VEH_CERBERUS3", 0)
			stats.set_int(MPX .. "ARN_VEH_BRUISER", 0)
			stats.set_int(MPX .. "ARN_VEH_BRUISER2", 0)
			stats.set_int(MPX .. "ARN_VEH_BRUISER3", 0)
			stats.set_int(MPX .. "ARN_VEH_SLAMVAN0", 0)
			stats.set_int(MPX .. "ARN_VEH_SLAMVAN5", 0)
			stats.set_int(MPX .. "ARN_VEH_SLAMVAN6", 0)
			stats.set_int(MPX .. "ARN_VEH_BRUTUS", 0)
			stats.set_int(MPX .. "ARN_VEH_BRUTUS2", 0)
			stats.set_int(MPX .. "ARN_VEH_BRUTUS3", 0)
			stats.set_int(MPX .. "ARN_VEH_SCARAB", 0)
			stats.set_int(MPX .. "ARN_VEH_SCARAB2", 0)
			stats.set_int(MPX .. "ARN_VEH_SCARAB3", 0)
			stats.set_int(MPX .. "ARN_VEH_DOMINATOR0", 0)
			stats.set_int(MPX .. "ARN_VEH_DOMINATOR5", 0)
			stats.set_int(MPX .. "ARN_VEH_DOMINATOR6", 0)
			stats.set_int(MPX .. "ARN_VEH_IMPALER2", 0)
			stats.set_int(MPX .. "ARN_VEH_IMPALER3", 0)
			stats.set_int(MPX .. "ARN_VEH_IMPALER0", 0)
			stats.set_int(MPX .. "ARN_VEH_ISSI0", 0)
			stats.set_int(MPX .. "ARN_VEH_ISSI5", 0)
			stats.set_int(MPX .. "ARN_VEH_ISSI", 0)
			stats.set_int(MPX .. "ARN_VEH_IMPERATOR", 0)
			stats.set_int(MPX .. "ARN_VEH_IMPERATOR2", 0)
			stats.set_int(MPX .. "ARN_VEH_IMPERATOR3", 0)
			stats.set_int(MPX .. "ARN_VEH_ZR30", 0)
			stats.set_int(MPX .. "ARN_VEH_ZR30", 0)
			stats.set_int(MPX .. "ARN_VEH_ZR0", 0)
			stats.set_int(MPX .. "ARN_VEH_DEATHBIKE", 0)
			stats.set_int(MPX .. "ARN_VEH_DEATHBIKE2", 0)
			stats.set_int(MPX .. "ARN_VEH_DEATHBIKE3", 0)
			stats.set_int(MPX .. "AWD_ODD_JOBS", 0)
			stats.set_int(MPX .. "VCM_FLOW_PROGRESS", 0)
			stats.set_int(MPX .. "VCM_STORY_PROGRESS", 5)
			stats.set_int(MPX .. "CAS_HEIST_NOTS", 0)
			stats.set_int(MPX .. "CAS_HEIST_FLOW", 0)
			stats.set_int(MPX .. "SIGNAL_JAMMERS_COLLECTED", 0)
			stats.set_int(MPX .. "AWD_PREPARATION", 0)
			stats.set_int(MPX .. "AWD_ASLEEPONJOB", 0)
			stats.set_int(MPX .. "AWD_DAICASHCRAB", 0)
			stats.set_int(MPX .. "AWD_BIGBRO", 0)
			stats.set_int(MPX .. "AWD_SHARPSHOOTER", 0)
			stats.set_int(MPX .. "AWD_RACECHAMP", 0)
			stats.set_int(MPX .. "AWD_BATSWORD", 0)
			stats.set_int(MPX .. "AWD_COINPURSE", 0)
			stats.set_int(MPX .. "AWD_ASTROCHIMP", 0)
			stats.set_int(MPX .. "AWD_MASTERFUL", 0)
			stats.set_int(MPX .. "H3_BOARD_DIALOGUE0", 0)
			stats.set_int(MPX .. "H3_BOARD_DIALOGUE1", 0)
			stats.set_int(MPX .. "H3_BOARD_DIALOGUE2", 0)
			stats.set_int(MPX .. "H3_VEHICLESUSED", 0)
			stats.set_int(MPX .. "H3_CR_STEALTH_1A", 0)
			stats.set_int(MPX .. "H3_CR_STEALTH_2B_RAPP", 0)
			stats.set_int(MPX .. "H3_CR_STEALTH_2C_SIDE", 0)
			stats.set_int(MPX .. "H3_CR_STEALTH_3A", 0)
			stats.set_int(MPX .. "H3_CR_STEALTH_0A", 0)
			stats.set_int(MPX .. "H3_CR_STEALTH_5A", 0)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_1A", 0)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_2A", 0)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_2B", 0)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_3A", 0)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_3B", 0)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_0A", 0)
			stats.set_int(MPX .. "H3_CR_SUBTERFUGE_5A", 0)
			stats.set_int(MPX .. "H3_CR_DIRECT_1A", 0)
			stats.set_int(MPX .. "H3_CR_DIRECT_2A1", 0)
			stats.set_int(MPX .. "H3_CR_DIRECT_2A2", 0)
			stats.set_int(MPX .. "H3_CR_DIRECT_2BP", 0)
			stats.set_int(MPX .. "H3_CR_DIRECT_2C", 0)
			stats.set_int(MPX .. "H3_CR_DIRECT_3A", 0)
			stats.set_int(MPX .. "H3_CR_DIRECT_0A", 0)
			stats.set_int(MPX .. "H3_CR_DIRECT_5A", 0)
			stats.set_int(MPX .. "CR_ORDER", 0)
			stats.set_int(MPX .. "AWD_PREPARATION", 0)
			stats.set_int(MPX .. "AWD_ASLEEPONJOB", 0)
			stats.set_int(MPX .. "AWD_DAICASHCRAB", 0)
			stats.set_int(MPX .. "AWD_BIGBRO", 0)
			stats.set_int(MPX .. "AWD_SHARPSHOOTER", 0)
			stats.set_int(MPX .. "AWD_RACECHAMP", 0)
			stats.set_int(MPX .. "AWD_BATSWORD", 0)
			stats.set_int(MPX .. "AWD_COINPURSE", 0)
			stats.set_int(MPX .. "AWD_ASTROCHIMP", 0)
			stats.set_int(MPX .. "AWD_MASTERFUL", 0)
			stats.set_int(MPX .. "SCGW_NUM_WINS_GANG_0", 0)
			stats.set_int(MPX .. "SCGW_NUM_WINS_GANG_1", 0)
			stats.set_int(MPX .. "SCGW_NUM_WINS_GANG_2", 0)
			stats.set_int(MPX .. "SCGW_NUM_WINS_GANG_3", 0)
			stats.set_int(MPX .. "CH_ARC_CAB_CLAW_TROPHY", 0)
			stats.set_int(MPX .. "CH_ARC_CAB_LOVE_TROPHY", 0)
			stats.set_int(MPX .. "IAP_MAX_MOON_DIST", 0)
			stats.set_int(MPX .. "SCGW_INITIALS_0", 0)
			stats.set_int(MPX .. "SCGW_INITIALS_1", 0)
			stats.set_int(MPX .. "SCGW_INITIALS_2", 0)
			stats.set_int(MPX .. "SCGW_INITIALS_3", 0)
			stats.set_int(MPX .. "SCGW_INITIALS_0", 0)
			stats.set_int(MPX .. "SCGW_INITIALS_5", 0)
			stats.set_int(MPX .. "SCGW_INITIALS_6", 0)
			stats.set_int(MPX .. "SCGW_INITIALS_7", 0)
			stats.set_int(MPX .. "SCGW_INITIALS_8", 0)
			stats.set_int(MPX .. "SCGW_INITIALS_9", 0)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_0",0)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_1", 0)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_2", 0)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_3", 0)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_4", 0)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_5", 0)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_6", 0)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_7", 0)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_8", 0)
			stats.set_int(MPX .. "FOOTAGE_INITIALS_9", 0)
			stats.set_int(MPX .. "FOOTAGE_SCORE_0", 0)
			stats.set_int(MPX .. "FOOTAGE_SCORE_1", 0)
			stats.set_int(MPX .. "FOOTAGE_SCORE_2", 0)
			stats.set_int(MPX .. "FOOTAGE_SCORE_3", 0)
			stats.set_int(MPX .. "FOOTAGE_SCORE_0", 0)
			stats.set_int(MPX .. "FOOTAGE_SCORE_5", 0)
			stats.set_int(MPX .. "FOOTAGE_SCORE_6", 0)
			stats.set_int(MPX .. "FOOTAGE_SCORE_7", 0)
			stats.set_int(MPX .. "FOOTAGE_SCORE_8", 0)
			stats.set_int(MPX .. "FOOTAGE_SCORE_9", 0)
			stats.set_int(MPX .. "AWD_CAR_CLUB_MEM", 0)
			stats.set_int(MPX .. "AWD_SPRINTRACER", 0)
			stats.set_int(MPX .. "AWD_STREETRACER", 0)
			stats.set_int(MPX .. "AWD_PURSUITRACER", 0)
			stats.set_int(MPX .. "AWD_TEST_CAR", 0)
			stats.set_int(MPX .. "AWD_AUTO_SHOP", 0)	
			stats.set_int(MPX .. "AWD_GROUNDWORK", 0)
			stats.set_int(MPX .. "AWD_CAR_EXPORT", 0)
			stats.set_int(MPX .. "AWD_ROBBERY_CONTRACT", 0)
			stats.set_int(MPX .. "AWD_FACES_OF_DEATH", 0)
			stats.set_int(MPX .. "AWD_CONTRACTOR", 0)
			stats.set_int(MPX .. "AWD_COLD_CALLER", 0)
			stats.set_int(MPX .. "AWD_PRODUCER", 0)
			stats.set_int(MPX .. "FIXERTELEPHONEHITSCOMPL", 0)
			stats.set_int(MPX .. "PAYPHONE_BONUS_KILL_METHOD", 0)
			stats.set_int(MPX .. "PAYPHONE_BONUS_KILL_METHOD", 0)
			stats.set_int(MPX .. "FIXER_GENERAL_BS", 0)
			stats.set_int(MPX .. "FIXER_COMPLETED_BS", 0)
			stats.set_int(MPX .. "FIXER_STORY_BS", 0)
			stats.set_int(MPX .. "FIXER_STORY_STRAND", 0)
			stats.set_int(MPX .. "FIXER_STORY_COOLDOWN", 0)
			stats.set_int(MPX .. "FIXER_COUNT", 0)
			stats.set_int(MPX .. "FIXER_SC_VEH_RECOVERED", 0)
			stats.set_int(MPX .. "FIXER_SC_VAL_RECOVERED", 0)
			stats.set_int(MPX .. "FIXER_SC_GANG_TERMINATED", 0)
			stats.set_int(MPX .. "FIXER_SC_VIP_RESCUED", 0)
			stats.set_int(MPX .. "FIXER_SC_ASSETS_PROTECTED", 0)
			stats.set_int(MPX .. "FIXER_SC_EQ_DESTROYED", 0)
			stats.set_int(MPX .. "FIXER_EARNINGS", 0)
			stats.set_int(MPX .. "AWD_LOSTANDFOUND", 0)
			stats.set_int(MPX .. "AWD_SUNSET", 0)
			stats.set_int(MPX .. "AWD_TREASURE_HUNTER", 0)
			stats.set_int(MPX .. "AWD_WRECK_DIVING", 0)
			stats.set_int(MPX .. "AWD_KEINEMUSIK", 0)
			stats.set_int(MPX .. "AWD_PALMS_TRAX", 0)
			stats.set_int(MPX .. "AWD_MOODYMANN", 0)
			stats.set_int(MPX .. "AWD_FILL_YOUR_BAGS", 0)
			stats.set_int(MPX .. "AWD_WELL_PREPARED", 0)
			stats.set_int(MPX .. "H0_H0_DJ_MISSIONS", 0)
			stats.set_int(MPX .. "H0CNF_APPROACH", 0)
			stats.set_int(MPX .. "H0_MISSIONS", 0)
			stats.set_int(MPX .. "H0_PLAYTHROUGH_STATUS", 0)
			stats.set_int("MPPLY_TOTAL_RACES_WON", 0)
			stats.set_int("MPPLY_TOTAL_RACES_LOST", 0)
			stats.set_int("MPPLY_TOTAL_CUSTOM_RACES_WON", 0)
			stats.set_int("MPPLY_TOTAL_DEATHMATCH_LOST", 0)
			stats.set_int("MPPLY_TOTAL_DEATHMATCH_WON", 0)
			stats.set_int("MPPLY_TOTAL_TDEATHMATCH_LOST", 0)
			stats.set_int("MPPLY_TOTAL_TDEATHMATCH_WON", 0)
			stats.set_int("MPPLY_SHOOTINGRANGE_WINS", 0)
			stats.set_int("MPPLY_SHOOTINGRANGE_LOSSES", 0)
			stats.set_int("MPPLY_TENNIS_MATCHES_WON", 0)
			stats.set_int("MPPLY_TENNIS_MATCHES_LOST", 0)
			stats.set_int("MPPLY_GOLF_WINS", 0)
			stats.set_int("MPPLY_GOLF_LOSSES", 0)
			stats.set_int("MPPLY_DARTS_TOTAL_WINS", 0)
			stats.set_int("MPPLY_DARTS_TOTAL_MATCHES", 0)
			stats.set_int("MPPLY_SHOOTINGRANGE_TOTAL_MATCH", 0)
			stats.set_int("MPPLY_BJ_WINS", 0)
			stats.set_int("MPPLY_BJ_LOST", 0)
			stats.set_int("MPPLY_RACE_2_POINT_WINS", 0)
			stats.set_int("MPPLY_RACE_2_POINT_LOST", 0)
			stats.set_int("MPPLY_KILLS_PLAYERS", 0)
			stats.set_int("MPPLY_DEATHS_PLAYER", 0)
			stats.set_int("MPPLY_MISSIONS_CREATED", 0)
			stats.set_int("MPPLY_LTS_CREATED", 0)
			stats.set_int("MPPLY_FM_MISSION_LIKES", 0)
			stats.set_int("MPPLY_AWD_FM_CR_DM_MADE", 0)
			stats.set_int("MPPLY_AWD_FM_CR_RACES_MADE", 0)
			stats.set_int("MPPLY_AWD_FM_CR_PLAYED_BY_PEEP", 0)
			stats.set_int("MPPLY_AWD_FM_CR_MISSION_SCORE", 0)
			stats.set_int("MPPLY_HEIST_ACH_TRACKER", 0)
			stats.set_int("MPPLY_WIN_GOLD_MEDAL_HEISTS", 0)
			stats.set_int("MPPLY_GANGOPS_ALLINORDER", 0)
			stats.set_int("MPPLY_GANGOPS_LOYALTY", 0)
			stats.set_int("MPPLY_GANGOPS_CRIMMASMD", 0)
			stats.set_int("MPPLY_GANGOPS_LOYALTY2", 0)
			stats.set_int("MPPLY_GANGOPS_LOYALTY3", 0)
			stats.set_int("MPPLY_GANGOPS_CRIMMASMD2", 0)
			stats.set_int("MPPLY_GANGOPS_CRIMMASMD3", 0)
			stats.set_int("MPPLY_GANGOPS_SUPPORT", 0)
			for i = 2, 19 do stats.set_int(MPX .. "WEAP_FM_ADDON_PURCH"..i, 0) end
			for j = 1, 19 do stats.set_int(MPX .. "CHAR_FM_WEAP_ADDON_"..j.."_UNLCK", 0) end
			for m = 1, 01 do stats.set_int(MPX .. "CHAR_KIT_"..m.."_FM_UNLCK", 0) end
			for l = 2, 01 do stats.set_int(MPX .. "CHAR_KIT_FM_PURCHASE"..l, 0) end
			for i = 0, 9 do stats.set_int(MPX .. "IAP_INITIALS_"..i, 0) 
							stats.set_int(MPX .. "IAP_SCORE_"..i, 0) 
							stats.set_int(MPX .. "IAP_SCORE_"..i, 0) 
							stats.set_int(MPX .. "SCGW_SCORE_"..i, 0) 
							stats.set_int(MPX .. "DG_DEFENDER_INITIALS_"..i, 0) 
							stats.set_int(MPX .. "DG_DEFENDER_SCORE_"..i, 0) 
							stats.set_int(MPX .. "DG_MONKEY_INITIALS_"..i, 0) 
							stats.set_int(MPX .. "DG_MONKEY_SCORE_"..i, 0) 
							stats.set_int(MPX .. "DG_PENETRATOR_INITIALS_"..i, 0) 
							stats.set_int(MPX .. "DG_PENETRATOR_SCORE_"..i, 0) 
							stats.set_int(MPX .. "GGSM_INITIALS_"..i, 0) 
							stats.set_int(MPX .. "GGSM_SCORE_"..i, 0) 
							stats.set_int(MPX .. "TWR_INITIALS_"..i, 0) 
							stats.set_int(MPX .. "TWR_SCORE_"..i, 0) end 
			stats.set_bool(MPX .. "AWD_FMKILL3ANDWINGTARACE", false)
			stats.set_bool(MPX .. "AWD_FMWINCUSTOMRACE", false)
			stats.set_bool(MPX .. "CL_RACE_MODDED_CAR", false)
			stats.set_bool(MPX .. "AWD_FMRACEWORLDRECHOLDER", false)
			stats.set_bool(MPX .. "AWD_FMWINALLRACEMODES", false)
			stats.set_bool(MPX .. "AWD_FM_TENNIS_5_SET_WINS", false)
			stats.set_bool(MPX .. "AWD_FM_TENNIS_STASETWIN", false)
			stats.set_bool(MPX .. "AWD_FM_SHOOTRANG_GRAN_WON", false)
			stats.set_bool(MPX .. "AWD_FMWINEVERYGAMEMODE", false)
			stats.set_bool(MPX .. "AWD_FM0DIFFERENTDM", false)
			stats.set_bool(MPX .. "AWD_FM0DIFFERENTRACES", false)
			stats.set_bool(MPX .. "AWD_FMATTGANGHQ", false)
			stats.set_bool(MPX .. "AWD_FM6DARTCHKOUT", false)
			stats.set_bool(MPX .. "AWD_FM_GOLF_HOLE_IN_1", false)
			stats.set_bool(MPX .. "AWD_FMPICKUPDLCCRATE1ST", false)
			stats.set_bool(MPX .. "AWD_FM0DIFITEMSCLOTHES", false)
			stats.set_bool(MPX .. "AWD_BUY_EVERY_GUN", false)
			stats.set_bool(MPX .. "AWD_DRIVELESTERCAR5MINS", false)
			stats.set_bool(MPX .. "AWD_FMTATTOOALLBODYPARTS", false)
			stats.set_bool(MPX .. "AWD_STORE_0_CAR_IN_GARAGES", false)
			stats.set_bool(MPX .. "AWD_DAILYOBJWEEKBONUS", false)
			stats.set_bool(MPX .. "AWD_DAILYOBJMONTHBONUS", false)
			stats.set_bool(MPX .. "CL_DRIVE_RALLY", false)
			stats.set_bool(MPX .. "CL_PLAY_GTA_RACE", false)
			stats.set_bool(MPX .. "CL_PLAY_BOAT_RACE", false)
			stats.set_bool(MPX .. "CL_PLAY_FOOT_RACE", false)
			stats.set_bool(MPX .. "CL_PLAY_TEAM_DM", false)
			stats.set_bool(MPX .. "CL_PLAY_VEHICLE_DM", false)
			stats.set_bool(MPX .. "CL_PLAY_MISSION_CONTACT", false)
			stats.set_bool(MPX .. "CL_PLAY_A_PLAYLIST", false)
			stats.set_bool(MPX .. "CL_PLAY_POINT_TO_POINT", false)
			stats.set_bool(MPX .. "CL_PLAY_ONE_ON_ONE_DM", false)
			stats.set_bool(MPX .. "CL_PLAY_ONE_ON_ONE_RACE", false)
			stats.set_bool(MPX .. "CL_SURV_A_BOUNTY", false)
			stats.set_bool(MPX .. "CL_SET_WANTED_LVL_ON_PLAY", false)
			stats.set_bool(MPX .. "CL_GANG_BACKUP_GANGS", false)
			stats.set_bool(MPX .. "CL_GANG_BACKUP_LOST", false)
			stats.set_bool(MPX .. "CL_GANG_BACKUP_VAGOS", false)
			stats.set_bool(MPX .. "CL_CALL_MERCENARIES", false)
			stats.set_bool(MPX .. "CL_PHONE_MECH_DROP_CAR", false)
			stats.set_bool(MPX .. "CL_GONE_OFF_RADAR", false)
			stats.set_bool(MPX .. "CL_FILL_TITAN", false)
			stats.set_bool(MPX .. "CL_MOD_CAR_USING_APP", false)
			stats.set_bool(MPX .. "CL_MOD_CAR_USING_APP", false)
			stats.set_bool(MPX .. "CL_BUY_INSURANCE", false)
			stats.set_bool(MPX .. "CL_BUY_GARAGE", false)
			stats.set_bool(MPX .. "CL_ENTER_FRIENDS_HOUSE", false)
			stats.set_bool(MPX .. "CL_CALL_STRIPPER_HOUSE", false)
			stats.set_bool(MPX .. "CL_CALL_FRIEND", false)
			stats.set_bool(MPX .. "CL_SEND_FRIEND_REQUEST", false)
			stats.set_bool(MPX .. "CL_W_WANTED_PLAYER_TV", false)
			stats.set_bool(MPX .. "FM_INTRO_CUT_DONE", false)
			stats.set_bool(MPX .. "FM_INTRO_MISS_DONE", false)
			stats.set_bool(MPX .. "SHOOTINGRANGE_SEEN_TUT", false)
			stats.set_bool(MPX .. "TENNIS_SEEN_TUTORIAL", false)
			stats.set_bool(MPX .. "DARTS_SEEN_TUTORIAL", false)
			stats.set_bool(MPX .. "ARMWRESTLING_SEEN_TUTORIAL", false)
			stats.set_bool(MPX .. "HAS_WATCHED_BENNY_CUTSCE", false)
			stats.set_bool(MPX .. "AWD_FMFURTHESTWHEELIE", false)
			stats.set_bool(MPX .. "AWD_FMFULLYMODDEDCAR", false)
			stats.set_bool(MPX .. "AWD_FMKILLSTREAKSDM", false)
			stats.set_bool(MPX .. "AWD_FMMOSTKILLSGANGHIDE", false)
			stats.set_bool(MPX .. "AWD_FMMOSTKILLSSURVIVE", false)
			stats.set_bool(MPX .. "AWD_FINISH_HEIST_NO_DAMAGE", false)
			stats.set_bool(MPX .. "AWD_SPLIT_HEIST_TAKE_EVENLY", false)
			stats.set_bool(MPX .. "AWD_ACTIVATE_2_PERSON_KEY", false)
			stats.set_bool(MPX .. "AWD_ALL_ROLES_HEIST", false)
			stats.set_bool(MPX .. "HEIST_PLANNING_DONE_PRINT", false)
			stats.set_bool(MPX .. "HEIST_PLANNING_DONE_HELP_0", false)
			stats.set_bool(MPX .. "HEIST_PLANNING_DONE_HELP_1", false)
			stats.set_bool(MPX .. "HEIST_PRE_PLAN_DONE_HELP_0", false)
			stats.set_bool(MPX .. "HEIST_CUTS_DONE_FINALE", false)
			stats.set_bool(MPX .. "HEIST_IS_TUTORIAL", false)
			stats.set_bool(MPX .. "HEIST_STRAND_INTRO_DONE", false)
			stats.set_bool(MPX .. "HEIST_CUTS_DONE_ORNATE", false)
			stats.set_bool(MPX .. "HEIST_CUTS_DONE_PRISON", false)
			stats.set_bool(MPX .. "HEIST_CUTS_DONE_BIOLAB", false)
			stats.set_bool(MPX .. "HEIST_CUTS_DONE_NARCOTIC", false)
			stats.set_bool(MPX .. "HEIST_CUTS_DONE_TUTORIAL", false)
			stats.set_bool(MPX .. "HEIST_AWARD_DONE_PREP", false)
			stats.set_bool(MPX .. "HEIST_AWARD_BOUGHT_IN", false)
			stats.set_bool(MPX .. "AWD_MATCHING_OUTFIT_HEIST", false)
			stats.set_bool(MPX .. "AWD_CLUB_HOTSPOT", false)
			stats.set_bool(MPX .. "AWD_CLUB_CLUBBER", false)
			stats.set_bool(MPX .. "AWD_CLUB_COORD", false)
			stats.set_bool(MPX .. "AWD_BEGINNER", false)
			stats.set_bool(MPX .. "AWD_FIELD_FILLER", false)
			stats.set_bool(MPX .. "AWD_ARMCHAIR_RACER", false)
			stats.set_bool(MPX .. "AWD_LEARNER", false)
			stats.set_bool(MPX .. "AWD_SUNDAY_DRIVER", false)
			stats.set_bool(MPX .. "AWD_THE_ROOKIE", false)
			stats.set_bool(MPX .. "AWD_BUMP_AND_RUN", false)
			stats.set_bool(MPX .. "AWD_GEAR_HEAD", false)
			stats.set_bool(MPX .. "AWD_DOOR_SLAMMER", false)
			stats.set_bool(MPX .. "AWD_HOT_LAP", false)
			stats.set_bool(MPX .. "AWD_ARENA_AMATEUR", false)
			stats.set_bool(MPX .. "AWD_PAINT_TRADER", false)
			stats.set_bool(MPX .. "AWD_SHUNTER", false)
			stats.set_bool(MPX .. "AWD_JOCK", false)
			stats.set_bool(MPX .. "AWD_WARRIOR", false)
			stats.set_bool(MPX .. "AWD_T_BONE", false)
			stats.set_bool(MPX .. "AWD_MAYHEM", false)
			stats.set_bool(MPX .. "AWD_WRECKER", false)
			stats.set_bool(MPX .. "AWD_CRASH_COURSE", false)
			stats.set_bool(MPX .. "AWD_ARENA_LEGEND", false)
			stats.set_bool(MPX .. "AWD_PEGASUS", false)
			stats.set_bool(MPX .. "AWD_UNSTOPPABLE", false)
			stats.set_bool(MPX .. "AWD_CONTACT_SPORT", false)
			stats.set_bool(MPX .. "AWD_FIRST_TIME1", false)
			stats.set_bool(MPX .. "AWD_FIRST_TIME2", false)
			stats.set_bool(MPX .. "AWD_FIRST_TIME3", false)
			stats.set_bool(MPX .. "AWD_FIRST_TIME0", false)
			stats.set_bool(MPX .. "AWD_FIRST_TIME5", false)
			stats.set_bool(MPX .. "AWD_FIRST_TIME6", false)
			stats.set_bool(MPX .. "AWD_ALL_IN_ORDER", false)
			stats.set_bool(MPX .. "AWD_SUPPORTING_ROLE", false)
			stats.set_bool(MPX .. "AWD_LEADER", false)
			stats.set_bool(MPX .. "AWD_SURVIVALIST", false)
			Paragon = stats.get_bool(MPX .. "CAS_VEHICLE_REWARD") if Paragon == false then stats.set_bool(MPX .. "CAS_VEHICLE_REWARD",false) else stats.set_bool(MPX .. "CAS_VEHICLE_REWARD", false) end
			stats.set_bool(MPX .. "AWD_SCOPEOUT", false)
			stats.set_bool(MPX .. "AWD_CREWEDUP", false)
			stats.set_bool(MPX .. "AWD_MOVINGON", false)
			stats.set_bool(MPX .. "AWD_PROMOCAMP", false)
			stats.set_bool(MPX .. "AWD_GUNMAN", false)
			stats.set_bool(MPX .. "AWD_SMASHNGRAB", false)
			stats.set_bool(MPX .. "AWD_INPLAINSI", false)
			stats.set_bool(MPX .. "AWD_UNDETECTED", false)
			stats.set_bool(MPX .. "AWD_ALLROUND", false)
			stats.set_bool(MPX .. "AWD_ELITETHEIF", false)
			stats.set_bool(MPX .. "AWD_PRO", false)
			stats.set_bool(MPX .. "AWD_SUPPORTACT", false)
			stats.set_bool(MPX .. "AWD_SHAFTED", false)
			stats.set_bool(MPX .. "AWD_COLLECTOR", false)
			stats.set_bool(MPX .. "AWD_DEADEYE", false)
			stats.set_bool(MPX .. "AWD_PISTOLSATDAWN", false)
			stats.set_bool(MPX .. "AWD_TRAFFICAVOI", false)
			stats.set_bool(MPX .. "AWD_CANTCATCHBRA", false)
			stats.set_bool(MPX .. "AWD_WIZHARD", false)
			stats.set_bool(MPX .. "AWD_APEESCAPE", false)
			stats.set_bool(MPX .. "AWD_MONKEYKIND", false)
			stats.set_bool(MPX .. "AWD_AQUAAPE", false)
			stats.set_bool(MPX .. "AWD_KEEPFAITH", false)
			stats.set_bool(MPX .. "AWD_falseLOVE", false)
			stats.set_bool(MPX .. "AWD_NEMESIS", false)
			stats.set_bool(MPX .. "AWD_FRIENDZONED", false)
			stats.set_bool(MPX .. "VCM_FLOW_CS_RSC_SEEN", false)
			stats.set_bool(MPX .. "VCM_FLOW_CS_BWL_SEEN", false)
			stats.set_bool(MPX .. "VCM_FLOW_CS_MTG_SEEN", false)
			stats.set_bool(MPX .. "VCM_FLOW_CS_OIL_SEEN", false)
			stats.set_bool(MPX .. "VCM_FLOW_CS_DEF_SEEN", false)
			stats.set_bool(MPX .. "VCM_FLOW_CS_FIN_SEEN", false)
			stats.set_bool(MPX .. "HELP_FURIA", false)
			stats.set_bool(MPX .. "HELP_MINITAN", false)
			stats.set_bool(MPX .. "HELP_YOSEMITE2", false)
			stats.set_bool(MPX .. "HELP_ZHABA", false)
			stats.set_bool(MPX .. "HELP_IMORGEN", false)
			stats.set_bool(MPX .. "HELP_SULTAN2", false)
			stats.set_bool(MPX .. "HELP_VAGRANT", false)
			stats.set_bool(MPX .. "HELP_VSTR", false)
			stats.set_bool(MPX .. "HELP_STRYDER", false)
			stats.set_bool(MPX .. "HELP_SUGOI", false)
			stats.set_bool(MPX .. "HELP_KANJO", false)
			stats.set_bool(MPX .. "HELP_FORMULA", false)
			stats.set_bool(MPX .. "HELP_FORMULA2", false)
			stats.set_bool(MPX .. "HELP_JB0", false)
			stats.set_bool(MPX .. "AWD_SCOPEOUT", false)
			stats.set_bool(MPX .. "AWD_CREWEDUP", false)
			stats.set_bool(MPX .. "AWD_MOVINGON", false)
			stats.set_bool(MPX .. "AWD_PROMOCAMP", false)
			stats.set_bool(MPX .. "AWD_GUNMAN", false)
			stats.set_bool(MPX .. "AWD_SMASHNGRAB", false)
			stats.set_bool(MPX .. "AWD_INPLAINSI", false)
			stats.set_bool(MPX .. "AWD_UNDETECTED", false)
			stats.set_bool(MPX .. "AWD_ALLROUND", false)
			stats.set_bool(MPX .. "AWD_ELITETHEIF", false)
			stats.set_bool(MPX .. "AWD_PRO", false)
			stats.set_bool(MPX .. "AWD_SUPPORTACT", false)
			stats.set_bool(MPX .. "AWD_SHAFTED", false)
			stats.set_bool(MPX .. "AWD_COLLECTOR", false)
			stats.set_bool(MPX .. "AWD_DEADEYE", false)
			stats.set_bool(MPX .. "AWD_PISTOLSATDAWN", false)
			stats.set_bool(MPX .. "AWD_TRAFFICAVOI", false)
			stats.set_bool(MPX .. "AWD_CANTCATCHBRA", false)
			stats.set_bool(MPX .. "AWD_WIZHARD", false)
			stats.set_bool(MPX .. "AWD_APEESCAP", false)
			stats.set_bool(MPX .. "AWD_MONKEYKIND", false)
			stats.set_bool(MPX .. "AWD_AQUAAPE", false)
			stats.set_bool(MPX .. "AWD_KEEPFAITH", false)
			stats.set_bool(MPX .. "AWD_falseLOVE", false)
			stats.set_bool(MPX .. "AWD_NEMESIS", false)
			stats.set_bool(MPX .. "AWD_FRIENDZONED", false)
			stats.set_bool(MPX .. "IAP_CHALLENGE_0", false)
			stats.set_bool(MPX .. "IAP_CHALLENGE_1", false)
			stats.set_bool(MPX .. "IAP_CHALLENGE_2", false)
			stats.set_bool(MPX .. "IAP_CHALLENGE_3", false)
			stats.set_bool(MPX .. "IAP_CHALLENGE_0", false)
			stats.set_bool(MPX .. "IAP_GOLD_TANK", false)
			stats.set_bool(MPX .. "SCGW_WON_NO_DEATHS", false)
			stats.set_bool(MPX .. "AWD_KINGOFQUB3D", false)
			stats.set_bool(MPX .. "AWD_QUBISM", false)
			stats.set_bool(MPX .. "AWD_QUIBITS", false)
			stats.set_bool(MPX .. "AWD_GODOFQUB3D", false)
			stats.set_bool(MPX .. "AWD_ELEVENELEVEN", false)
			stats.set_bool(MPX .. "AWD_GOFOR11TH", false)
			stats.set_bool(MPX .. "AWD_INTELGATHER", false)
			stats.set_bool(MPX .. "AWD_COMPOUNDINFILT", false)
			stats.set_bool(MPX .. "AWD_LOOT_FINDER", false)
			stats.set_bool(MPX .. "AWD_MAX_DISRUPT", false)
			stats.set_bool(MPX .. "AWD_THE_ISLAND_HEIST", false)
			stats.set_bool(MPX .. "AWD_GOING_ALONE", false)
			stats.set_bool(MPX .. "AWD_TEAM_WORK", false)
			stats.set_bool(MPX .. "AWD_MIXING_UP", false)
			stats.set_bool(MPX .. "AWD_TEAM_WORK", false)
			stats.set_bool(MPX .. "AWD_MIXING_UP", false)
			stats.set_bool(MPX .. "AWD_PRO_THIEF", false)
			stats.set_bool(MPX .. "AWD_CAT_BURGLAR", false)
			stats.set_bool(MPX .. "AWD_ONE_OF_THEM", false)
			stats.set_bool(MPX .. "AWD_GOLDEN_GUN", false)
			stats.set_bool(MPX .. "AWD_ELITE_THIEF", false)
			stats.set_bool(MPX .. "AWD_PROFESSIONAL", false)
			stats.set_bool(MPX .. "AWD_HELPING_OUT", false)
			stats.set_bool(MPX .. "AWD_COURIER", false)
			stats.set_bool(MPX .. "AWD_PARTY_VIBES", false)
			stats.set_bool(MPX .. "AWD_HELPING_HAND", false)
			stats.set_bool(MPX .. "AWD_ELEVENELEVEN", false)
			stats.set_bool(MPX .. "COMPLETE_H0_F_USING_VETIR", false)
			stats.set_bool(MPX .. "COMPLETE_H0_F_USING_LONGFIN", false)
			stats.set_bool(MPX .. "COMPLETE_H0_F_USING_ANNIH", false)
			stats.set_bool(MPX .. "COMPLETE_H0_F_USING_ALKONOS", false)
			stats.set_bool(MPX .. "COMPLETE_H0_F_USING_PATROLB", false)
			stats.set_bool(MPX .. "AWD_CAR_CLUB", false)
			stats.set_bool(MPX .. "AWD_PRO_CAR_EXPORT", false)
			stats.set_bool(MPX .. "AWD_UNION_DEPOSITORY", false)
			stats.set_bool(MPX .. "AWD_MILITARY_CONVOY", false)
			stats.set_bool(MPX .. "AWD_FLEECA_BANK", false)
			stats.set_bool(MPX .. "AWD_FREIGHT_TRAIN", false)
			stats.set_bool(MPX .. "AWD_BOLINGBROKE_ASS", false)
			stats.set_bool(MPX .. "AWD_IAA_RAID", false)
			stats.set_bool(MPX .. "AWD_METH_JOB", false)
			stats.set_bool(MPX .. "AWD_BUNKER_RAID", false)
			stats.set_bool(MPX .. "AWD_STRAIGHT_TO_VIDEO", false)
			stats.set_bool(MPX .. "AWD_MONKEY_C_MONKEY_DO", false)
			stats.set_bool(MPX .. "AWD_TRAINED_TO_KILL", false)
			stats.set_bool(MPX .. "AWD_DIRECTOR", false)
			stats.set_bool(MPX .. "AWD_TEEING_OFF", false)
			stats.set_bool(MPX .. "AWD_PARTY_NIGHT", false)
			stats.set_bool(MPX .. "AWD_BILLIONAIRE_GAMES", false)
			stats.set_bool(MPX .. "AWD_HOOD_PASS", false)
			stats.set_bool(MPX .. "AWD_STUDIO_TOUR", false)
			stats.set_bool(MPX .. "AWD_DONT_MESS_DRE", false)
			stats.set_bool(MPX .. "AWD_BACKUP", false)
			stats.set_bool(MPX .. "AWD_SHORTFRANK_1", false)
			stats.set_bool(MPX .. "AWD_SHORTFRANK_2", false)
			stats.set_bool(MPX .. "AWD_SHORTFRANK_3", false)
			stats.set_bool(MPX .. "AWD_CONTR_KILLER", false)
			stats.set_bool(MPX .. "AWD_DOGS_BEST_FRIEND", false)
			stats.set_bool(MPX .. "AWD_MUSIC_STUDIO", false)
			stats.set_bool(MPX .. "AWD_SHORTLAMAR_1", false)
			stats.set_bool(MPX .. "AWD_SHORTLAMAR_2", false)
			stats.set_bool(MPX .. "AWD_SHORTLAMAR_3", false)
			stats.set_bool(MPX .. "BS_FRANKLIN_DIALOGUE_0", false)
			stats.set_bool(MPX .. "BS_FRANKLIN_DIALOGUE_1", false)
			stats.set_bool(MPX .. "BS_FRANKLIN_DIALOGUE_2", false)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_SETUP", false)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_STRAND", false)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_PARTY", false)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_PARTY_2", false)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_PARTY_F", false)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_BILL", false)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_BILL_2", false)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_BILL_F", false)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_HOOD", false)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_HOOD_2", false)
			stats.set_bool(MPX .. "BS_IMANI_D_APP_HOOD_F", false)
			stats.set_bool("MPPLY_AWD_FLEECA_FIN", false)
			stats.set_bool("MPPLY_AWD_PRISON_FIN", false)
			stats.set_bool("MPPLY_AWD_HUMANE_FIN", false)
			stats.set_bool("MPPLY_AWD_SERIESA_FIN", false)
			stats.set_bool("MPPLY_AWD_PACIFIC_FIN", false)
			stats.set_bool("MPPLY_AWD_HST_ORDER", false)
			stats.set_bool("MPPLY_AWD_COMPLET_HEIST_MEM", false)
			stats.set_bool("MPPLY_AWD_COMPLET_HEIST_1STPER", false)
			stats.set_bool("MPPLY_AWD_HST_SAME_TEAM", false)
			stats.set_bool("MPPLY_AWD_HST_ULT_CHAL", false)
			stats.set_bool("MPPLY_AWD_GANGOPS_IAA", false)
			stats.set_bool("MPPLY_AWD_GANGOPS_SUBMARINE", false)
			stats.set_bool("MPPLY_AWD_GANGOPS_MISSILE", false)
			stats.set_bool("MPPLY_AWD_GANGOPS_ALLINORDER", false)
			stats.set_bool("MPPLY_AWD_GANGOPS_LOYALTY", false)
			stats.set_bool("MPPLY_AWD_GANGOPS_LOYALTY2", false)
			stats.set_bool("MPPLY_AWD_GANGOPS_LOYALTY3", false)
			stats.set_bool("MPPLY_AWD_GANGOPS_CRIMMASMD", false)
			stats.set_bool("MPPLY_AWD_GANGOPS_CRIMMASMD2", false)
			stats.set_bool("MPPLY_AWD_GANGOPS_CRIMMASMD3", false)
			stats.set_bool("MPPLY_AWD_GANGOPS_SUPPORT", false) 
			stats.set_bool(MPX .. "AWD_ACELIQUOR", false)
			stats.set_bool(MPX .. "AWD_TRUCKAMBUSH", false)
			stats.set_bool(MPX .. "AWD_LOSTCAMPREV", false)
			stats.set_bool(MPX .. "AWD_ACIDTRIP", false)
			stats.set_bool(MPX .. "AWD_HIPPYRIVALS", false)
			stats.set_bool(MPX .. "AWD_TRAINCRASH", false)
			stats.set_bool(MPX .. "AWD_BACKUPB", false)
			stats.set_bool(MPX .. "AWD_GETSTARTED", false)
			stats.set_bool(MPX .. "AWD_CHEMREACTION", false)
			stats.set_bool(MPX .. "AAWD_WAREHODEFEND", false)
			stats.set_bool(MPX .. "AWD_ATTACKINVEST", false)
			stats.set_bool(MPX .. "AWD_RESCUECOOK", false)
			stats.set_bool(MPX .. "AWD_DRUGTRIPREHAB", false)
			stats.set_bool(MPX .. "AWD_CARGOPLANE", false)
			stats.set_bool(MPX .. "AWD_BACKUPB2", false)
			stats.set_bool(MPX .. "AWD_TAXISTAR", false)
			stats.set_int(MPX .. "AWD_RUNRABBITRUN", 0)
			stats.set_int(MPX .. "AWD_CALLME", 0)
			stats.set_int(MPX .. "AWD_CHEMCOMPOUNDS", 0) end)
	
	Awards:add_action("", function() end)
	
	AwardsNote = Awards:add_submenu("Read Me")
	
	AwardsNote:add_action("    	 Unlocking «After Hours» awards will ", function() end)
	AwardsNote:add_action("  cause a transaction error multiple times;", function() end)
	AwardsNote:add_action("       Some awards can be temporarily", function() end)
	
	Characteristics = CharactersStats:add_submenu("Characteristics")
	
			a58 = false
		local function FastRunNReload(Enabled)
			if Enabled then stats.set_int(MPX .. "CHAR_FM_ABILITY_1_UNLCK", -1)
						    stats.set_int(MPX .. "CHAR_FM_ABILITY_2_UNLCK", -1)
						    stats.set_int(MPX .. "CHAR_FM_ABILITY_3_UNLCK", -1)
						    stats.set_int(MPX .. "CHAR_ABILITY_1_UNLCK", -1)
						    stats.set_int(MPX .. "CHAR_ABILITY_2_UNLCK", -1)
						    stats.set_int(MPX .. "CHAR_ABILITY_3_UNLCK", -1)
			else stats.set_int(MPX .. "CHAR_FM_ABILITY_1_UNLCK", 0)
			     stats.set_int(MPX .. "CHAR_FM_ABILITY_2_UNLCK", 0)
			     stats.set_int(MPX .. "CHAR_FM_ABILITY_3_UNLCK", 0)
			     stats.set_int(MPX .. "CHAR_ABILITY_1_UNLCK", 0)
			     stats.set_int(MPX .. "CHAR_ABILITY_2_UNLCK", 0)
			     stats.set_int(MPX .. "CHAR_ABILITY_3_UNLCK", 0) end end
	Characteristics:add_toggle("Fast Run n Reload", function() return a58 end, function() a58 = not a58 FastRunNReload(a58) end)

	Characteristics:add_action("Max Stats", function() stats.set_int(MPX .. "SCRIPT_INCREASE_DRIV", 100) 
													   stats.set_int(MPX .. "SCRIPT_INCREASE_FLY", 100) 
												   	   stats.set_int(MPX .. "SCRIPT_INCREASE_LUNG", 100) 
													   stats.set_int(MPX .. "SCRIPT_INCREASE_SHO", 100) 
													   stats.set_int(MPX .. "SCRIPT_INCREASE_STAM", 100) 
													   stats.set_int(MPX .. "SCRIPT_INCREASE_STL", 100) 
													   stats.set_int(MPX .. "SCRIPT_INCREASE_STRN", 100) end)
		
	Characteristics:add_int_range("Stamina", 2, 0, 100, function() return stats.get_int(MPX .. "STAMINA") end, function(Sta) stats.set_int(MPX .. "SCRIPT_INCREASE_STAM", 0) sleep(5) stats.set_int(MPX .. "SCRIPT_INCREASE_STAM", Sta - stats.get_int(MPX .. "STAMINA")) end)
	Characteristics:add_int_range("Shooting", 2, 0, 100, function() return stats.get_int(MPX .. "SHOOTING_ABILITY") end, function(Sho) stats.set_int(MPX .. "SCRIPT_INCREASE_SHO", 0) sleep(5) stats.set_int(MPX .. "SCRIPT_INCREASE_SHO", Sho - stats.get_int(MPX .. "SHOOTING_ABILITY")) end)
	Characteristics:add_int_range("Strength", 2, 0, 100, function() return stats.get_int(MPX .. "STRENGTH") end, function(Str) stats.set_int(MPX .. "SCRIPT_INCREASE_STRN", 0) sleep(5) stats.set_int(MPX .. "SCRIPT_INCREASE_STRN", Str - stats.get_int(MPX .. "STRENGTH")) end)
	Characteristics:add_int_range("Stealth", 2, 0, 100, function() return stats.get_int(MPX .. "STEALTH_ABILITY") end, function(Ste) stats.set_int(MPX .. "SCRIPT_INCREASE_STL", 0) sleep(5) stats.set_int(MPX .. "SCRIPT_INCREASE_STL", Ste - stats.get_int(MPX .. "STEALTH_ABILITY")) end)
	Characteristics:add_int_range("Flying", 2, 0, 100, function() return stats.get_int(MPX .. "FLYING_ABILITY") end, function(Fly) stats.set_int(MPX .. "SCRIPT_INCREASE_FLY", 0) sleep(5) stats.set_int(MPX .. "SCRIPT_INCREASE_FLY", Fly - stats.get_int(MPX .. "FLYING_ABILITY")) end)
	Characteristics:add_int_range("Driving", 2, 0, 100, function() return stats.get_int(MPX .. "WHEELIE_ABILITY") end, function(Dri) stats.set_int(MPX .. "SCRIPT_INCREASE_DRIV", 0) sleep(5) stats.set_int(MPX .. "SCRIPT_INCREASE_DRIV", Dri - stats.get_int(MPX .. "WHEELIE_ABILITY")) end)
	Characteristics:add_int_range("Swimming", 2, 0, 100, function() return stats.get_int(MPX .. "LUNG_CAPACITY") end, function(Swi) stats.set_int(MPX .. "SCRIPT_INCREASE_LUNG", 0) sleep(5) stats.set_int(MPX .. "SCRIPT_INCREASE_LUNG", Swi - stats.get_int(MPX .. "LUNG_CAPACITY")) end)
	Characteristics:add_float_range("Psychics", 2, 0, 100, function() return stats.get_float(MPX .. "PLAYER_MENTAL_STATE") end, function(Men) stats.set_float(MPX .. "PLAYER_MENTAL_STATE", Men) end)
	
	Characteristics:add_action("", function() end)

	CharacteristicsNote = Characteristics:add_submenu("Read Me")
	
	CharacteristicsNote:add_action("                  Fast Run n Reload:", function() end)
	CharacteristicsNote:add_action("      Change session to apply the result", function() end)
	CharacteristicsNote:add_action("", function() end)
	CharacteristicsNote:add_action("    After changing one stat wait ≈5 secs", function() end)
	
	Collectibles = CharactersStats:add_submenu("Collectibles [Outdated]")
	
	TCollectibles = Collectibles:add_submenu("Unlock All (Temporarily)")
	
	TCollectibles:add_action("Action Figures", function() globals.set_int(2788408, 100) end)
	TCollectibles:add_action("Movie Props", function() globals.set_int(2788693, 10) end)
	TCollectibles:add_action("Playing Cards", function() globals.set_int(2788409, 54) end)
	TCollectibles:add_action("Signal Jammers", function() globals.set_int(2788410, 50) end)
	
	PCollectibles = Collectibles:add_submenu("Unlock All (Permanently)")
	
	PCollectibles:add_action("Action Figures", function() globals.set_int(2788408, 99) end)
	PCollectibles:add_action("Movie Props", function() globals.set_int(2788693, 9) end)
	PCollectibles:add_action("Playing Cards", function() globals.set_int(2788409, 53) end)
	PCollectibles:add_action("Signal Jammers", function() globals.set_int(2788410, 49) end)
	
	PCollectibles:add_action("", function() end)
	
	PCollectiblesNote = PCollectibles:add_submenu("Read Me")
	
	PCollectiblesNote:add_action("     First, find the item you want, select", function() end)
	PCollectiblesNote:add_action("    an option, and then pick up the item", function() end)
	
	Rank = CharactersStats:add_submenu("Rank")
		
			RankNames = {"120 (Unlock All)", "250", "500", "666 (Bro, You're In Hell)", "777 (Casino Master)", "999", "8000 (True Modder)"}
			RankValues = {120, 250, 500, 666, 777, 999, 8000}
			a59 = 1
	Rank:add_array_item("Presets", RankNames, function() return a59 end, 
		function(Pre) stats.set_int(MPX .. "CHAR_SET_RP_GIFT_ADMIN", globals.get_int(297012 + RankValues[Pre]) + 100)
		a59 = Pre end)
	
	Rank:add_int_range("Set Rank", 1, 0, 8000, function()
		if PI < 0 or PI > 1 then return end
			local CurrentRP = stats.get_int(MPX .. "CHAR_SET_RP_GIFT_ADMIN")
		if CurrentRP <= 0 then CurrentRP = globals.get_int(1853988 + PI + 205 + 1) end 
			local Rank = 0 for i = 0, 8000 do 
		if CurrentRP < globals.get_int(297012 + i) then break 
		else Rank = i end end 
		return Rank end, 
		function(NewRank) if PI < 0 or PI > 1 then return end
		local NewRP = globals.get_int(297012 + NewRank) + 100
			stats.set_int(MPX .. "CHAR_SET_RP_GIFT_ADMIN", NewRP) 
			sleep(2) 
			globals.set_int(1575020, 8) 
			globals.set_int(1574589, 1) 
			sleep(1) 
			globals.set_int(1574589, 0) end)

	Rank:add_action("", function() end)
	
	RankNote = Rank:add_submenu("Read Me")
	
	RankNote:add_action("             High level = More reports", function() end)
	
			a60 = false
		local function SexChanger(Enabled)
			if Enabled then stats.set_int(MPX .. "ALLOW_GENDER_CHANGE", 52) globals.set_int(281050, 0)
			else stats.set_int(MPX .. "ALLOW_GENDER_CHANGE", 0) end end
	CharactersStats:add_toggle("Sex Changer", function() return a60 end, function() a60 = not a60 SexChanger(a60) end)
	
---Facilities Unlocks---

	FacilitiesUnlocks = UnlockTool:add_submenu("Facilities Unlocks (Safe)")
	
	ArenaWar = FacilitiesUnlocks:add_submenu("Arena War")
	
			ArenaWarVehicles = {"Taxi", "HVY Dozer", "Clown Van", "Trashmaster", "HVY Barracks Semi", "HVY Mixer", "Space Docker", "Tractor"}
			a61 = 1
	ArenaWar:add_array_item("Unlock Vehicle", ArenaWarVehicles, function() return a61 end, function(AreWarVeh)
		if ArenaWarVehicles[AreWarVeh] == "Taxi" then do stats.set_int(MPX .. "ARENAWARS_AP_TIER", 24)
														 stats.set_int(MPX .. "ARENAWARS_AP", 230)
														 sleep(2) 
														 globals.set_int(1575020, 8) 
														 globals.set_int(1574589, 1) 
														 sleep(1) 
														 globals.set_int(1574589, 0) end 
		elseif ArenaWarVehicles[AreWarVeh] == "HVY Dozer" then do stats.set_int(MPX .. "ARENAWARS_AP_TIER", 49)
																  stats.set_int(MPX .. "ARENAWARS_AP", 460) 
																  sleep(2) 
																  globals.set_int(1575020, 8) 
																  globals.set_int(1574589, 1) 
																  sleep(1) 
																  globals.set_int(1574589, 0) end 
		elseif ArenaWarVehicles[AreWarVeh] == "Clown Van" then do stats.set_int(MPX .. "ARENAWARS_AP_TIER", 74)
																  stats.set_int(MPX .. "ARENAWARS_AP", 730)
																  sleep(2) 
																  globals.set_int(1575020, 8) 
																  globals.set_int(1574589, 1) 
																  sleep(1) 
																  globals.set_int(1574589, 0) end 
		elseif ArenaWarVehicles[AreWarVeh] == "Trashmaster" then do stats.set_int(MPX .. "ARENAWARS_AP_TIER", 99)
																	stats.set_int(MPX .. "ARENAWARS_AP", 980)
																	sleep(2) 
																	globals.set_int(1575020, 8) 
																	globals.set_int(1574589, 1) 
																	sleep(1) 
																	globals.set_int(1574589, 0) end 
		elseif ArenaWarVehicles[AreWarVeh] == "HVY Barracks Semi" then do stats.set_int(MPX .. "ARENAWARS_AP_TIER", 199)
																		  stats.set_int(MPX .. "ARENAWARS_AP", 2020)
																		  sleep(1) 
																		  globals.set_int(1575020, 8) 
																		  globals.set_int(1574589, 1) 
																		  sleep(1) 
																		  globals.set_int(1574589, 0) end 
		elseif ArenaWarVehicles[AreWarVeh] == "HVY Mixer" then do stats.set_int(MPX .. "ARENAWARS_AP_TIER", 299)
																  stats.set_int(MPX .. "ARENAWARS_AP", 3020)
																  sleep(2) 
																  globals.set_int(1575020, 8) 
																  globals.set_int(1574589, 1) 
																  sleep(1) 
																  globals.set_int(1574589, 0) end 
		elseif ArenaWarVehicles[AreWarVeh] == "Space Docker" then do stats.set_int(MPX .. "ARENAWARS_AP_TIER", 499)
																	 stats.set_int(MPX .. "ARENAWARS_AP", 4980)
																	 sleep(2) 
																	 globals.set_int(1575020, 8) 
																	 globals.set_int(1574589, 1) 
																	 sleep(1) 
																	 globals.set_int(1574589, 0) end 
		elseif ArenaWarVehicles[AreWarVeh] == "Tractor" then do stats.set_int(MPX .. "ARENAWARS_AP_TIER", 999)
														 stats.set_int(MPX .. "ARENAWARS_AP", 10010)
														 sleep(2) 
														 globals.set_int(1575020, 8) 
														 globals.set_int(1574589, 1) 
														 sleep(1) 
														 globals.set_int(1574589, 0) end 
		a61 = AreWarVeh end end)
	
	ArenaWar:add_action("Suicide", function() menu.suicide_player() end)

	ArenaWar:add_action("", function() end)
	
	ArenaWarNote = ArenaWar:add_submenu("Read Me")
	
	ArenaWarNote:add_action("       First, make the following settings:", function() end)
	ArenaWarNote:add_action("Join Next Mode from Spectator Box: Open", function() end)
	ArenaWarNote:add_action("                Allow Spectators: On", function() end)
	ArenaWarNote:add_action("                 Matchmaking: Open", function() end)
	ArenaWarNote:add_action("", function() end)
	ArenaWarNote:add_action("    Select the vehicle you want to unlock", function() end)
	ArenaWarNote:add_action("", function() end)
	ArenaWarNote:add_action("                        Navigate to:", function() end)
	ArenaWarNote:add_action("    Online -> Jobs -> Rockstar Created ->", function() end)
	ArenaWarNote:add_action("         -> Arena War -> Start Any Job", function() end)
	ArenaWarNote:add_action("", function() end)
	ArenaWarNote:add_action("     If you receive an Alert, press Enter", function() end)
	ArenaWarNote:add_action("", function() end)
	ArenaWarNote:add_action("    Wait for the carange to begin, suicide", function() end)
	ArenaWarNote:add_action("     and spin the wheel until you get AP", function() end)
	ArenaWarNote:add_action("", function() end)
	ArenaWarNote:add_action("   If you've used Arena War awards unlock", function() end)
	ArenaWarNote:add_action(" before, all unlocks will be temporary only", function() end)
	
	BunkerUnlocks = FacilitiesUnlocks:add_submenu("Bunker")
		
	BunkerUnlocks:add_action("Unlock All (Temporarily)", function()
		for j = 0, 63 do stats.set_bool_masked(MPX .. "DLCGUNPSTAT_BOOL0", true, j, MPX)
						 stats.set_bool_masked(MPX .. "DLCGUNPSTAT_BOOL1", true, j, MPX)
						 stats.set_bool_masked(MPX .. "DLCGUNPSTAT_BOOL2", true, j, MPX)
						 stats.set_bool_masked(MPX .. "GUNTATPSTAT_BOOL0", true, j, MPX)
						 stats.set_bool_masked(MPX .. "GUNTATPSTAT_BOOL1", true, j, MPX)
						 stats.set_bool_masked(MPX .. "GUNTATPSTAT_BOOL2", true, j, MPX)
						 stats.set_bool_masked(MPX .. "GUNTATPSTAT_BOOL3", true, j, MPX)
						 stats.set_bool_masked(MPX .. "GUNTATPSTAT_BOOL4", true, j, MPX)
						 stats.set_bool_masked(MPX .. "GUNTATPSTAT_BOOL5", true, j, MPX) end end)

	PBunkerUnlocks = BunkerUnlocks:add_submenu("Unlock All (Permanently)")

			a62 = false
	PBunkerUnlocks:add_toggle("Reduce Resupply Delay n Cost", function() return a62 end, function() a62 = not a62 RedResDelAndCos(a62) end)	
		
			a63 = 1
	PBunkerUnlocks:add_array_item("Research", {"Speed Up", "Reset Speed"}, function() return a63 end, 
		function(Res) if Res == 1 then globals.set_int(FMG + 21475, 1) 
									   globals.set_int(FMG + 21727, 1) 
									   globals.set_int(FMG + 21728, 1) 
									   globals.set_int(FMG + 21729, 1) 
									   globals.set_int(FMG + 21731, 0)
									   globals.set_int(FMG + 21732, 0)
									   menu.trigger_bunker_research() 
		elseif Res == 2 then globals.set_int(FMG + 21475, 60) 
							 globals.set_int(FMG + 21727, 300000) 
							 globals.set_int(FMG + 21728, 45000) 
							 globals.set_int(FMG + 21729, 45000)
							 globals.set_int(FMG + 21731, 2)
							 globals.set_int(FMG + 21732, 1) end 
							 a63 = Res end)
	
	PBunkerUnlocks:add_action("", function() end)
	
	PBunkerUnlocksNote = PBunkerUnlocks:add_submenu("Read Me")
	
	PBunkerUnlocksNote:add_action("         Set staff equally, activate and", function() end)
	PBunkerUnlocksNote:add_action(" then all researches will unlock one by one", function() end)
					
	LSCarMeet = FacilitiesUnlocks:add_submenu("LS Car Meet")
	
	LSCarMeet:add_action("Unlock All", function() for i = FMG + 31835, FMG + 31862 do globals.set_float(i, 100000) end end)
	
	LSCarMeet:add_action("", function() end)
	
	LSCarMeetNote = LSCarMeet:add_submenu("Read Me")
	
	LSCarMeetNote:add_action("      Buy a membership, activate, sit in", function() end)
	LSCarMeetNote:add_action("          a test car and go to the track", function() end)
	LSCarMeetNote:add_action("", function() end)
	LSCarMeetNote:add_action("      If your level is not 1, then activate", function() end)
	LSCarMeetNote:add_action("    and buy something in the LSCM store", function() end)
	LSCarMeetNote:add_action("", function() end)
	LSCarMeetNote:add_action("    If you've used LS Tuner awards unlock", function() end)
	LSCarMeetNote:add_action(" before, all unlocks will be temporary only", function() end)
	
	LSCustoms = FacilitiesUnlocks:add_submenu("LS Customs")
	
	LSCustoms:add_action("Unlock All", function() stats.set_int(MPX .. "CHAR_FM_CARMOD_1_UNLCK", -1)
												  stats.set_int(MPX .. "CHAR_FM_CARMOD_2_UNLCK", -1)
												  stats.set_int(MPX .. "CHAR_FM_CARMOD_3_UNLCK", -1)
												  stats.set_int(MPX .. "CHAR_FM_CARMOD_4_UNLCK", -1)
												  stats.set_int(MPX .. "CHAR_FM_CARMOD_5_UNLCK", -1)
												  stats.set_int(MPX .. "CHAR_FM_CARMOD_6_UNLCK", -1)
												  stats.set_int(MPX .. "CHAR_FM_CARMOD_7_UNLCK", -1)
												  stats.set_int(MPX .. "AWD_DROPOFF_CAP_PACKAGES", 100)
												  stats.set_int(MPX .. "AWD_KILL_CARRIER_CAPTURE", 100)
												  stats.set_int(MPX .. "NUMBER_SLIPSTREAMS_IN_RACE", 100)
												  stats.set_int(MPX .. "AWD_NIGHTVISION_KILLS", 100)
												  stats.set_int(MPX .. "AWD_WIN_CAPTURES", 50)
												  stats.set_int(MPX .. "AWD_FINISH_HEISTS", 50)
												  stats.set_int(MPX .. "AWD_FINISH_HEIST_SETUP_JOB", 50)
												  stats.set_int(MPX .. "AWD_RACES_WON", 50)
												  stats.set_int(MPX .. "AWD_WIN_LAST_TEAM_STANDINGS", 50)
												  stats.set_int(MPX .. "AWD_ONLY_PLAYER_ALIVE_LTS", 50)
												  stats.set_int(MPX .. "TOTAL_RACES_WON", 50)
												  stats.set_int(MPX .. "NUMBER_TURBO_STARTS_IN_RACE", 50)
												  stats.set_int(MPX .. "RACES_WON", 50)
												  stats.set_int(MPX .. "USJS_COMPLETED", 50)
												  stats.set_int(MPX .. "USJS_FOUND", 50)
												  stats.set_int(MPX .. "USJS_TOTAL_COMPLETED", 50)
												  stats.set_int(MPX .. "AWD_FM_GTA_RACES_WON", 50)
												  stats.set_int(MPX .. "AWD_FM_RACES_FASTEST_LAP", 50)
												  stats.set_int(MPX .. "AWD_FMBASEJMP", 25)
												  stats.set_int(MPX .. "AWD_FMWINAIRRACE", 25)
												  stats.set_int(MPX .. "AWD_FM_RACE_LAST_FIRST", 25)
												  stats.set_int(MPX .. "AWD_FMRALLYWONDRIVE", 25)
												  stats.set_int(MPX .. "AWD_FMRALLYWONNAV", 25)
												  stats.set_int(MPX .. "AWD_FMWINSEARACE", 25)
												  stats.set_int(MPX .. "MOST_FLIPS_IN_ONE_JUMP", 5)
												  stats.set_int(MPX .. "MOST_SPINS_IN_ONE_JUMP", 5) end)

	CustomModifications = LSCustoms:add_submenu("Custom Modifications")
		
	CustomWheels = CustomModifications:add_submenu("Custom Wheels")
	
			F1Mode = false
			OldF1Hash = 0
	CustomWheels:add_toggle("F1 Wheels", function() return F1Mode end, function() F1Mode = not F1Mode
		if F1Mode then
		if localplayer ~= nil and localplayer:is_in_vehicle() then
			OldF1Hash = localplayer:get_current_vehicle():get_model_hash()
			localplayer:get_current_vehicle():set_model_hash(1492612435) end
		else
		if localplayer ~= nil and localplayer:is_in_vehicle() then
		   localplayer:get_current_vehicle():set_model_hash(OldF1Hash) end end end)

			BennysMode = false
			OldBennysHash = 0
	CustomWheels:add_toggle("Benny's Wheels", function() return BennysMode end, function() BennysMode = not BennysMode
		if BennysMode then
		if localplayer ~= nil and localplayer:is_in_vehicle() then
			OldBennysHash = localplayer:get_current_vehicle():get_model_hash()
			localplayer:get_current_vehicle():set_model_hash(196747873) end
		else 
		if localplayer ~= nil and localplayer:is_in_vehicle() then
		   localplayer:get_current_vehicle():set_model_hash(OldBennysHash) end end end)
	 
	CustomWheels:add_action("", function() end)
	
	CustomWheelsNote = CustomWheels:add_submenu("Read Me") 
	
	CustomWheelsNote:add_action("    Enable which feature you want to use", function() end)
	CustomWheelsNote:add_action(" when you're in CEO Office Mod Shop and", function() end)
	CustomWheelsNote:add_action("      disable after purchasing the wheels", function() end)
	
	CustomPlate = CustomModifications:add_submenu("Custom Plate")

			PlateChar = {".", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"}
			DefNum21 = PlateChar[1]
			DefNum21Cur = 1
	CustomPlate:add_array_item("Char #1", PlateChar, function() if localplayer ~= nil and localplayer:is_in_vehicle() then return DefNum21Cur end end, 
		function(NewNum21) DefNum21 = PlateChar[NewNum21]
						   DefNum21Cur = NewNum21 end)

			DefNum22 = PlateChar[1]
			DefNum22Cur = 1
	CustomPlate:add_array_item("Char #2", PlateChar, function() if localplayer ~= nil and localplayer:is_in_vehicle() then return DefNum22Cur end end, 
		function(NewNum22) DefNum22 = PlateChar[NewNum22]
						   DefNum22Cur = NewNum22 end)

			DefNum23 = PlateChar[1]
			DefNum23Cur = 1
	CustomPlate:add_array_item("Char #3", PlateChar, function() if localplayer ~= nil and localplayer:is_in_vehicle() then return DefNum23Cur end end, 
		function(NewNum23) DefNum23 = PlateChar[NewNum23]
						   DefNum23Cur = NewNum23 end)

			DefNum24 = PlateChar[1]
			DefNum24Cur = 1 
	CustomPlate:add_array_item("Char #4", PlateChar, function() if localplayer ~= nil and localplayer:is_in_vehicle() then return DefNum24Cur end end, 
		function(NewNum24) DefNum24 = PlateChar[NewNum24]
						   DefNum24Cur = NewNum24 end)

			DefNum25 = PlateChar[1]
			DefNum25Cur = 1
	CustomPlate:add_array_item("Char #5", PlateChar, function()	if localplayer ~= nil and localplayer:is_in_vehicle() then return DefNum25Cur end end, 
		function(NewNum25) DefNum25 = PlateChar[NewNum25]
						   DefNum25Cur = NewNum25 end)

			DefNum26 = PlateChar[1]
			DefNum26Cur = 1
	CustomPlate:add_array_item("Char #6", PlateChar, function() if localplayer ~= nil and localplayer:is_in_vehicle() then return DefNum26Cur end end, 
		function(NewNum26) DefNum26 = PlateChar[NewNum26]
						   DefNum26Cur = NewNum26 end)

			DefNum27 = PlateChar[1]
			DefNum27Cur = 1
	CustomPlate:add_array_item("Char #7", PlateChar, function() if localplayer ~= nil and localplayer:is_in_vehicle() then return DefNum27Cur end end, 
		function(NewNum27) DefNum27 = PlateChar[NewNum27]
						   DefNum27Cur = NewNum27 end)

			DefNum28 = PlateChar[1]
			DefNum28Cur = 1
	CustomPlate:add_array_item("Char #8", PlateChar, function() if localplayer ~= nil and localplayer:is_in_vehicle() then return DefNum28Cur end end, 
		function(NewNum28) DefNum28 = PlateChar[NewNum28]
					       DefNum28Cur = NewNum28 end)

		local function CheckPlate(IfSpace) if IfSpace == "." then return " "
		else return IfSpace end end
	CustomPlate:add_bare_item("", function() return "Apply Plate: " .. CheckPlate(DefNum21) .. CheckPlate(DefNum22) .. CheckPlate(DefNum23) .. CheckPlate(DefNum24) .. CheckPlate(DefNum25) .. CheckPlate(DefNum26) .. CheckPlate(DefNum27) .. CheckPlate(DefNum28) end, 
		function() if localplayer ~= nil and localplayer:is_in_vehicle() then localplayer:get_current_vehicle():set_number_plate_text(DefNum21 .. DefNum22 .. DefNum23 .. DefNum24 .. DefNum25 .. DefNum26 .. DefNum27 .. DefNum28) end end, function() end, function() end)
	   
	CustomPlate:add_action("", function() end)
	
	CustomPlateNote = CustomPlate:add_submenu("Read Me")
	
	CustomPlateNote:add_action("                        «.» = space", function() end)
	CustomPlateNote:add_action("", function() end)
	CustomPlateNote:add_action("      Use in LSC and buy a plate to save", function() end)
	
	LSCustoms:add_action("", function() end)	
	
	LSCustomsNote = LSCustoms:add_submenu("Read Me")
	
	LSCustomsNote:add_action("         Some colors may not be saved", function() end)
	
	CharactersStats:add_action("", function() end)
	
	CharactersStatsNote = CharactersStats:add_submenu("Read Me")
	
	CharactersStatsNote:add_action("                       Sex Changer:", function() end)
	CharactersStatsNote:add_action("     Unlocks «Change Sex» option while", function() end)
	CharactersStatsNote:add_action("                editing your character", function() end)
	
--Credits--
	
	Credits = SilentNight:add_submenu("♥ Credits")
	
	Credits:add_action("Developer: Silent", function() end)
	Credits:add_action("Supervisor: Killa`B", function() end)
	Credits:add_action("Helpers #1: Slon, Professor", function() end)
	Credits:add_action("Helpers #2: Zeiger, Amnesia, Pewpew", function() end)
	Credits:add_action("", function() end)
	Credits:add_action("Discord: silentsalo", function() end)
